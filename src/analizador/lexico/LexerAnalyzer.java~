/* The following code was generated by JFlex 1.6.1 */

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizador.lexico;

import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

/**
 *
 * @author geovanny
 */
class Yytoken {
    
    private int id; //Identificador Ãºnico para cada TOKEN
    private String name; //Nombre del TOKEN
    private Types_Tokens type;  //Tipo del TOKEN (Identificador, Operador, Palabra Reservada, Literal)
    private ArrayList<Line> lines = new ArrayList<>();  //Arreglos de lineas y ocurrencias
    
    public Yytoken(int id, String name, Types_Tokens type) {
        this.id = id;
        this.name = name;
        this.type = type;
    }

    @Override
    public String toString() {
        return name + ": " + type + " - " + lines;
    }

    /**
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(int id) {
        this.id = id;
    }
    
    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the type
     */
    public Types_Tokens getType() {
        return type;
    }

    /**
     * @param type the type to set
     */
    public void setType(Types_Tokens type) {
        this.type = type;
    }

    /**
     * @return the lines
     */
    public ArrayList<Line> getLines() {
        return lines;
    }

    /**
     * @param lines the lines to set
     */
    public void setLines(ArrayList<Line> lines) {
        this.lines = lines;        
    }
    
}

/********** Seccion de opciones y declaraciones de JFlex **********/

public class LexerAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\1\12\1\12\1\11\22\0\1\1\1\0\1\50"+
    "\1\51\1\0\1\60\2\0\1\2\1\4\1\3\1\53\1\52\1\45"+
    "\1\43\1\7\12\42\1\57\1\52\1\56\1\55\1\54\2\0\1\13"+
    "\1\20\1\27\1\15\1\21\1\34\1\22\1\31\1\23\1\46\1\40"+
    "\1\25\1\36\1\14\1\24\1\37\1\46\1\16\1\30\1\26\1\35"+
    "\1\32\1\33\1\41\1\17\1\46\1\52\1\0\1\52\3\0\4\46"+
    "\1\47\25\46\1\5\1\44\1\6\7\0\1\12\u1fa2\0\1\12\1\12"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\1\1\1\3\1\2\25\4"+
    "\1\1\2\3\2\1\3\3\1\1\2\0\1\2\1\0"+
    "\1\2\6\4\1\5\6\4\2\5\24\4\5\0\2\6"+
    "\5\0\1\4\1\5\25\4\1\5\4\4\1\7\2\0"+
    "\1\6\1\0\1\2\1\0\3\4\1\5\20\4\1\0"+
    "\1\6\1\4\1\5\14\4\1\7\1\4\1\5\10\4"+
    "\1\5\4\4\1\5\2\4\1\5\166\4\u0175\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[673];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\223\0\61\0\304\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\304\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u07d9\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u055c"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0ebd\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u0746\0\u1014\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u0fb2\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u1665\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\61\0\u1a39\0\u1a39\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1a08\0\u1cb6\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49"+
    "\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e3e\0\u1e6f\0\u1ea0"+
    "\0\u1ed1\0\u1f02\0\u1f02\0\u1f33\0\u1f64\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6"+
    "\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e"+
    "\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6"+
    "\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e"+
    "\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6"+
    "\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e"+
    "\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06"+
    "\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e"+
    "\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16"+
    "\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e"+
    "\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226"+
    "\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae"+
    "\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536"+
    "\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be"+
    "\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846"+
    "\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce"+
    "\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4\0\u3b25\0\u3b56"+
    "\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde"+
    "\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66"+
    "\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd\0\u3fee"+
    "\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145\0\u4176"+
    "\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe"+
    "\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3\0\u4424\0\u4455\0\u4486"+
    "\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e"+
    "\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765\0\u4796"+
    "\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed\0\u491e"+
    "\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75\0\u4aa6"+
    "\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd\0\u4c2e"+
    "\0\u4c5f\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85\0\u4db6"+
    "\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d\0\u4f3e"+
    "\0\u4f6f\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064\0\u5095\0\u50c6"+
    "\0\u50f7\0\u5128\0\u5159\0\u518a\0\u51bb\0\u51ec\0\u521d\0\u524e"+
    "\0\u527f\0\u52b0\0\u52e1\0\u5312\0\u5343\0\u5374\0\u53a5\0\u53d6"+
    "\0\u5407\0\u5438\0\u5469\0\u549a\0\u54cb\0\u54fc\0\u552d\0\u555e"+
    "\0\u558f\0\u55c0\0\u55f1\0\u5622\0\u5653\0\u5684\0\u56b5\0\u56e6"+
    "\0\u5717\0\u5748\0\u5779\0\u57aa\0\u57db\0\u580c\0\u583d\0\u586e"+
    "\0\u589f\0\u58d0\0\u5901\0\u5932\0\u5963\0\u5994\0\u59c5\0\u59f6"+
    "\0\u5a27\0\u5a58\0\u5a89\0\u5aba\0\u5aeb\0\u5b1c\0\u5b4d\0\u5b7e"+
    "\0\u5baf\0\u5be0\0\u5c11\0\u5c42\0\u5c73\0\u5ca4\0\u5cd5\0\u5d06"+
    "\0\u5d37\0\u5d68\0\u5d99\0\u5dca\0\u5dfb\0\u5e2c\0\u5e5d\0\u5e8e"+
    "\0\u5ebf\0\u5ef0\0\u5f21\0\u5f52\0\u5f83\0\u5fb4\0\u5fe5\0\u6016"+
    "\0\u6047\0\u6078\0\u60a9\0\u60da\0\u610b\0\u613c\0\u616d\0\u619e"+
    "\0\u61cf\0\u6200\0\u6231\0\u6262\0\u6293\0\u62c4\0\u62f5\0\u6326"+
    "\0\u6357\0\u6388\0\u63b9\0\u63ea\0\u641b\0\u644c\0\u647d\0\u64ae"+
    "\0\u64df\0\u6510\0\u6541\0\u6572\0\u65a3\0\u65d4\0\u6605\0\u6636"+
    "\0\u6667\0\u6698\0\u66c9\0\u66fa\0\u672b\0\u675c\0\u678d\0\u67be"+
    "\0\u67ef\0\u6820\0\u6851\0\u6882\0\u68b3\0\u68e4\0\u6915\0\u6946"+
    "\0\u6977\0\u69a8\0\u69d9\0\u6a0a\0\u6a3b\0\u6a6c\0\u6a9d\0\u6ace"+
    "\0\u6aff\0\u6b30\0\u6b61\0\u6b92\0\u6bc3\0\u6bf4\0\u6c25\0\u6c56"+
    "\0\u6c87\0\u6cb8\0\u6ce9\0\u6d1a\0\u6d4b\0\u6d7c\0\u6dad\0\u6dde"+
    "\0\u6e0f\0\u6e40\0\u6e71\0\u6ea2\0\u6ed3\0\u6f04\0\u6f35\0\u6f66"+
    "\0\u6f97\0\u6fc8\0\u6ff9\0\u702a\0\u705b\0\u708c\0\u70bd\0\u70ee"+
    "\0\u711f\0\u7150\0\u7181\0\u71b2\0\u71e3\0\u7214\0\u7245\0\u7276"+
    "\0\u72a7\0\u72d8\0\u7309\0\u733a\0\u736b\0\u739c\0\u73cd\0\u73fe"+
    "\0\u742f\0\u7460\0\u7491\0\u74c2\0\u74f3\0\u7524\0\u7555\0\u7586"+
    "\0\u75b7\0\u75e8\0\u7619\0\u764a\0\u767b\0\u76ac\0\u76dd\0\u770e"+
    "\0\u773f\0\u7770\0\u77a1\0\u77d2\0\u7803\0\u7834\0\u7865\0\u7896"+
    "\0\u78c7\0\u78f8\0\u7929\0\u795a\0\u798b\0\u79bc\0\u79ed\0\u7a1e"+
    "\0\u7a4f\0\u7a80\0\u7ab1\0\u7ae2\0\u7b13\0\u7b44\0\u7b75\0\u7ba6"+
    "\0\u7bd7\0\u7c08\0\u7c39\0\u7c6a\0\u7c9b\0\u7ccc\0\u7cfd\0\u7d2e"+
    "\0\u7d5f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[673];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\3\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\16\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\16\1\36\1\37\1\40\1\2\1\41\2\16\1\42"+
    "\1\43\1\6\1\44\1\45\1\6\1\46\1\5\1\47"+
    "\64\0\1\50\132\0\1\6\3\0\6\51\1\52\1\51"+
    "\3\53\46\51\7\0\1\54\45\0\1\6\13\0\1\3"+
    "\63\0\1\55\1\56\1\55\1\57\24\55\3\0\2\55"+
    "\24\0\10\55\1\60\1\61\16\55\3\0\2\55\24\0"+
    "\10\55\1\62\1\63\16\55\3\0\2\55\24\0\6\55"+
    "\1\64\21\55\3\0\2\55\24\0\30\55\3\0\2\55"+
    "\24\0\4\55\1\65\1\55\1\66\2\55\1\67\16\55"+
    "\3\0\2\55\24\0\1\55\1\56\10\55\1\70\15\55"+
    "\3\0\2\55\24\0\11\55\1\71\16\55\3\0\2\55"+
    "\24\0\1\55\1\72\17\55\1\73\6\55\3\0\2\55"+
    "\24\0\3\55\1\73\15\55\1\73\6\55\3\0\2\55"+
    "\24\0\1\74\10\55\1\75\16\55\3\0\2\55\24\0"+
    "\3\55\1\76\1\77\4\55\1\73\4\55\1\100\11\55"+
    "\3\0\2\55\24\0\1\70\10\55\1\101\4\55\1\102"+
    "\11\55\3\0\2\55\24\0\6\55\1\61\4\55\1\103"+
    "\2\55\1\104\11\55\3\0\2\55\24\0\1\105\27\55"+
    "\3\0\2\55\24\0\3\55\1\106\4\55\1\107\5\55"+
    "\1\110\11\55\3\0\2\55\24\0\1\111\7\55\1\112"+
    "\1\113\10\55\1\114\5\55\3\0\2\55\24\0\1\55"+
    "\1\115\26\55\3\0\2\55\24\0\11\55\1\56\16\55"+
    "\3\0\2\55\24\0\1\116\2\55\1\117\24\55\3\0"+
    "\2\55\24\0\11\55\1\105\16\55\3\0\2\55\53\0"+
    "\1\120\1\121\57\0\1\122\63\0\1\6\7\0\1\6"+
    "\3\0\3\123\1\124\4\123\3\0\30\123\1\124\4\123"+
    "\1\125\10\123\42\0\1\126\71\0\1\6\1\0\1\6"+
    "\57\0\1\5\1\6\57\0\2\6\1\5\62\0\1\127"+
    "\3\50\1\130\1\131\3\50\3\132\46\50\6\133\1\52"+
    "\1\133\3\0\46\133\6\53\1\3\52\53\10\54\3\0"+
    "\46\54\13\0\30\134\3\0\2\134\24\0\2\134\1\135"+
    "\25\134\3\0\2\134\24\0\3\134\1\136\24\134\3\0"+
    "\2\134\24\0\12\134\1\135\15\134\3\0\2\134\24\0"+
    "\13\134\1\135\14\134\3\0\2\134\24\0\17\134\1\135"+
    "\10\134\3\0\2\134\24\0\20\134\1\137\7\134\3\0"+
    "\2\134\24\0\1\140\13\134\1\141\7\134\1\142\3\134"+
    "\3\0\2\134\24\0\13\134\1\143\14\134\3\0\2\134"+
    "\24\0\7\134\1\144\20\134\3\0\2\134\24\0\11\134"+
    "\1\145\16\134\3\0\2\134\24\0\15\134\1\143\12\134"+
    "\3\0\2\134\24\0\13\134\1\146\14\134\3\0\2\134"+
    "\24\0\12\134\1\147\1\135\14\134\3\0\2\134\24\0"+
    "\5\134\1\150\22\134\3\0\2\134\24\0\1\134\1\151"+
    "\26\134\3\0\2\134\24\0\22\134\1\143\5\134\3\0"+
    "\2\134\24\0\24\134\1\143\3\134\3\0\2\134\24\0"+
    "\6\134\1\152\21\134\3\0\2\134\24\0\1\134\1\153"+
    "\26\134\3\0\2\134\24\0\1\154\27\134\3\0\2\134"+
    "\24\0\3\134\1\155\24\134\3\0\2\134\24\0\11\134"+
    "\1\156\16\134\3\0\2\134\24\0\3\134\1\135\24\134"+
    "\3\0\2\134\24\0\10\134\1\157\17\134\3\0\2\134"+
    "\24\0\13\134\1\160\14\134\3\0\2\134\24\0\10\134"+
    "\1\161\17\134\3\0\2\134\24\0\12\134\1\162\15\134"+
    "\3\0\2\134\24\0\12\134\1\143\15\134\3\0\2\134"+
    "\24\0\3\134\1\163\24\134\3\0\2\134\24\0\1\134"+
    "\1\164\26\134\3\0\2\134\24\0\13\134\1\165\14\134"+
    "\3\0\2\134\24\0\14\134\1\166\13\134\3\0\2\134"+
    "\24\0\11\134\1\167\16\134\3\0\2\134\53\0\1\170"+
    "\37\0\1\171\20\0\1\122\1\0\1\171\2\0\1\171"+
    "\11\0\10\123\3\0\35\123\1\125\10\123\10\124\3\172"+
    "\35\124\1\125\10\124\42\0\1\173\25\0\1\174\51\0"+
    "\3\131\1\130\1\175\3\131\3\0\51\131\1\130\4\131"+
    "\3\0\46\131\3\132\1\176\1\0\54\132\13\0\30\177"+
    "\3\0\2\177\24\0\1\200\27\177\3\0\2\177\24\0"+
    "\1\177\1\201\26\177\3\0\2\177\24\0\2\177\1\202"+
    "\7\177\1\202\15\177\3\0\2\177\24\0\11\177\1\203"+
    "\16\177\3\0\2\177\24\0\6\177\1\204\21\177\3\0"+
    "\2\177\24\0\6\177\1\202\21\177\3\0\2\177\24\0"+
    "\10\177\1\205\17\177\3\0\2\177\24\0\12\177\1\206"+
    "\15\177\3\0\2\177\24\0\11\177\1\202\16\177\3\0"+
    "\2\177\24\0\10\177\1\207\17\177\3\0\2\177\24\0"+
    "\6\177\1\210\21\177\3\0\2\177\24\0\7\177\1\211"+
    "\20\177\3\0\2\177\24\0\1\177\1\202\26\177\3\0"+
    "\2\177\24\0\15\177\1\212\12\177\3\0\2\177\24\0"+
    "\3\177\1\202\24\177\3\0\2\177\24\0\10\177\1\213"+
    "\17\177\3\0\2\177\24\0\3\177\1\214\24\177\3\0"+
    "\2\177\24\0\13\177\1\215\14\177\3\0\2\177\24\0"+
    "\16\177\1\202\11\177\3\0\2\177\24\0\12\177\1\215"+
    "\15\177\3\0\2\177\24\0\15\177\1\215\12\177\3\0"+
    "\2\177\24\0\20\177\1\216\7\177\3\0\2\177\24\0"+
    "\14\177\1\217\13\177\3\0\2\177\24\0\10\177\1\210"+
    "\17\177\3\0\2\177\24\0\25\177\1\220\2\177\3\0"+
    "\2\177\24\0\7\177\1\221\4\177\1\222\13\177\3\0"+
    "\2\177\32\0\1\171\20\0\1\170\1\0\1\171\2\0"+
    "\1\171\56\0\1\223\5\0\1\223\5\0\50\172\1\224"+
    "\10\172\42\0\1\224\25\0\1\54\55\0\1\3\67\0"+
    "\30\225\3\0\2\225\24\0\4\225\1\226\23\225\3\0"+
    "\2\225\24\0\13\225\1\227\14\225\3\0\2\225\24\0"+
    "\3\225\1\230\24\225\3\0\2\225\24\0\1\231\27\225"+
    "\3\0\2\225\24\0\1\225\1\226\26\225\3\0\2\225"+
    "\24\0\6\225\1\232\21\225\3\0\2\225\24\0\1\225"+
    "\1\233\26\225\3\0\2\225\24\0\12\225\1\226\15\225"+
    "\3\0\2\225\24\0\10\225\1\234\17\225\3\0\2\225"+
    "\24\0\13\225\1\226\14\225\3\0\2\225\24\0\1\225"+
    "\1\235\26\225\3\0\2\225\24\0\13\225\1\236\14\225"+
    "\3\0\2\225\24\0\6\225\1\226\21\225\3\0\2\225"+
    "\24\0\1\237\27\225\3\0\2\225\24\0\13\225\1\240"+
    "\14\225\3\0\2\225\24\0\6\225\1\230\21\225\3\0"+
    "\2\225\24\0\3\225\1\241\24\225\3\0\2\225\24\0"+
    "\6\225\1\242\21\225\3\0\2\225\53\0\1\243\31\0"+
    "\30\244\3\0\2\244\24\0\11\244\1\245\16\244\3\0"+
    "\2\244\24\0\2\244\1\245\25\244\3\0\2\244\24\0"+
    "\13\244\1\245\14\244\3\0\2\244\24\0\1\246\27\244"+
    "\3\0\2\244\24\0\6\244\1\245\21\244\3\0\2\244"+
    "\24\0\1\244\1\247\26\244\3\0\2\244\24\0\7\244"+
    "\1\245\20\244\3\0\2\244\24\0\10\244\1\250\17\244"+
    "\3\0\2\244\24\0\3\244\1\251\24\244\3\0\2\244"+
    "\24\0\10\244\1\252\17\244\3\0\2\244\24\0\1\253"+
    "\27\244\3\0\2\244\24\0\2\244\1\254\25\244\3\0"+
    "\2\244\24\0\30\255\3\0\2\255\24\0\1\255\1\256"+
    "\26\255\3\0\2\255\24\0\13\255\1\256\14\255\3\0"+
    "\2\255\24\0\1\255\1\257\26\255\3\0\2\255\24\0"+
    "\2\255\1\256\25\255\3\0\2\255\24\0\11\255\1\260"+
    "\16\255\3\0\2\255\24\0\23\255\1\256\4\255\3\0"+
    "\2\255\24\0\22\255\1\261\5\255\3\0\2\255\24\0"+
    "\30\262\3\0\2\262\24\0\13\262\1\263\14\262\3\0"+
    "\2\262\24\0\1\262\1\263\26\262\3\0\2\262\24\0"+
    "\3\262\1\264\24\262\3\0\2\262\24\0\30\265\3\0"+
    "\2\265\24\0\6\265\1\266\21\265\3\0\2\265\24\0"+
    "\30\267\3\0\2\267\24\0\30\270\3\0\2\270\24\0"+
    "\30\271\3\0\2\271\24\0\30\272\3\0\2\272\24\0"+
    "\30\273\3\0\2\273\24\0\30\274\3\0\2\274\24\0"+
    "\30\275\3\0\2\275\24\0\30\276\3\0\2\276\24\0"+
    "\30\277\3\0\2\277\24\0\30\300\3\0\2\300\24\0"+
    "\30\301\3\0\2\301\24\0\30\302\3\0\2\302\24\0"+
    "\30\303\3\0\2\303\24\0\30\304\3\0\2\304\24\0"+
    "\30\305\3\0\2\305\24\0\30\306\3\0\2\306\24\0"+
    "\30\307\3\0\2\307\24\0\30\310\3\0\2\310\24\0"+
    "\30\311\3\0\2\311\24\0\30\312\3\0\2\312\24\0"+
    "\30\313\3\0\2\313\24\0\30\314\3\0\2\314\24\0"+
    "\30\315\3\0\2\315\24\0\30\316\3\0\2\316\24\0"+
    "\30\317\3\0\2\317\24\0\30\320\3\0\2\320\24\0"+
    "\30\321\3\0\2\321\24\0\30\322\3\0\2\322\24\0"+
    "\30\323\3\0\2\323\24\0\30\324\3\0\2\324\24\0"+
    "\30\325\3\0\2\325\24\0\30\326\3\0\2\326\24\0"+
    "\30\327\3\0\2\327\24\0\30\330\3\0\2\330\24\0"+
    "\30\331\3\0\2\331\24\0\30\332\3\0\2\332\24\0"+
    "\30\333\3\0\2\333\24\0\30\334\3\0\2\334\24\0"+
    "\30\335\3\0\2\335\24\0\30\336\3\0\2\336\24\0"+
    "\30\337\3\0\2\337\24\0\30\340\3\0\2\340\24\0"+
    "\30\341\3\0\2\341\24\0\30\342\3\0\2\342\24\0"+
    "\30\343\3\0\2\343\24\0\30\344\3\0\2\344\24\0"+
    "\30\345\3\0\2\345\24\0\30\346\3\0\2\346\24\0"+
    "\30\347\3\0\2\347\24\0\30\350\3\0\2\350\24\0"+
    "\30\351\3\0\2\351\24\0\30\352\3\0\2\352\24\0"+
    "\30\353\3\0\2\353\24\0\30\354\3\0\2\354\24\0"+
    "\30\355\3\0\2\355\24\0\30\356\3\0\2\356\24\0"+
    "\30\357\3\0\2\357\24\0\30\360\3\0\2\360\24\0"+
    "\30\361\3\0\2\361\24\0\30\362\3\0\2\362\24\0"+
    "\30\363\3\0\2\363\24\0\30\364\3\0\2\364\24\0"+
    "\30\365\3\0\2\365\24\0\30\366\3\0\2\366\24\0"+
    "\30\367\3\0\2\367\24\0\30\370\3\0\2\370\24\0"+
    "\30\371\3\0\2\371\24\0\30\372\3\0\2\372\24\0"+
    "\30\373\3\0\2\373\24\0\30\374\3\0\2\374\24\0"+
    "\30\375\3\0\2\375\24\0\30\376\3\0\2\376\24\0"+
    "\30\377\3\0\2\377\24\0\30\u0100\3\0\2\u0100\24\0"+
    "\30\u0101\3\0\2\u0101\24\0\30\u0102\3\0\2\u0102\24\0"+
    "\30\u0103\3\0\2\u0103\24\0\30\u0104\3\0\2\u0104\24\0"+
    "\30\u0105\3\0\2\u0105\24\0\30\u0106\3\0\2\u0106\24\0"+
    "\30\u0107\3\0\2\u0107\24\0\30\u0108\3\0\2\u0108\24\0"+
    "\30\u0109\3\0\2\u0109\24\0\30\u010a\3\0\2\u010a\24\0"+
    "\30\u010b\3\0\2\u010b\24\0\30\u010c\3\0\2\u010c\24\0"+
    "\30\u010d\3\0\2\u010d\24\0\30\u010e\3\0\2\u010e\24\0"+
    "\30\u010f\3\0\2\u010f\24\0\30\u0110\3\0\2\u0110\24\0"+
    "\30\u0111\3\0\2\u0111\24\0\30\u0112\3\0\2\u0112\24\0"+
    "\30\u0113\3\0\2\u0113\24\0\30\u0114\3\0\2\u0114\24\0"+
    "\30\u0115\3\0\2\u0115\24\0\30\u0116\3\0\2\u0116\24\0"+
    "\30\u0117\3\0\2\u0117\24\0\30\u0118\3\0\2\u0118\24\0"+
    "\30\u0119\3\0\2\u0119\24\0\30\u011a\3\0\2\u011a\24\0"+
    "\30\u011b\3\0\2\u011b\24\0\30\u011c\3\0\2\u011c\24\0"+
    "\30\u011d\3\0\2\u011d\24\0\30\u011e\3\0\2\u011e\24\0"+
    "\30\u011f\3\0\2\u011f\24\0\30\u0120\3\0\2\u0120\24\0"+
    "\30\u0121\3\0\2\u0121\24\0\30\u0122\3\0\2\u0122\24\0"+
    "\30\u0123\3\0\2\u0123\24\0\30\u0124\3\0\2\u0124\24\0"+
    "\30\u0125\3\0\2\u0125\24\0\30\u0126\3\0\2\u0126\24\0"+
    "\30\u0127\3\0\2\u0127\24\0\30\u0128\3\0\2\u0128\24\0"+
    "\30\u0129\3\0\2\u0129\24\0\30\u012a\3\0\2\u012a\24\0"+
    "\30\u012b\3\0\2\u012b\24\0\30\u012c\3\0\2\u012c\24\0"+
    "\30\u012d\3\0\2\u012d\24\0\30\u012e\3\0\2\u012e\24\0"+
    "\30\u012f\3\0\2\u012f\24\0\30\u0130\3\0\2\u0130\24\0"+
    "\30\u0131\3\0\2\u0131\24\0\30\u0132\3\0\2\u0132\24\0"+
    "\30\u0133\3\0\2\u0133\24\0\30\u0134\3\0\2\u0134\24\0"+
    "\30\u0135\3\0\2\u0135\24\0\30\u0136\3\0\2\u0136\24\0"+
    "\30\u0137\3\0\2\u0137\24\0\30\u0138\3\0\2\u0138\24\0"+
    "\30\u0139\3\0\2\u0139\24\0\30\u013a\3\0\2\u013a\24\0"+
    "\30\u013b\3\0\2\u013b\24\0\30\u013c\3\0\2\u013c\24\0"+
    "\30\u013d\3\0\2\u013d\24\0\30\u013e\3\0\2\u013e\24\0"+
    "\30\u013f\3\0\2\u013f\24\0\30\u0140\3\0\2\u0140\24\0"+
    "\30\u0141\3\0\2\u0141\24\0\30\u0142\3\0\2\u0142\24\0"+
    "\30\u0143\3\0\2\u0143\24\0\30\u0144\3\0\2\u0144\24\0"+
    "\30\u0145\3\0\2\u0145\24\0\30\u0146\3\0\2\u0146\24\0"+
    "\30\u0147\3\0\2\u0147\24\0\30\u0148\3\0\2\u0148\24\0"+
    "\30\u0149\3\0\2\u0149\24\0\30\u014a\3\0\2\u014a\24\0"+
    "\30\u014b\3\0\2\u014b\24\0\30\u014c\3\0\2\u014c\24\0"+
    "\30\u014d\3\0\2\u014d\24\0\30\u014e\3\0\2\u014e\24\0"+
    "\30\u014f\3\0\2\u014f\24\0\30\u0150\3\0\2\u0150\24\0"+
    "\30\u0151\3\0\2\u0151\24\0\30\u0152\3\0\2\u0152\24\0"+
    "\30\u0153\3\0\2\u0153\24\0\30\u0154\3\0\2\u0154\24\0"+
    "\30\u0155\3\0\2\u0155\24\0\30\u0156\3\0\2\u0156\24\0"+
    "\30\u0157\3\0\2\u0157\24\0\30\u0158\3\0\2\u0158\24\0"+
    "\30\u0159\3\0\2\u0159\24\0\30\u015a\3\0\2\u015a\24\0"+
    "\30\u015b\3\0\2\u015b\24\0\30\u015c\3\0\2\u015c\24\0"+
    "\30\u015d\3\0\2\u015d\24\0\30\u015e\3\0\2\u015e\24\0"+
    "\30\u015f\3\0\2\u015f\24\0\30\u0160\3\0\2\u0160\24\0"+
    "\30\u0161\3\0\2\u0161\24\0\30\u0162\3\0\2\u0162\24\0"+
    "\30\u0163\3\0\2\u0163\24\0\30\u0164\3\0\2\u0164\24\0"+
    "\30\u0165\3\0\2\u0165\24\0\30\u0166\3\0\2\u0166\24\0"+
    "\30\u0167\3\0\2\u0167\24\0\30\u0168\3\0\2\u0168\24\0"+
    "\30\u0169\3\0\2\u0169\24\0\30\u016a\3\0\2\u016a\24\0"+
    "\30\u016b\3\0\2\u016b\24\0\30\u016c\3\0\2\u016c\24\0"+
    "\30\u016d\3\0\2\u016d\24\0\30\u016e\3\0\2\u016e\24\0"+
    "\30\u016f\3\0\2\u016f\24\0\30\u0170\3\0\2\u0170\24\0"+
    "\30\u0171\3\0\2\u0171\24\0\30\u0172\3\0\2\u0172\24\0"+
    "\30\u0173\3\0\2\u0173\24\0\30\u0174\3\0\2\u0174\24\0"+
    "\30\u0175\3\0\2\u0175\24\0\30\u0176\3\0\2\u0176\24\0"+
    "\30\u0177\3\0\2\u0177\24\0\30\u0178\3\0\2\u0178\24\0"+
    "\30\u0179\3\0\2\u0179\24\0\30\u017a\3\0\2\u017a\24\0"+
    "\30\u017b\3\0\2\u017b\24\0\30\u017c\3\0\2\u017c\24\0"+
    "\30\u017d\3\0\2\u017d\24\0\30\u017e\3\0\2\u017e\24\0"+
    "\30\u017f\3\0\2\u017f\24\0\30\u0180\3\0\2\u0180\24\0"+
    "\30\u0181\3\0\2\u0181\24\0\30\u0182\3\0\2\u0182\24\0"+
    "\30\u0183\3\0\2\u0183\24\0\30\u0184\3\0\2\u0184\24\0"+
    "\30\u0185\3\0\2\u0185\24\0\30\u0186\3\0\2\u0186\24\0"+
    "\30\u0187\3\0\2\u0187\24\0\30\u0188\3\0\2\u0188\24\0"+
    "\30\u0189\3\0\2\u0189\24\0\30\u018a\3\0\2\u018a\24\0"+
    "\30\u018b\3\0\2\u018b\24\0\30\u018c\3\0\2\u018c\24\0"+
    "\30\u018d\3\0\2\u018d\24\0\30\u018e\3\0\2\u018e\24\0"+
    "\30\u018f\3\0\2\u018f\24\0\30\u0190\3\0\2\u0190\24\0"+
    "\30\u0191\3\0\2\u0191\24\0\30\u0192\3\0\2\u0192\24\0"+
    "\30\u0193\3\0\2\u0193\24\0\30\u0194\3\0\2\u0194\24\0"+
    "\30\u0195\3\0\2\u0195\24\0\30\u0196\3\0\2\u0196\24\0"+
    "\30\u0197\3\0\2\u0197\24\0\30\u0198\3\0\2\u0198\24\0"+
    "\30\u0199\3\0\2\u0199\24\0\30\u019a\3\0\2\u019a\24\0"+
    "\30\u019b\3\0\2\u019b\24\0\30\u019c\3\0\2\u019c\24\0"+
    "\30\u019d\3\0\2\u019d\24\0\30\u019e\3\0\2\u019e\24\0"+
    "\30\u019f\3\0\2\u019f\24\0\30\u01a0\3\0\2\u01a0\24\0"+
    "\30\u01a1\3\0\2\u01a1\24\0\30\u01a2\3\0\2\u01a2\24\0"+
    "\30\u01a3\3\0\2\u01a3\24\0\30\u01a4\3\0\2\u01a4\24\0"+
    "\30\u01a5\3\0\2\u01a5\24\0\30\u01a6\3\0\2\u01a6\24\0"+
    "\30\u01a7\3\0\2\u01a7\24\0\30\u01a8\3\0\2\u01a8\24\0"+
    "\30\u01a9\3\0\2\u01a9\24\0\30\u01aa\3\0\2\u01aa\24\0"+
    "\30\u01ab\3\0\2\u01ab\24\0\30\u01ac\3\0\2\u01ac\24\0"+
    "\30\u01ad\3\0\2\u01ad\24\0\30\u01ae\3\0\2\u01ae\24\0"+
    "\30\u01af\3\0\2\u01af\24\0\30\u01b0\3\0\2\u01b0\24\0"+
    "\30\u01b1\3\0\2\u01b1\24\0\30\u01b2\3\0\2\u01b2\24\0"+
    "\30\u01b3\3\0\2\u01b3\24\0\30\u01b4\3\0\2\u01b4\24\0"+
    "\30\u01b5\3\0\2\u01b5\24\0\30\u01b6\3\0\2\u01b6\24\0"+
    "\30\u01b7\3\0\2\u01b7\24\0\30\u01b8\3\0\2\u01b8\24\0"+
    "\30\u01b9\3\0\2\u01b9\24\0\30\u01ba\3\0\2\u01ba\24\0"+
    "\30\u01bb\3\0\2\u01bb\24\0\30\u01bc\3\0\2\u01bc\24\0"+
    "\30\u01bd\3\0\2\u01bd\24\0\30\u01be\3\0\2\u01be\24\0"+
    "\30\u01bf\3\0\2\u01bf\24\0\30\u01c0\3\0\2\u01c0\24\0"+
    "\30\u01c1\3\0\2\u01c1\24\0\30\u01c2\3\0\2\u01c2\24\0"+
    "\30\u01c3\3\0\2\u01c3\24\0\30\u01c4\3\0\2\u01c4\24\0"+
    "\30\u01c5\3\0\2\u01c5\24\0\30\u01c6\3\0\2\u01c6\24\0"+
    "\30\u01c7\3\0\2\u01c7\24\0\30\u01c8\3\0\2\u01c8\24\0"+
    "\30\u01c9\3\0\2\u01c9\24\0\30\u01ca\3\0\2\u01ca\24\0"+
    "\30\u01cb\3\0\2\u01cb\24\0\30\u01cc\3\0\2\u01cc\24\0"+
    "\30\u01cd\3\0\2\u01cd\24\0\30\u01ce\3\0\2\u01ce\24\0"+
    "\30\u01cf\3\0\2\u01cf\24\0\30\u01d0\3\0\2\u01d0\24\0"+
    "\30\u01d1\3\0\2\u01d1\24\0\30\u01d2\3\0\2\u01d2\24\0"+
    "\30\u01d3\3\0\2\u01d3\24\0\30\u01d4\3\0\2\u01d4\24\0"+
    "\30\u01d5\3\0\2\u01d5\24\0\30\u01d6\3\0\2\u01d6\24\0"+
    "\30\u01d7\3\0\2\u01d7\24\0\30\u01d8\3\0\2\u01d8\24\0"+
    "\30\u01d9\3\0\2\u01d9\24\0\30\u01da\3\0\2\u01da\24\0"+
    "\30\u01db\3\0\2\u01db\24\0\30\u01dc\3\0\2\u01dc\24\0"+
    "\30\u01dd\3\0\2\u01dd\24\0\30\u01de\3\0\2\u01de\24\0"+
    "\30\u01df\3\0\2\u01df\24\0\30\u01e0\3\0\2\u01e0\24\0"+
    "\30\u01e1\3\0\2\u01e1\24\0\30\u01e2\3\0\2\u01e2\24\0"+
    "\30\u01e3\3\0\2\u01e3\24\0\30\u01e4\3\0\2\u01e4\24\0"+
    "\30\u01e5\3\0\2\u01e5\24\0\30\u01e6\3\0\2\u01e6\24\0"+
    "\30\u01e7\3\0\2\u01e7\24\0\30\u01e8\3\0\2\u01e8\24\0"+
    "\30\u01e9\3\0\2\u01e9\24\0\30\u01ea\3\0\2\u01ea\24\0"+
    "\30\u01eb\3\0\2\u01eb\24\0\30\u01ec\3\0\2\u01ec\24\0"+
    "\30\u01ed\3\0\2\u01ed\24\0\30\u01ee\3\0\2\u01ee\24\0"+
    "\30\u01ef\3\0\2\u01ef\24\0\30\u01f0\3\0\2\u01f0\24\0"+
    "\30\u01f1\3\0\2\u01f1\24\0\30\u01f2\3\0\2\u01f2\24\0"+
    "\30\u01f3\3\0\2\u01f3\24\0\30\u01f4\3\0\2\u01f4\24\0"+
    "\30\u01f5\3\0\2\u01f5\24\0\30\u01f6\3\0\2\u01f6\24\0"+
    "\30\u01f7\3\0\2\u01f7\24\0\30\u01f8\3\0\2\u01f8\24\0"+
    "\30\u01f9\3\0\2\u01f9\24\0\30\u01fa\3\0\2\u01fa\24\0"+
    "\30\u01fb\3\0\2\u01fb\24\0\30\u01fc\3\0\2\u01fc\24\0"+
    "\30\u01fd\3\0\2\u01fd\24\0\30\u01fe\3\0\2\u01fe\24\0"+
    "\30\u01ff\3\0\2\u01ff\24\0\30\u0200\3\0\2\u0200\24\0"+
    "\30\u0201\3\0\2\u0201\24\0\30\u0202\3\0\2\u0202\24\0"+
    "\30\u0203\3\0\2\u0203\24\0\30\u0204\3\0\2\u0204\24\0"+
    "\30\u0205\3\0\2\u0205\24\0\30\u0206\3\0\2\u0206\24\0"+
    "\30\u0207\3\0\2\u0207\24\0\30\u0208\3\0\2\u0208\24\0"+
    "\30\u0209\3\0\2\u0209\24\0\30\u020a\3\0\2\u020a\24\0"+
    "\30\u020b\3\0\2\u020b\24\0\30\u020c\3\0\2\u020c\24\0"+
    "\30\u020d\3\0\2\u020d\24\0\30\u020e\3\0\2\u020e\24\0"+
    "\30\u020f\3\0\2\u020f\24\0\30\u0210\3\0\2\u0210\24\0"+
    "\30\u0211\3\0\2\u0211\24\0\30\u0212\3\0\2\u0212\24\0"+
    "\30\u0213\3\0\2\u0213\24\0\30\u0214\3\0\2\u0214\24\0"+
    "\30\u0215\3\0\2\u0215\24\0\30\u0216\3\0\2\u0216\24\0"+
    "\30\u0217\3\0\2\u0217\24\0\30\u0218\3\0\2\u0218\24\0"+
    "\30\u0219\3\0\2\u0219\24\0\30\u021a\3\0\2\u021a\24\0"+
    "\30\u021b\3\0\2\u021b\24\0\30\u021c\3\0\2\u021c\24\0"+
    "\30\u021d\3\0\2\u021d\24\0\30\u021e\3\0\2\u021e\24\0"+
    "\30\u021f\3\0\2\u021f\24\0\30\u0220\3\0\2\u0220\24\0"+
    "\30\u0221\3\0\2\u0221\24\0\30\u0222\3\0\2\u0222\24\0"+
    "\30\u0223\3\0\2\u0223\24\0\30\u0224\3\0\2\u0224\24\0"+
    "\30\u0225\3\0\2\u0225\24\0\30\u0226\3\0\2\u0226\24\0"+
    "\30\u0227\3\0\2\u0227\24\0\30\u0228\3\0\2\u0228\24\0"+
    "\30\u0229\3\0\2\u0229\24\0\30\u022a\3\0\2\u022a\24\0"+
    "\30\u022b\3\0\2\u022b\24\0\30\u022c\3\0\2\u022c\24\0"+
    "\30\u022d\3\0\2\u022d\24\0\30\u022e\3\0\2\u022e\24\0"+
    "\30\u022f\3\0\2\u022f\24\0\30\u0230\3\0\2\u0230\24\0"+
    "\30\u0231\3\0\2\u0231\24\0\30\u0232\3\0\2\u0232\24\0"+
    "\30\u0233\3\0\2\u0233\24\0\30\u0234\3\0\2\u0234\24\0"+
    "\30\u0235\3\0\2\u0235\24\0\30\u0236\3\0\2\u0236\24\0"+
    "\30\u0237\3\0\2\u0237\24\0\30\u0238\3\0\2\u0238\24\0"+
    "\30\u0239\3\0\2\u0239\24\0\30\u023a\3\0\2\u023a\24\0"+
    "\30\u023b\3\0\2\u023b\24\0\30\u023c\3\0\2\u023c\24\0"+
    "\30\u023d\3\0\2\u023d\24\0\30\u023e\3\0\2\u023e\24\0"+
    "\30\u023f\3\0\2\u023f\24\0\30\u0240\3\0\2\u0240\24\0"+
    "\30\u0241\3\0\2\u0241\24\0\30\u0242\3\0\2\u0242\24\0"+
    "\30\u0243\3\0\2\u0243\24\0\30\u0244\3\0\2\u0244\24\0"+
    "\30\u0245\3\0\2\u0245\24\0\30\u0246\3\0\2\u0246\24\0"+
    "\30\u0247\3\0\2\u0247\24\0\30\u0248\3\0\2\u0248\24\0"+
    "\30\u0249\3\0\2\u0249\24\0\30\u024a\3\0\2\u024a\24\0"+
    "\30\u024b\3\0\2\u024b\24\0\30\u024c\3\0\2\u024c\24\0"+
    "\30\u024d\3\0\2\u024d\24\0\30\u024e\3\0\2\u024e\24\0"+
    "\30\u024f\3\0\2\u024f\24\0\30\u0250\3\0\2\u0250\24\0"+
    "\30\u0251\3\0\2\u0251\24\0\30\u0252\3\0\2\u0252\24\0"+
    "\30\u0253\3\0\2\u0253\24\0\30\u0254\3\0\2\u0254\24\0"+
    "\30\u0255\3\0\2\u0255\24\0\30\u0256\3\0\2\u0256\24\0"+
    "\30\u0257\3\0\2\u0257\24\0\30\u0258\3\0\2\u0258\24\0"+
    "\30\u0259\3\0\2\u0259\24\0\30\u025a\3\0\2\u025a\24\0"+
    "\30\u025b\3\0\2\u025b\24\0\30\u025c\3\0\2\u025c\24\0"+
    "\30\u025d\3\0\2\u025d\24\0\30\u025e\3\0\2\u025e\24\0"+
    "\30\u025f\3\0\2\u025f\24\0\30\u0260\3\0\2\u0260\24\0"+
    "\30\u0261\3\0\2\u0261\24\0\30\u0262\3\0\2\u0262\24\0"+
    "\30\u0263\3\0\2\u0263\24\0\30\u0264\3\0\2\u0264\24\0"+
    "\30\u0265\3\0\2\u0265\24\0\30\u0266\3\0\2\u0266\24\0"+
    "\30\u0267\3\0\2\u0267\24\0\30\u0268\3\0\2\u0268\24\0"+
    "\30\u0269\3\0\2\u0269\24\0\30\u026a\3\0\2\u026a\24\0"+
    "\30\u026b\3\0\2\u026b\24\0\30\u026c\3\0\2\u026c\24\0"+
    "\30\u026d\3\0\2\u026d\24\0\30\u026e\3\0\2\u026e\24\0"+
    "\30\u026f\3\0\2\u026f\24\0\30\u0270\3\0\2\u0270\24\0"+
    "\30\u0271\3\0\2\u0271\24\0\30\u0272\3\0\2\u0272\24\0"+
    "\30\u0273\3\0\2\u0273\24\0\30\u0274\3\0\2\u0274\24\0"+
    "\30\u0275\3\0\2\u0275\24\0\30\u0276\3\0\2\u0276\24\0"+
    "\30\u0277\3\0\2\u0277\24\0\30\u0278\3\0\2\u0278\24\0"+
    "\30\u0279\3\0\2\u0279\24\0\30\u027a\3\0\2\u027a\24\0"+
    "\30\u027b\3\0\2\u027b\24\0\30\u027c\3\0\2\u027c\24\0"+
    "\30\u027d\3\0\2\u027d\24\0\30\u027e\3\0\2\u027e\24\0"+
    "\30\u027f\3\0\2\u027f\24\0\30\u0280\3\0\2\u0280\24\0"+
    "\30\u0281\3\0\2\u0281\24\0\30\u0282\3\0\2\u0282\24\0"+
    "\30\u0283\3\0\2\u0283\24\0\30\u0284\3\0\2\u0284\24\0"+
    "\30\u0285\3\0\2\u0285\24\0\30\u0286\3\0\2\u0286\24\0"+
    "\30\u0287\3\0\2\u0287\24\0\30\u0288\3\0\2\u0288\24\0"+
    "\30\u0289\3\0\2\u0289\24\0\30\u028a\3\0\2\u028a\24\0"+
    "\30\u028b\3\0\2\u028b\24\0\30\u028c\3\0\2\u028c\24\0"+
    "\30\u028d\3\0\2\u028d\24\0\30\u028e\3\0\2\u028e\24\0"+
    "\30\u028f\3\0\2\u028f\24\0\30\u0290\3\0\2\u0290\24\0"+
    "\30\u0291\3\0\2\u0291\24\0\30\u0292\3\0\2\u0292\24\0"+
    "\30\u0293\3\0\2\u0293\24\0\30\u0294\3\0\2\u0294\24\0"+
    "\30\u0295\3\0\2\u0295\24\0\30\u0296\3\0\2\u0296\24\0"+
    "\30\u0297\3\0\2\u0297\24\0\30\u0298\3\0\2\u0298\24\0"+
    "\30\u0299\3\0\2\u0299\24\0\30\u029a\3\0\2\u029a\24\0"+
    "\30\u029b\3\0\2\u029b\24\0\30\u029c\3\0\2\u029c\24\0"+
    "\30\u029d\3\0\2\u029d\24\0\30\u029e\3\0\2\u029e\24\0"+
    "\30\u029f\3\0\2\u029f\24\0\30\u02a0\3\0\2\u02a0\24\0"+
    "\30\u02a1\3\0\2\u02a1\24\0\30\2\3\0\2\2\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32144];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\41\1\2\0\1\1\1\0"+
    "\44\1\5\0\2\1\5\0\35\1\2\0\1\1\1\0"+
    "\1\1\1\0\24\1\1\0\1\11\u020d\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[673];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private int count; // Este lleva la cuenta de los TOKENS y es tambiÃ©n el identificador
    private ArrayList<Yytoken> tokens = new ArrayList<>();

    /**
     * Escribe los resultados en un archivo de salida
     * @throws IOException 
     */
    private void writeOutputFile() throws IOException {
        String filename = "output.out";
        BufferedWriter out = new BufferedWriter(new FileWriter(filename));
        for (Yytoken token : tokens) {
            out.write(token.toString());
            out.newLine();
        }
        out.close();
    }
    
    /**
     * Valida la inserciÃ³n de un nuevo token, si exite agrega la line o aumenta las ocurrencias del TOKEN en la misma linea
     * @param newToken
     * @param line
     * @return 
     */
    private boolean addToken(Yytoken newToken, int line) {
        for (Yytoken token : tokens) {
            if (token.getName().toUpperCase().equals(newToken.getName().toUpperCase()) && token.getType().equals(newToken.getType())) {
                System.out.println("Entro2");
                for (int i = 0; i < token.getLines().size(); i++) {
                    System.out.println("Entro1");
                    if (token.getLines().get(i).getNumLine() == line) {
                        System.out.println("Entro");
                        token.getLines().get(i).setOccurrences(token.getLines().get(i).getOccurrences() + 1);
                        return true;
                    }
                }
                token.getLines().add(new Line(line));
                return true;
            }
        }
        count++;
        newToken.setId(count);
        newToken.getLines().add(new Line(line));
        tokens.add(newToken);
        return true;
    }

    /**
     * @return the lines
     */
    public ArrayList<Yytoken> getTokens() {
        return tokens;
    }
    
    @Override
    public String toString() {
        String value = "";
        for (Yytoken token : tokens) {
            value += token.toString() + "\n";
        }
        return value;
    }

    public String toStringTokens() {
        String value = "";
        for (Yytoken token : tokens) {
            if(!token.getType().equals(Types_Tokens.ERROR)){
                value += token.toString() + "\n";
            }            
        }
        return value;
    }
    
    public String toStringErrores() {
        String value = "";
        for (Yytoken token : tokens) {
            if(token.getType().equals(Types_Tokens.ERROR)){
                value += token.toString() + "\n";
            }            
        }
        return value;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerAnalyzer(java.io.Reader in) {
      count = 0;
    tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        try{
        this.writeOutputFile();
    }catch(IOException ioe){
        ioe.printStackTrace();
    }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Yytoken token = new Yytoken(count, yytext(), Types_Tokens.ERROR);
    addToken(token, yyline);
    return token;
            }
          case 8: break;
          case 2: 
            { /*Ignore*/
            }
          case 9: break;
          case 3: 
            { Yytoken token = new Yytoken(count, yytext(), Types_Tokens.OPERADOR);
    addToken(token, yyline);
    return token;
            }
          case 10: break;
          case 4: 
            { Yytoken token = new Yytoken(count, yytext(), Types_Tokens.IDENTIFICADOR);
    addToken(token, yyline);
    return token;
            }
          case 11: break;
          case 5: 
            { Yytoken token = new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA);
    addToken(token, yyline);
    return token;
            }
          case 12: break;
          case 6: 
            { Yytoken token = new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING);
    addToken(token, yyline);
    return token;
            }
          case 13: break;
          case 7: 
            { Yytoken token = new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL);
    addToken(token, yyline);
    return token;
            }
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
