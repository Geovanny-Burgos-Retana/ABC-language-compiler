/* The following code was generated by JFlex 1.6.1 */

package analizador.lexico;

import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.*;
import java.io.Reader;

class Yytoken {
    
    private int id; //Identificador Ãºnico para cada TOKEN
    private String name; //Nombre del TOKEN
    private Types_Tokens type;  //Tipo del TOKEN (Identificador, Operador, Palabra Reservada, Literal)
    private ArrayList<Line> lines = new ArrayList<>();  //Arreglos de lineas y ocurrencias
    
    public Yytoken(int id, String name, Types_Tokens type) {
        this.id = id;
        this.name = name;
        this.type = type;
    }

    @Override
    public String toString() {
        String token = name + "\t" + "\t" + type + "\t" + "\t" + lines;
        return token;
    }

    /**
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(int id) {
        this.id = id;
    }
    
    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the type
     */
    public Types_Tokens getType() {
        return type;
    }

    /**
     * @param type the type to set
     */
    public void setType(Types_Tokens type) {
        this.type = type;
    }

    /**
     * @return the lines
     */
    public ArrayList<Line> getLines() {
        return lines;
    }

    /**
     * @param lines the lines to set
     */
    public void setLines(ArrayList<Line> lines) {
        this.lines = lines;        
    }
    
}

/********** Seccion de opciones y declaraciones de JFlex **********/

public class LexerAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\1\12\1\12\1\11\22\0\1\1\1\0\1\36"+
    "\1\37\4\0\1\2\1\4\1\3\1\53\1\50\1\33\1\31\1\7"+
    "\1\40\11\30\1\52\1\51\1\56\1\54\1\55\2\0\1\17\1\13"+
    "\1\21\1\41\1\16\1\42\1\26\1\22\1\24\2\34\1\15\1\45"+
    "\1\20\1\14\1\44\1\34\1\23\1\27\1\25\1\43\1\46\1\47"+
    "\3\34\6\0\4\34\1\35\25\34\1\5\1\32\1\6\7\0\1\12"+
    "\u1fa2\0\1\12\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\2\12\7\1\10\1\1\1\11\2\1\1\10\6\7"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1"+
    "\1\21\1\2\1\1\1\2\1\22\3\7\1\23\7\7"+
    "\1\24\1\25\4\7\1\1\1\10\2\0\1\26\1\27"+
    "\2\0\1\30\1\31\1\1\1\32\10\7\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\0\1\1\1\0\5\7"+
    "\1\41\3\7\1\42\4\7\1\1\1\10\1\43\1\0"+
    "\1\44\1\0\1\31\1\1\1\45\4\7\1\46\2\7"+
    "\1\2\1\0\4\7\1\47\1\7\1\42\1\50\1\51"+
    "\1\52\2\7\1\1\1\10\1\53\1\0\1\31\1\1"+
    "\11\7\1\54\1\7\1\55\2\7\1\1\1\10\1\1"+
    "\1\56\1\7\1\57\2\7\1\60\1\61\4\7\1\42"+
    "\1\1\1\10\1\1\4\7\1\42\1\7\1\1\1\10"+
    "\1\1\2\7\1\62\1\7\1\42\1\1\1\10\1\1"+
    "\1\63\2\7\1\1\1\10\1\1\1\64\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\10\2\1\1\0\367\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[917];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\57\0\274\0\353"+
    "\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\57"+
    "\0\57\0\u0553\0\u0582\0\57\0\u05b1\0\u05e0\0\u060f\0\57"+
    "\0\u063e\0\u066d\0\u069c\0\57\0\u06cb\0\u06fa\0\u0729\0\u06cb"+
    "\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u06cb"+
    "\0\u06cb\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb"+
    "\0\u09ea\0\57\0\57\0\u03ac\0\u0a19\0\u0a48\0\u0a77\0\u0aa6"+
    "\0\u06cb\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\57\0\57\0\57\0\57\0\57\0\57\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u063e\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96"+
    "\0\u0cda\0\u0dc5\0\u0df4\0\u0e23\0\u0cda\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\57\0\u0a48\0\u0fca"+
    "\0\u0ff9\0\u0cda\0\u1028\0\u1057\0\u1086\0\u10b5\0\u0cda\0\u10e4"+
    "\0\u1113\0\u0c7c\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u1171"+
    "\0\u122d\0\u1171\0\u1171\0\u1171\0\u1171\0\u125c\0\u128b\0\u12ba"+
    "\0\u12e9\0\u1318\0\u1318\0\57\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u14bf\0\u151d"+
    "\0\u14bf\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u14bf\0\u1637"+
    "\0\u14bf\0\u1666\0\u1695\0\u14bf\0\u14bf\0\u16c4\0\u16f3\0\u1722"+
    "\0\u1751\0\u16c4\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b"+
    "\0\u189a\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4"+
    "\0\u189a\0\u19e3\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u19e3\0\u1a9f"+
    "\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1ace\0\u1b8a\0\u1bb9\0\u1be8"+
    "\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60"+
    "\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8"+
    "\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050"+
    "\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8"+
    "\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\u2340"+
    "\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8"+
    "\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630"+
    "\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779\0\u27a8"+
    "\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920"+
    "\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98"+
    "\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u2c10"+
    "\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88"+
    "\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00"+
    "\0\u2f2f\0\u2f5e\0\u2f8d\0\u2fbc\0\u2feb\0\u301a\0\u3049\0\u3078"+
    "\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163\0\u3192\0\u31c1\0\u31f0"+
    "\0\u321f\0\u324e\0\u327d\0\u32ac\0\u32db\0\u330a\0\u3339\0\u3368"+
    "\0\u3397\0\u33c6\0\u33f5\0\u3424\0\u3453\0\u3482\0\u34b1\0\u34e0"+
    "\0\u350f\0\u353e\0\u356d\0\u359c\0\u35cb\0\u35fa\0\u3629\0\u3658"+
    "\0\u3687\0\u36b6\0\u36e5\0\u3714\0\u3743\0\u3772\0\u37a1\0\u37d0"+
    "\0\u37ff\0\u382e\0\u385d\0\u388c\0\u38bb\0\u38ea\0\u3919\0\u3948"+
    "\0\u3977\0\u39a6\0\u39d5\0\u3a04\0\u3a33\0\u3a62\0\u3a91\0\u3ac0"+
    "\0\u3aef\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda\0\u3c09\0\u3c38"+
    "\0\u3c67\0\u3c96\0\u3cc5\0\u3cf4\0\u3d23\0\u3d52\0\u3d81\0\u3db0"+
    "\0\u3ddf\0\u3e0e\0\u3e3d\0\u3e6c\0\u3e9b\0\u3eca\0\u3ef9\0\u3f28"+
    "\0\u3f57\0\u3f86\0\u3fb5\0\u3fe4\0\u4013\0\u4042\0\u4071\0\u40a0"+
    "\0\u40cf\0\u40fe\0\u412d\0\u415c\0\u418b\0\u41ba\0\u41e9\0\u4218"+
    "\0\u4247\0\u4276\0\u42a5\0\u42d4\0\u4303\0\u4332\0\u4361\0\u4390"+
    "\0\u43bf\0\u43ee\0\u441d\0\u444c\0\u447b\0\u44aa\0\u44d9\0\u4508"+
    "\0\u4537\0\u4566\0\u4595\0\u45c4\0\u45f3\0\u4622\0\u4651\0\u4680"+
    "\0\u46af\0\u46de\0\u470d\0\u473c\0\u476b\0\u479a\0\u47c9\0\u47f8"+
    "\0\u4827\0\u4856\0\u4885\0\u48b4\0\u48e3\0\u4912\0\u4941\0\u4970"+
    "\0\u499f\0\u49ce\0\u49fd\0\u4a2c\0\u4a5b\0\u4a8a\0\u4ab9\0\u4ae8"+
    "\0\u4b17\0\u4b46\0\u4b75\0\u4ba4\0\u4bd3\0\u4c02\0\u4c31\0\u4c60"+
    "\0\u4c8f\0\u4cbe\0\u4ced\0\u4d1c\0\u4d4b\0\u4d7a\0\u4da9\0\u4dd8"+
    "\0\u4e07\0\u4e36\0\u4e65\0\u4e94\0\u4ec3\0\u4ef2\0\u4f21\0\u4f50"+
    "\0\u4f7f\0\u4fae\0\u4fdd\0\u500c\0\u503b\0\u506a\0\u5099\0\u50c8"+
    "\0\u50f7\0\u5126\0\u5155\0\u5184\0\u51b3\0\u51e2\0\u5211\0\u5240"+
    "\0\u526f\0\u529e\0\u52cd\0\u52fc\0\u532b\0\u535a\0\u5389\0\u53b8"+
    "\0\u53e7\0\u5416\0\u5445\0\u5474\0\u54a3\0\u54d2\0\u5501\0\u5530"+
    "\0\u555f\0\u558e\0\u55bd\0\u55ec\0\u561b\0\u564a\0\u5679\0\u56a8"+
    "\0\u56d7\0\u5706\0\u5735\0\u5764\0\u5793\0\u57c2\0\u57f1\0\u5820"+
    "\0\u584f\0\u587e\0\u58ad\0\u58dc\0\u590b\0\u593a\0\u5969\0\u5998"+
    "\0\u59c7\0\u59f6\0\u5a25\0\u5a54\0\u5a83\0\u5ab2\0\u5ae1\0\u5b10"+
    "\0\u5b3f\0\u5b6e\0\u5b9d\0\u5bcc\0\u5bfb\0\u5c2a\0\u5c59\0\u5c88"+
    "\0\u5cb7\0\u5ce6\0\u5d15\0\u5d44\0\u5d73\0\u5da2\0\u5dd1\0\u5e00"+
    "\0\u5e2f\0\u5e5e\0\u5e8d\0\u5ebc\0\u5eeb\0\u5f1a\0\u5f49\0\u5f78"+
    "\0\u5fa7\0\u5fd6\0\u6005\0\u6034\0\u6063\0\u6092\0\u60c1\0\u60f0"+
    "\0\u611f\0\u614e\0\u617d\0\u61ac\0\u61db\0\u620a\0\u6239\0\u6268"+
    "\0\u6297\0\u62c6\0\u62f5\0\u6324\0\u6353\0\u6382\0\u63b1\0\u63e0"+
    "\0\u640f\0\u643e\0\u646d\0\u649c\0\u64cb\0\u64fa\0\u6529\0\u6558"+
    "\0\u6587\0\u65b6\0\u65e5\0\u6614\0\u6643\0\u6672\0\u66a1\0\u66d0"+
    "\0\u66ff\0\u672e\0\u675d\0\u678c\0\u67bb\0\u67ea\0\u6819\0\u6848"+
    "\0\u6877\0\u68a6\0\u68d5\0\u6904\0\u6933\0\u6962\0\u6991\0\u69c0"+
    "\0\u69ef\0\u6a1e\0\u6a4d\0\u6a7c\0\u6aab\0\u6ada\0\u6b09\0\u6b38"+
    "\0\u6b67\0\u6b96\0\u6bc5\0\u6bf4\0\u6c23\0\u6c52\0\u6c81\0\u6cb0"+
    "\0\u6cdf\0\u6d0e\0\u6d3d\0\u6d6c\0\u6d9b\0\u6dca\0\u6df9\0\u6e28"+
    "\0\u6e57\0\u6e86\0\u6eb5\0\u6ee4\0\u6f13\0\u6f42\0\u6f71\0\u6fa0"+
    "\0\u6fcf\0\u6ffe\0\u702d\0\u705c\0\u708b\0\u70ba\0\u70e9\0\u7118"+
    "\0\u7147\0\u7176\0\u71a5\0\u71d4\0\u7203\0\u71d4\0\u7232\0\u7261"+
    "\0\u7290\0\u72bf\0\u72ee\0\u731d\0\u734c\0\u737b\0\u73aa\0\u73d9"+
    "\0\u7408\0\u7437\0\u7466\0\u7495\0\u74c4\0\u74f3\0\u7522\0\u7551"+
    "\0\u7580\0\u75af\0\u75de\0\u760d\0\u763c\0\u766b\0\u769a\0\u76c9"+
    "\0\u76f8\0\u7727\0\u7756\0\u7785\0\u77b4\0\u77e3\0\u7812\0\u7841"+
    "\0\u7870\0\u789f\0\u78ce\0\u78fd\0\u792c\0\u795b\0\u798a\0\u79b9"+
    "\0\u79e8\0\u7a17\0\u7a46\0\u7a75\0\u7aa4\0\u7ad3\0\u7b02\0\u7b31"+
    "\0\u7b60\0\u7b8f\0\u7bbe\0\u7bed\0\u7c1c\0\u7c4b\0\u7c7a\0\u7ca9"+
    "\0\u7cd8\0\u7d07\0\u7d36\0\u7d65\0\u7d94\0\u7dc3\0\u7df2\0\u7e21"+
    "\0\u7e50\0\u7e7f\0\u7eae\0\u7edd\0\u7f0c\0\u7f3b\0\u7f6a\0\u7f99"+
    "\0\u7fc8\0\u7ff7\0\u8026\0\u8055\0\u8084\0\u80b3\0\u80e2\0\u8111"+
    "\0\u8140\0\u816f\0\u819e\0\u81cd\0\u81fc\0\u822b\0\u825a\0\u8289"+
    "\0\u82b8\0\u82e7\0\u8316\0\u8345\0\u8374\0\u83a3\0\u83d2\0\u8401"+
    "\0\u8430\0\u845f\0\u848e\0\u84bd\0\u84ec\0\u851b\0\u854a\0\u8579"+
    "\0\u85a8\0\u85d7\0\u8606\0\u8635\0\u8664\0\u8693\0\u86c2\0\u86f1"+
    "\0\u8720\0\u874f\0\u877e\0\u87ad\0\u87dc\0\u880b\0\u883a\0\u8869"+
    "\0\u8898\0\u88c7\0\u88f6\0\u8925\0\u8954\0\u8983\0\u89b2\0\u89e1"+
    "\0\u8a10\0\u8a3f\0\u8a6e\0\u8a9d\0\u8acc\0\u8afb\0\u8b2a\0\u8b59"+
    "\0\u8b88\0\u8bb7\0\u8be6\0\u8c15\0\u8c44\0\u8c73\0\u8ca2\0\u8cd1"+
    "\0\u8d00\0\u8d2f\0\u8d5e\0\u8d8d\0\u8dbc\0\u8deb\0\u8e1a\0\u8e49"+
    "\0\u8e78\0\u8ea7\0\u8ed6\0\u8f05\0\u8f34\0\u8f63\0\u8f92\0\u8fc1"+
    "\0\u8ff0\0\u901f\0\u904e\0\u907d\0\u90ac\0\u90db\0\u910a\0\u9139"+
    "\0\u9168\0\u9197\0\u91c6\0\u91f5\0\u9224\0\u9253\0\u9282\0\u92b1"+
    "\0\u92e0\0\u930f\0\u933e\0\u936d\0\u939c\0\u93cb\0\u93fa\0\u9429"+
    "\0\u9458\0\u9487\0\u94b6\0\u94e5\0\u9514\0\u9543\0\u9572\0\u95a1"+
    "\0\u95d0\0\u95ff\0\u962e\0\u965d\0\u968c\0\u96bb\0\u96ea\0\u9719"+
    "\0\u9748\0\u9777\0\u97a6\0\u97d5\0\u9804\0\u9833\0\u9862\0\u9891"+
    "\0\u98c0\0\u98ef\0\u991e\0\u994d\0\u997c\0\u99ab\0\u99da\0\u9a09"+
    "\0\u9a38\0\u9a67\0\u9a96\0\u9ac5\0\u9af4\0\u9b23\0\u9b52\0\u9b81"+
    "\0\u9bb0\0\u9bdf\0\u9c0e\0\u9c3d\0\u9c6c\0\u9c9b\0\u9cca\0\u9cf9"+
    "\0\u9d28\0\u9d57\0\u9d86\0\u9db5\0\u9de4\0\u9e13\0\u9e42\0\u9e71"+
    "\0\u9ea0\0\u9ecf\0\u9efe\0\u9f2d\0\u9f5c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[917];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\3\1\11\1\2\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\16\1\20\1\21\1\22\1\16\1\23\1\24"+
    "\1\25\1\2\1\26\2\16\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\16\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\62\0\1\47\127\0"+
    "\1\50\2\0\6\7\1\51\1\7\3\52\44\7\7\0"+
    "\1\53\44\0\1\54\12\0\1\3\61\0\1\55\1\56"+
    "\1\55\1\57\12\55\3\0\2\55\2\0\10\55\22\0"+
    "\16\55\3\0\2\55\2\0\2\55\1\60\5\55\22\0"+
    "\1\55\1\61\14\55\3\0\2\55\2\0\10\55\22\0"+
    "\2\55\1\62\2\55\1\63\10\55\3\0\2\55\2\0"+
    "\10\55\22\0\16\55\3\0\2\55\2\0\10\55\22\0"+
    "\1\55\1\64\5\55\1\65\6\55\3\0\2\55\2\0"+
    "\10\55\22\0\3\55\1\66\12\55\3\0\2\55\2\0"+
    "\10\55\22\0\5\55\1\67\10\55\3\0\2\55\2\0"+
    "\2\55\1\70\5\55\22\0\1\55\1\71\5\55\1\72"+
    "\1\73\5\55\3\0\2\55\2\0\10\55\22\0\7\55"+
    "\1\74\2\55\1\75\3\55\3\0\2\55\2\0\10\55"+
    "\22\0\15\76\1\77\1\100\2\0\2\76\2\0\1\77"+
    "\7\76\37\0\1\101\7\0\1\101\51\0\1\102\20\0"+
    "\1\103\2\0\10\104\3\105\23\104\1\106\20\104\30\0"+
    "\1\107\7\0\1\107\31\0\15\76\1\110\1\100\2\0"+
    "\2\76\2\0\1\110\7\76\22\0\1\55\1\111\14\55"+
    "\3\0\2\55\2\0\10\55\22\0\1\55\1\112\2\55"+
    "\1\113\11\55\3\0\2\55\2\0\3\55\1\114\4\55"+
    "\22\0\5\55\1\115\10\55\3\0\2\55\2\0\10\55"+
    "\22\0\10\55\1\116\5\55\3\0\2\55\2\0\10\55"+
    "\22\0\4\55\1\117\11\55\3\0\2\55\2\0\10\55"+
    "\22\0\7\55\1\120\1\121\5\55\3\0\2\55\2\0"+
    "\10\55\63\0\1\122\55\0\1\123\1\124\56\0\1\125"+
    "\56\0\1\126\1\127\1\0\3\47\1\130\1\131\3\47"+
    "\3\132\44\47\6\133\1\51\1\133\3\0\44\133\6\52"+
    "\1\3\50\52\10\53\3\0\44\53\13\0\16\134\3\0"+
    "\2\134\2\0\10\134\22\0\1\134\1\135\14\134\3\0"+
    "\2\134\2\0\10\134\22\0\13\134\1\136\2\134\3\0"+
    "\2\134\2\0\10\134\22\0\5\134\1\137\10\134\3\0"+
    "\2\134\2\0\10\134\22\0\14\134\1\140\1\134\3\0"+
    "\2\134\2\0\10\134\22\0\16\134\3\0\2\134\2\0"+
    "\1\134\1\141\6\134\22\0\5\134\1\142\10\134\3\0"+
    "\2\134\2\0\10\134\22\0\4\134\1\143\11\134\3\0"+
    "\2\134\2\0\10\134\22\0\4\134\1\144\11\134\3\0"+
    "\2\134\2\0\10\134\22\0\12\134\1\145\3\134\3\0"+
    "\2\134\2\0\10\134\22\0\3\134\1\146\12\134\3\0"+
    "\2\134\2\0\10\134\22\0\16\134\3\0\2\134\2\0"+
    "\3\134\1\147\4\134\22\0\1\134\1\150\14\134\3\0"+
    "\2\134\2\0\10\134\22\0\10\134\1\151\5\134\3\0"+
    "\2\134\2\0\10\134\22\0\16\152\3\0\2\152\2\0"+
    "\10\152\22\0\15\152\1\153\1\100\2\0\2\152\2\0"+
    "\1\153\7\152\37\0\1\154\7\0\1\154\34\0\1\155"+
    "\11\0\1\101\1\0\1\155\2\0\1\155\2\0\1\101"+
    "\16\0\36\105\1\156\20\105\10\157\3\0\23\157\1\106"+
    "\20\157\30\0\1\160\7\0\1\160\31\0\15\152\1\161"+
    "\1\100\2\0\2\152\2\0\1\161\7\152\22\0\10\134"+
    "\1\162\5\134\3\0\2\134\2\0\10\134\22\0\2\134"+
    "\1\163\13\134\3\0\2\134\2\0\10\134\22\0\5\134"+
    "\1\164\10\134\3\0\2\134\2\0\10\134\22\0\12\134"+
    "\1\165\3\134\3\0\2\134\2\0\10\134\22\0\1\134"+
    "\1\166\14\134\3\0\2\134\2\0\10\134\22\0\10\134"+
    "\1\167\5\134\3\0\2\134\2\0\10\134\22\0\11\134"+
    "\1\170\4\134\3\0\2\134\2\0\10\134\22\0\11\134"+
    "\1\171\4\134\3\0\2\134\2\0\10\134\7\0\3\131"+
    "\1\130\1\172\3\131\3\0\47\131\1\130\4\131\3\0"+
    "\44\131\3\132\1\173\1\0\52\132\13\0\16\174\3\0"+
    "\2\174\2\0\10\174\22\0\2\174\1\175\13\174\3\0"+
    "\2\174\2\0\10\174\22\0\11\174\1\176\4\174\3\0"+
    "\2\174\2\0\10\174\22\0\13\174\1\177\2\174\3\0"+
    "\2\174\2\0\10\174\22\0\3\174\1\200\12\174\3\0"+
    "\2\174\2\0\10\174\22\0\14\174\1\201\1\174\3\0"+
    "\2\174\2\0\10\174\22\0\10\174\1\202\5\174\3\0"+
    "\2\174\2\0\10\174\22\0\2\174\1\202\13\174\3\0"+
    "\2\174\2\0\1\174\1\203\6\174\22\0\5\174\1\204"+
    "\10\174\3\0\2\174\2\0\10\174\22\0\3\174\1\205"+
    "\12\174\3\0\2\174\2\0\10\174\22\0\10\174\1\206"+
    "\5\174\3\0\2\174\2\0\10\174\22\0\11\174\1\207"+
    "\4\174\3\0\2\174\2\0\10\174\22\0\16\210\3\0"+
    "\2\210\2\0\10\210\22\0\15\210\1\211\1\100\2\0"+
    "\2\210\2\0\1\211\7\210\25\0\1\155\11\0\1\154"+
    "\1\0\1\155\2\0\1\155\2\0\1\154\46\0\1\212"+
    "\2\0\1\213\4\0\1\212\12\0\1\213\33\0\1\214"+
    "\7\0\1\214\31\0\15\210\1\215\1\100\2\0\2\210"+
    "\2\0\1\215\7\210\22\0\14\174\1\216\1\174\3\0"+
    "\2\174\2\0\10\174\22\0\6\174\1\217\7\174\3\0"+
    "\2\174\2\0\10\174\22\0\11\174\1\220\4\174\3\0"+
    "\2\174\2\0\10\174\22\0\6\174\1\221\4\174\1\222"+
    "\2\174\3\0\2\174\2\0\10\174\22\0\2\174\1\223"+
    "\13\174\3\0\2\174\2\0\10\174\22\0\12\174\1\224"+
    "\3\174\3\0\2\174\2\0\10\174\13\0\1\3\65\0"+
    "\16\225\3\0\2\225\2\0\10\225\22\0\3\225\1\226"+
    "\12\225\3\0\2\225\2\0\10\225\22\0\5\225\1\227"+
    "\10\225\3\0\2\225\2\0\10\225\22\0\11\225\1\230"+
    "\4\225\3\0\2\225\2\0\10\225\22\0\12\225\1\231"+
    "\3\225\3\0\2\225\2\0\10\225\22\0\12\225\1\232"+
    "\3\225\3\0\2\225\2\0\10\225\22\0\5\225\1\233"+
    "\10\225\3\0\2\225\2\0\10\225\22\0\16\234\3\0"+
    "\2\234\2\0\10\234\22\0\15\234\1\235\1\100\2\0"+
    "\2\234\2\0\1\235\7\234\37\0\1\212\7\0\1\212"+
    "\31\0\15\234\1\236\1\100\2\0\2\234\2\0\1\236"+
    "\7\234\22\0\3\225\1\237\12\225\3\0\2\225\2\0"+
    "\10\225\22\0\12\225\1\240\3\225\3\0\2\225\2\0"+
    "\10\225\22\0\2\225\1\241\13\225\3\0\2\225\2\0"+
    "\10\225\22\0\3\225\1\242\12\225\3\0\2\225\2\0"+
    "\10\225\22\0\10\225\1\243\5\225\3\0\2\225\2\0"+
    "\10\225\22\0\3\225\1\244\12\225\3\0\2\225\2\0"+
    "\10\225\22\0\3\225\1\245\12\225\3\0\2\225\2\0"+
    "\10\225\22\0\16\246\3\0\2\246\2\0\10\246\22\0"+
    "\4\246\1\247\11\246\3\0\2\246\2\0\10\246\22\0"+
    "\5\246\1\250\10\246\3\0\2\246\2\0\10\246\22\0"+
    "\11\246\1\251\4\246\3\0\2\246\2\0\10\246\22\0"+
    "\13\246\1\252\2\246\3\0\2\246\2\0\10\246\22\0"+
    "\16\253\3\0\2\253\2\0\10\253\22\0\15\253\1\254"+
    "\1\100\2\0\2\253\2\0\1\254\7\253\22\0\15\253"+
    "\1\255\1\100\2\0\2\253\2\0\1\255\7\253\22\0"+
    "\11\246\1\256\4\246\3\0\2\246\2\0\10\246\22\0"+
    "\16\246\3\0\2\246\2\0\1\246\1\257\6\246\22\0"+
    "\4\246\1\260\11\246\3\0\2\246\2\0\10\246\22\0"+
    "\16\261\3\0\2\261\2\0\10\261\22\0\5\261\1\262"+
    "\10\261\3\0\2\261\2\0\10\261\22\0\12\261\1\262"+
    "\3\261\3\0\2\261\2\0\10\261\22\0\5\261\1\263"+
    "\10\261\3\0\2\261\2\0\10\261\22\0\16\264\3\0"+
    "\2\264\2\0\10\264\22\0\15\264\1\265\1\100\2\0"+
    "\2\264\2\0\1\265\7\264\22\0\15\264\1\266\1\100"+
    "\2\0\2\264\2\0\1\266\7\264\22\0\1\261\1\267"+
    "\14\261\3\0\2\261\2\0\10\261\22\0\16\261\3\0"+
    "\2\261\2\0\3\261\1\270\4\261\22\0\16\261\3\0"+
    "\2\261\2\0\5\261\1\271\2\261\22\0\16\272\3\0"+
    "\2\272\2\0\10\272\22\0\12\272\1\273\3\272\3\0"+
    "\2\272\2\0\10\272\22\0\16\274\3\0\2\274\2\0"+
    "\10\274\22\0\15\274\1\275\1\100\2\0\2\274\2\0"+
    "\1\275\7\274\22\0\15\274\1\276\1\100\2\0\2\274"+
    "\2\0\1\276\7\274\22\0\5\272\1\277\10\272\3\0"+
    "\2\272\2\0\10\272\22\0\10\272\1\300\5\272\3\0"+
    "\2\272\2\0\10\272\22\0\16\301\3\0\2\301\2\0"+
    "\10\301\22\0\16\302\3\0\2\302\2\0\10\302\22\0"+
    "\15\302\1\303\1\100\2\0\2\302\2\0\1\303\7\302"+
    "\22\0\15\302\1\304\1\100\2\0\2\302\2\0\1\304"+
    "\7\302\22\0\3\301\1\305\12\301\3\0\2\301\2\0"+
    "\10\301\22\0\16\306\3\0\2\306\2\0\10\306\22\0"+
    "\16\307\3\0\2\307\2\0\10\307\22\0\15\307\1\310"+
    "\1\100\2\0\2\307\2\0\1\310\7\307\22\0\15\307"+
    "\1\311\1\100\2\0\2\307\2\0\1\311\7\307\22\0"+
    "\16\312\3\0\2\312\2\0\10\312\22\0\16\313\3\0"+
    "\2\313\2\0\10\313\22\0\15\313\1\314\1\100\2\0"+
    "\2\313\2\0\1\314\7\313\22\0\15\313\1\315\1\100"+
    "\2\0\2\313\2\0\1\315\7\313\22\0\16\316\3\0"+
    "\2\316\2\0\10\316\22\0\16\317\3\0\2\317\2\0"+
    "\10\317\22\0\15\317\1\320\1\100\2\0\2\317\2\0"+
    "\1\320\7\317\22\0\15\317\1\321\1\100\2\0\2\317"+
    "\2\0\1\321\7\317\22\0\16\322\3\0\2\322\2\0"+
    "\10\322\22\0\16\323\3\0\2\323\2\0\10\323\22\0"+
    "\15\323\1\324\1\100\2\0\2\323\2\0\1\324\7\323"+
    "\22\0\15\323\1\325\1\100\2\0\2\323\2\0\1\325"+
    "\7\323\22\0\16\326\3\0\2\326\2\0\10\326\22\0"+
    "\16\327\3\0\2\327\2\0\10\327\22\0\15\327\1\330"+
    "\1\100\2\0\2\327\2\0\1\330\7\327\22\0\15\327"+
    "\1\331\1\100\2\0\2\327\2\0\1\331\7\327\22\0"+
    "\16\332\3\0\2\332\2\0\10\332\22\0\16\333\3\0"+
    "\2\333\2\0\10\333\22\0\15\333\1\334\1\100\2\0"+
    "\2\333\2\0\1\334\7\333\22\0\15\333\1\335\1\100"+
    "\2\0\2\333\2\0\1\335\7\333\22\0\16\336\3\0"+
    "\2\336\2\0\10\336\22\0\16\337\3\0\2\337\2\0"+
    "\10\337\22\0\15\337\1\340\1\100\2\0\2\337\2\0"+
    "\1\340\7\337\22\0\15\337\1\341\1\100\2\0\2\337"+
    "\2\0\1\341\7\337\22\0\16\342\3\0\2\342\2\0"+
    "\10\342\22\0\16\343\3\0\2\343\2\0\10\343\22\0"+
    "\15\343\1\344\1\100\2\0\2\343\2\0\1\344\7\343"+
    "\22\0\15\343\1\345\1\100\2\0\2\343\2\0\1\345"+
    "\7\343\22\0\16\346\3\0\2\346\2\0\10\346\22\0"+
    "\16\347\3\0\2\347\2\0\10\347\22\0\15\347\1\350"+
    "\1\100\2\0\2\347\2\0\1\350\7\347\22\0\15\347"+
    "\1\351\1\100\2\0\2\347\2\0\1\351\7\347\22\0"+
    "\16\352\3\0\2\352\2\0\10\352\22\0\16\353\3\0"+
    "\2\353\2\0\10\353\22\0\15\353\1\354\1\100\2\0"+
    "\2\353\2\0\1\354\7\353\22\0\15\353\1\355\1\100"+
    "\2\0\2\353\2\0\1\355\7\353\22\0\16\356\3\0"+
    "\2\356\2\0\10\356\22\0\16\357\3\0\2\357\2\0"+
    "\10\357\22\0\15\357\1\360\1\100\2\0\2\357\2\0"+
    "\1\360\7\357\22\0\15\357\1\361\1\100\2\0\2\357"+
    "\2\0\1\361\7\357\22\0\16\362\3\0\2\362\2\0"+
    "\10\362\22\0\16\363\3\0\2\363\2\0\10\363\22\0"+
    "\15\363\1\364\1\100\2\0\2\363\2\0\1\364\7\363"+
    "\22\0\15\363\1\365\1\100\2\0\2\363\2\0\1\365"+
    "\7\363\22\0\16\366\3\0\2\366\2\0\10\366\22\0"+
    "\16\367\3\0\2\367\2\0\10\367\22\0\15\367\1\370"+
    "\1\100\2\0\2\367\2\0\1\370\7\367\22\0\15\367"+
    "\1\371\1\100\2\0\2\367\2\0\1\371\7\367\22\0"+
    "\16\372\3\0\2\372\2\0\10\372\22\0\16\373\3\0"+
    "\2\373\2\0\10\373\22\0\15\373\1\374\1\100\2\0"+
    "\2\373\2\0\1\374\7\373\22\0\15\373\1\375\1\100"+
    "\2\0\2\373\2\0\1\375\7\373\22\0\16\376\3\0"+
    "\2\376\2\0\10\376\22\0\16\377\3\0\2\377\2\0"+
    "\10\377\22\0\15\377\1\u0100\1\100\2\0\2\377\2\0"+
    "\1\u0100\7\377\22\0\15\377\1\u0101\1\100\2\0\2\377"+
    "\2\0\1\u0101\7\377\22\0\16\u0102\3\0\2\u0102\2\0"+
    "\10\u0102\22\0\16\u0103\3\0\2\u0103\2\0\10\u0103\22\0"+
    "\15\u0103\1\u0104\1\100\2\0\2\u0103\2\0\1\u0104\7\u0103"+
    "\22\0\15\u0103\1\u0105\1\100\2\0\2\u0103\2\0\1\u0105"+
    "\7\u0103\22\0\16\u0106\3\0\2\u0106\2\0\10\u0106\22\0"+
    "\16\u0107\3\0\2\u0107\2\0\10\u0107\22\0\15\u0107\1\u0108"+
    "\1\100\2\0\2\u0107\2\0\1\u0108\7\u0107\22\0\15\u0107"+
    "\1\u0109\1\100\2\0\2\u0107\2\0\1\u0109\7\u0107\22\0"+
    "\16\u010a\3\0\2\u010a\2\0\10\u010a\22\0\16\u010b\3\0"+
    "\2\u010b\2\0\10\u010b\22\0\15\u010b\1\u010c\1\100\2\0"+
    "\2\u010b\2\0\1\u010c\7\u010b\22\0\15\u010b\1\u010d\1\100"+
    "\2\0\2\u010b\2\0\1\u010d\7\u010b\22\0\16\u010e\3\0"+
    "\2\u010e\2\0\10\u010e\22\0\16\u010f\3\0\2\u010f\2\0"+
    "\10\u010f\22\0\15\u010f\1\u0110\1\100\2\0\2\u010f\2\0"+
    "\1\u0110\7\u010f\22\0\15\u010f\1\u0111\1\100\2\0\2\u010f"+
    "\2\0\1\u0111\7\u010f\22\0\16\u0112\3\0\2\u0112\2\0"+
    "\10\u0112\22\0\16\u0113\3\0\2\u0113\2\0\10\u0113\22\0"+
    "\15\u0113\1\u0114\1\100\2\0\2\u0113\2\0\1\u0114\7\u0113"+
    "\22\0\15\u0113\1\u0115\1\100\2\0\2\u0113\2\0\1\u0115"+
    "\7\u0113\22\0\16\u0116\3\0\2\u0116\2\0\10\u0116\22\0"+
    "\16\u0117\3\0\2\u0117\2\0\10\u0117\22\0\15\u0117\1\u0118"+
    "\1\100\2\0\2\u0117\2\0\1\u0118\7\u0117\22\0\15\u0117"+
    "\1\u0119\1\100\2\0\2\u0117\2\0\1\u0119\7\u0117\22\0"+
    "\16\u011a\3\0\2\u011a\2\0\10\u011a\22\0\16\u011b\3\0"+
    "\2\u011b\2\0\10\u011b\22\0\15\u011b\1\u011c\1\100\2\0"+
    "\2\u011b\2\0\1\u011c\7\u011b\22\0\15\u011b\1\u011d\1\100"+
    "\2\0\2\u011b\2\0\1\u011d\7\u011b\22\0\16\u011e\3\0"+
    "\2\u011e\2\0\10\u011e\22\0\16\u011f\3\0\2\u011f\2\0"+
    "\10\u011f\22\0\15\u011f\1\u0120\1\100\2\0\2\u011f\2\0"+
    "\1\u0120\7\u011f\22\0\15\u011f\1\u0121\1\100\2\0\2\u011f"+
    "\2\0\1\u0121\7\u011f\22\0\16\u0122\3\0\2\u0122\2\0"+
    "\10\u0122\22\0\16\u0123\3\0\2\u0123\2\0\10\u0123\22\0"+
    "\15\u0123\1\u0124\1\100\2\0\2\u0123\2\0\1\u0124\7\u0123"+
    "\22\0\15\u0123\1\u0125\1\100\2\0\2\u0123\2\0\1\u0125"+
    "\7\u0123\22\0\16\u0126\3\0\2\u0126\2\0\10\u0126\22\0"+
    "\16\u0127\3\0\2\u0127\2\0\10\u0127\22\0\15\u0127\1\u0128"+
    "\1\100\2\0\2\u0127\2\0\1\u0128\7\u0127\22\0\15\u0127"+
    "\1\u0129\1\100\2\0\2\u0127\2\0\1\u0129\7\u0127\22\0"+
    "\16\u012a\3\0\2\u012a\2\0\10\u012a\22\0\16\u012b\3\0"+
    "\2\u012b\2\0\10\u012b\22\0\15\u012b\1\u012c\1\100\2\0"+
    "\2\u012b\2\0\1\u012c\7\u012b\22\0\15\u012b\1\u012d\1\100"+
    "\2\0\2\u012b\2\0\1\u012d\7\u012b\22\0\16\u012e\3\0"+
    "\2\u012e\2\0\10\u012e\22\0\16\u012f\3\0\2\u012f\2\0"+
    "\10\u012f\22\0\15\u012f\1\u0130\1\100\2\0\2\u012f\2\0"+
    "\1\u0130\7\u012f\22\0\15\u012f\1\u0131\1\100\2\0\2\u012f"+
    "\2\0\1\u0131\7\u012f\22\0\16\u0132\3\0\2\u0132\2\0"+
    "\10\u0132\22\0\16\u0133\3\0\2\u0133\2\0\10\u0133\22\0"+
    "\15\u0133\1\u0134\1\100\2\0\2\u0133\2\0\1\u0134\7\u0133"+
    "\22\0\15\u0133\1\u0135\1\100\2\0\2\u0133\2\0\1\u0135"+
    "\7\u0133\22\0\16\u0136\3\0\2\u0136\2\0\10\u0136\22\0"+
    "\16\u0137\3\0\2\u0137\2\0\10\u0137\22\0\15\u0137\1\u0138"+
    "\1\100\2\0\2\u0137\2\0\1\u0138\7\u0137\22\0\15\u0137"+
    "\1\u0139\1\100\2\0\2\u0137\2\0\1\u0139\7\u0137\22\0"+
    "\16\u013a\3\0\2\u013a\2\0\10\u013a\22\0\16\u013b\3\0"+
    "\2\u013b\2\0\10\u013b\22\0\15\u013b\1\u013c\1\100\2\0"+
    "\2\u013b\2\0\1\u013c\7\u013b\22\0\15\u013b\1\u013d\1\100"+
    "\2\0\2\u013b\2\0\1\u013d\7\u013b\22\0\16\u013e\3\0"+
    "\2\u013e\2\0\10\u013e\22\0\16\u013f\3\0\2\u013f\2\0"+
    "\10\u013f\22\0\15\u013f\1\u0140\1\100\2\0\2\u013f\2\0"+
    "\1\u0140\7\u013f\22\0\15\u013f\1\u0141\1\100\2\0\2\u013f"+
    "\2\0\1\u0141\7\u013f\22\0\16\u0142\3\0\2\u0142\2\0"+
    "\10\u0142\22\0\16\u0143\3\0\2\u0143\2\0\10\u0143\22\0"+
    "\15\u0143\1\u0144\1\100\2\0\2\u0143\2\0\1\u0144\7\u0143"+
    "\22\0\15\u0143\1\u0145\1\100\2\0\2\u0143\2\0\1\u0145"+
    "\7\u0143\22\0\16\u0146\3\0\2\u0146\2\0\10\u0146\22\0"+
    "\16\u0147\3\0\2\u0147\2\0\10\u0147\22\0\15\u0147\1\u0148"+
    "\1\100\2\0\2\u0147\2\0\1\u0148\7\u0147\22\0\15\u0147"+
    "\1\u0149\1\100\2\0\2\u0147\2\0\1\u0149\7\u0147\22\0"+
    "\16\u014a\3\0\2\u014a\2\0\10\u014a\22\0\16\u014b\3\0"+
    "\2\u014b\2\0\10\u014b\22\0\15\u014b\1\u014c\1\100\2\0"+
    "\2\u014b\2\0\1\u014c\7\u014b\22\0\15\u014b\1\u014d\1\100"+
    "\2\0\2\u014b\2\0\1\u014d\7\u014b\22\0\16\u014e\3\0"+
    "\2\u014e\2\0\10\u014e\22\0\16\u014f\3\0\2\u014f\2\0"+
    "\10\u014f\22\0\15\u014f\1\u0150\1\100\2\0\2\u014f\2\0"+
    "\1\u0150\7\u014f\22\0\15\u014f\1\u0151\1\100\2\0\2\u014f"+
    "\2\0\1\u0151\7\u014f\22\0\16\u0152\3\0\2\u0152\2\0"+
    "\10\u0152\22\0\16\u0153\3\0\2\u0153\2\0\10\u0153\22\0"+
    "\15\u0153\1\u0154\1\100\2\0\2\u0153\2\0\1\u0154\7\u0153"+
    "\22\0\15\u0153\1\u0155\1\100\2\0\2\u0153\2\0\1\u0155"+
    "\7\u0153\22\0\16\u0156\3\0\2\u0156\2\0\10\u0156\22\0"+
    "\16\u0157\3\0\2\u0157\2\0\10\u0157\22\0\15\u0157\1\u0158"+
    "\1\100\2\0\2\u0157\2\0\1\u0158\7\u0157\22\0\15\u0157"+
    "\1\u0159\1\100\2\0\2\u0157\2\0\1\u0159\7\u0157\22\0"+
    "\16\u015a\3\0\2\u015a\2\0\10\u015a\22\0\16\u015b\3\0"+
    "\2\u015b\2\0\10\u015b\22\0\15\u015b\1\u015c\1\100\2\0"+
    "\2\u015b\2\0\1\u015c\7\u015b\22\0\15\u015b\1\u015d\1\100"+
    "\2\0\2\u015b\2\0\1\u015d\7\u015b\22\0\16\u015e\3\0"+
    "\2\u015e\2\0\10\u015e\22\0\16\u015f\3\0\2\u015f\2\0"+
    "\10\u015f\22\0\15\u015f\1\u0160\1\100\2\0\2\u015f\2\0"+
    "\1\u0160\7\u015f\22\0\15\u015f\1\u0161\1\100\2\0\2\u015f"+
    "\2\0\1\u0161\7\u015f\22\0\16\u0162\3\0\2\u0162\2\0"+
    "\10\u0162\22\0\16\u0163\3\0\2\u0163\2\0\10\u0163\22\0"+
    "\15\u0163\1\u0164\1\100\2\0\2\u0163\2\0\1\u0164\7\u0163"+
    "\22\0\15\u0163\1\u0165\1\100\2\0\2\u0163\2\0\1\u0165"+
    "\7\u0163\22\0\16\u0166\3\0\2\u0166\2\0\10\u0166\22\0"+
    "\16\u0167\3\0\2\u0167\2\0\10\u0167\22\0\15\u0167\1\u0168"+
    "\1\100\2\0\2\u0167\2\0\1\u0168\7\u0167\22\0\15\u0167"+
    "\1\u0169\1\100\2\0\2\u0167\2\0\1\u0169\7\u0167\22\0"+
    "\16\u016a\3\0\2\u016a\2\0\10\u016a\22\0\16\u016b\3\0"+
    "\2\u016b\2\0\10\u016b\22\0\15\u016b\1\u016c\1\100\2\0"+
    "\2\u016b\2\0\1\u016c\7\u016b\22\0\15\u016b\1\u016d\1\100"+
    "\2\0\2\u016b\2\0\1\u016d\7\u016b\22\0\16\u016e\3\0"+
    "\2\u016e\2\0\10\u016e\22\0\16\u016f\3\0\2\u016f\2\0"+
    "\10\u016f\22\0\15\u016f\1\u0170\1\100\2\0\2\u016f\2\0"+
    "\1\u0170\7\u016f\22\0\15\u016f\1\u0171\1\100\2\0\2\u016f"+
    "\2\0\1\u0171\7\u016f\22\0\16\u0172\3\0\2\u0172\2\0"+
    "\10\u0172\22\0\16\u0173\3\0\2\u0173\2\0\10\u0173\22\0"+
    "\15\u0173\1\u0174\1\100\2\0\2\u0173\2\0\1\u0174\7\u0173"+
    "\22\0\15\u0173\1\u0175\1\100\2\0\2\u0173\2\0\1\u0175"+
    "\7\u0173\22\0\16\u0176\3\0\2\u0176\2\0\10\u0176\22\0"+
    "\16\u0177\3\0\2\u0177\2\0\10\u0177\22\0\15\u0177\1\u0178"+
    "\1\100\2\0\2\u0177\2\0\1\u0178\7\u0177\22\0\15\u0177"+
    "\1\u0179\1\100\2\0\2\u0177\2\0\1\u0179\7\u0177\22\0"+
    "\16\u017a\3\0\2\u017a\2\0\10\u017a\22\0\16\u017b\3\0"+
    "\2\u017b\2\0\10\u017b\22\0\15\u017b\1\u017c\1\100\2\0"+
    "\2\u017b\2\0\1\u017c\7\u017b\22\0\15\u017b\1\u017d\1\100"+
    "\2\0\2\u017b\2\0\1\u017d\7\u017b\22\0\16\u017e\3\0"+
    "\2\u017e\2\0\10\u017e\22\0\16\u017f\3\0\2\u017f\2\0"+
    "\10\u017f\22\0\15\u017f\1\u0180\1\100\2\0\2\u017f\2\0"+
    "\1\u0180\7\u017f\22\0\15\u017f\1\u0181\1\100\2\0\2\u017f"+
    "\2\0\1\u0181\7\u017f\22\0\16\u0182\3\0\2\u0182\2\0"+
    "\10\u0182\22\0\16\u0183\3\0\2\u0183\2\0\10\u0183\22\0"+
    "\15\u0183\1\u0184\1\100\2\0\2\u0183\2\0\1\u0184\7\u0183"+
    "\22\0\15\u0183\1\u0185\1\100\2\0\2\u0183\2\0\1\u0185"+
    "\7\u0183\22\0\16\u0186\3\0\2\u0186\2\0\10\u0186\22\0"+
    "\16\u0187\3\0\2\u0187\2\0\10\u0187\22\0\15\u0187\1\u0188"+
    "\1\100\2\0\2\u0187\2\0\1\u0188\7\u0187\22\0\15\u0187"+
    "\1\u0189\1\100\2\0\2\u0187\2\0\1\u0189\7\u0187\22\0"+
    "\16\u018a\3\0\2\u018a\2\0\10\u018a\22\0\16\u018b\3\0"+
    "\2\u018b\2\0\10\u018b\22\0\15\u018b\1\u018c\1\100\2\0"+
    "\2\u018b\2\0\1\u018c\7\u018b\22\0\15\u018b\1\u018d\1\100"+
    "\2\0\2\u018b\2\0\1\u018d\7\u018b\22\0\16\u018e\3\0"+
    "\2\u018e\2\0\10\u018e\22\0\16\u018f\3\0\2\u018f\2\0"+
    "\10\u018f\22\0\15\u018f\1\u0190\1\100\2\0\2\u018f\2\0"+
    "\1\u0190\7\u018f\22\0\15\u018f\1\u0191\1\100\2\0\2\u018f"+
    "\2\0\1\u0191\7\u018f\22\0\16\u0192\3\0\2\u0192\2\0"+
    "\10\u0192\22\0\16\u0193\3\0\2\u0193\2\0\10\u0193\22\0"+
    "\15\u0193\1\u0194\1\100\2\0\2\u0193\2\0\1\u0194\7\u0193"+
    "\22\0\15\u0193\1\u0195\1\100\2\0\2\u0193\2\0\1\u0195"+
    "\7\u0193\22\0\16\u0196\3\0\2\u0196\2\0\10\u0196\22\0"+
    "\16\u0197\3\0\2\u0197\2\0\10\u0197\22\0\15\u0197\1\u0198"+
    "\1\100\2\0\2\u0197\2\0\1\u0198\7\u0197\22\0\15\u0197"+
    "\1\u0199\1\100\2\0\2\u0197\2\0\1\u0199\7\u0197\22\0"+
    "\16\u019a\3\0\2\u019a\2\0\10\u019a\22\0\16\u019b\3\0"+
    "\2\u019b\2\0\10\u019b\22\0\15\u019b\1\u019c\1\100\2\0"+
    "\2\u019b\2\0\1\u019c\7\u019b\22\0\15\u019b\1\u019d\1\100"+
    "\2\0\2\u019b\2\0\1\u019d\7\u019b\22\0\16\u019e\3\0"+
    "\2\u019e\2\0\10\u019e\22\0\16\u019f\3\0\2\u019f\2\0"+
    "\10\u019f\22\0\15\u019f\1\u01a0\1\100\2\0\2\u019f\2\0"+
    "\1\u01a0\7\u019f\22\0\15\u019f\1\u01a1\1\100\2\0\2\u019f"+
    "\2\0\1\u01a1\7\u019f\22\0\16\u01a2\3\0\2\u01a2\2\0"+
    "\10\u01a2\22\0\16\u01a3\3\0\2\u01a3\2\0\10\u01a3\22\0"+
    "\15\u01a3\1\u01a4\1\100\2\0\2\u01a3\2\0\1\u01a4\7\u01a3"+
    "\22\0\15\u01a3\1\u01a5\1\100\2\0\2\u01a3\2\0\1\u01a5"+
    "\7\u01a3\22\0\16\u01a6\3\0\2\u01a6\2\0\10\u01a6\22\0"+
    "\16\u01a7\3\0\2\u01a7\2\0\10\u01a7\22\0\15\u01a7\1\u01a8"+
    "\1\100\2\0\2\u01a7\2\0\1\u01a8\7\u01a7\22\0\15\u01a7"+
    "\1\u01a9\1\100\2\0\2\u01a7\2\0\1\u01a9\7\u01a7\22\0"+
    "\16\u01aa\3\0\2\u01aa\2\0\10\u01aa\22\0\16\u01ab\3\0"+
    "\2\u01ab\2\0\10\u01ab\22\0\15\u01ab\1\u01ac\1\100\2\0"+
    "\2\u01ab\2\0\1\u01ac\7\u01ab\22\0\15\u01ab\1\u01ad\1\100"+
    "\2\0\2\u01ab\2\0\1\u01ad\7\u01ab\22\0\16\u01ae\3\0"+
    "\2\u01ae\2\0\10\u01ae\22\0\16\u01af\3\0\2\u01af\2\0"+
    "\10\u01af\22\0\15\u01af\1\u01b0\1\100\2\0\2\u01af\2\0"+
    "\1\u01b0\7\u01af\22\0\15\u01af\1\u01b1\1\100\2\0\2\u01af"+
    "\2\0\1\u01b1\7\u01af\22\0\16\u01b2\3\0\2\u01b2\2\0"+
    "\10\u01b2\22\0\16\u01b3\3\0\2\u01b3\2\0\10\u01b3\22\0"+
    "\15\u01b3\1\u01b4\1\100\2\0\2\u01b3\2\0\1\u01b4\7\u01b3"+
    "\22\0\15\u01b3\1\u01b5\1\100\2\0\2\u01b3\2\0\1\u01b5"+
    "\7\u01b3\22\0\16\u01b6\3\0\2\u01b6\2\0\10\u01b6\22\0"+
    "\16\u01b7\3\0\2\u01b7\2\0\10\u01b7\22\0\15\u01b7\1\u01b8"+
    "\1\100\2\0\2\u01b7\2\0\1\u01b8\7\u01b7\22\0\15\u01b7"+
    "\1\u01b9\1\100\2\0\2\u01b7\2\0\1\u01b9\7\u01b7\22\0"+
    "\16\u01ba\3\0\2\u01ba\2\0\10\u01ba\22\0\16\u01bb\3\0"+
    "\2\u01bb\2\0\10\u01bb\22\0\15\u01bb\1\u01bc\1\100\2\0"+
    "\2\u01bb\2\0\1\u01bc\7\u01bb\22\0\15\u01bb\1\u01bd\1\100"+
    "\2\0\2\u01bb\2\0\1\u01bd\7\u01bb\22\0\16\u01be\3\0"+
    "\2\u01be\2\0\10\u01be\22\0\16\u01bf\3\0\2\u01bf\2\0"+
    "\10\u01bf\22\0\15\u01bf\1\u01c0\1\100\2\0\2\u01bf\2\0"+
    "\1\u01c0\7\u01bf\22\0\15\u01bf\1\u01c1\1\100\2\0\2\u01bf"+
    "\2\0\1\u01c1\7\u01bf\22\0\16\u01c2\3\0\2\u01c2\2\0"+
    "\10\u01c2\22\0\16\u01c3\3\0\2\u01c3\2\0\10\u01c3\22\0"+
    "\15\u01c3\1\u01c4\1\100\2\0\2\u01c3\2\0\1\u01c4\7\u01c3"+
    "\22\0\15\u01c3\1\u01c5\1\100\2\0\2\u01c3\2\0\1\u01c5"+
    "\7\u01c3\22\0\16\u01c6\3\0\2\u01c6\2\0\10\u01c6\22\0"+
    "\16\u01c7\3\0\2\u01c7\2\0\10\u01c7\22\0\15\u01c7\1\u01c8"+
    "\1\100\2\0\2\u01c7\2\0\1\u01c8\7\u01c7\22\0\15\u01c7"+
    "\1\u01c9\1\100\2\0\2\u01c7\2\0\1\u01c9\7\u01c7\22\0"+
    "\16\u01ca\3\0\2\u01ca\2\0\10\u01ca\22\0\16\u01cb\3\0"+
    "\2\u01cb\2\0\10\u01cb\22\0\15\u01cb\1\u01cc\1\100\2\0"+
    "\2\u01cb\2\0\1\u01cc\7\u01cb\22\0\15\u01cb\1\u01cd\1\100"+
    "\2\0\2\u01cb\2\0\1\u01cd\7\u01cb\22\0\16\u01ce\3\0"+
    "\2\u01ce\2\0\10\u01ce\22\0\16\u01cf\3\0\2\u01cf\2\0"+
    "\10\u01cf\22\0\15\u01cf\1\u01d0\1\100\2\0\2\u01cf\2\0"+
    "\1\u01d0\7\u01cf\22\0\15\u01cf\1\u01d1\1\100\2\0\2\u01cf"+
    "\2\0\1\u01d1\7\u01cf\22\0\16\u01d2\3\0\2\u01d2\2\0"+
    "\10\u01d2\22\0\16\u01d3\3\0\2\u01d3\2\0\10\u01d3\22\0"+
    "\15\u01d3\1\u01d4\1\100\2\0\2\u01d3\2\0\1\u01d4\7\u01d3"+
    "\22\0\15\u01d3\1\u01d5\1\100\2\0\2\u01d3\2\0\1\u01d5"+
    "\7\u01d3\22\0\16\u01d6\3\0\2\u01d6\2\0\10\u01d6\22\0"+
    "\16\u01d7\3\0\2\u01d7\2\0\10\u01d7\22\0\15\u01d7\1\u01d8"+
    "\1\100\2\0\2\u01d7\2\0\1\u01d8\7\u01d7\22\0\15\u01d7"+
    "\1\u01d9\1\100\2\0\2\u01d7\2\0\1\u01d9\7\u01d7\22\0"+
    "\16\u01da\3\0\2\u01da\2\0\10\u01da\22\0\16\u01db\3\0"+
    "\2\u01db\2\0\10\u01db\22\0\15\u01db\1\u01dc\1\100\2\0"+
    "\2\u01db\2\0\1\u01dc\7\u01db\22\0\15\u01db\1\u01dd\1\100"+
    "\2\0\2\u01db\2\0\1\u01dd\7\u01db\22\0\16\u01de\3\0"+
    "\2\u01de\2\0\10\u01de\22\0\16\u01df\3\0\2\u01df\2\0"+
    "\10\u01df\22\0\15\u01df\1\u01e0\1\100\2\0\2\u01df\2\0"+
    "\1\u01e0\7\u01df\22\0\15\u01df\1\u01e1\1\100\2\0\2\u01df"+
    "\2\0\1\u01e1\7\u01df\22\0\16\u01e2\3\0\2\u01e2\2\0"+
    "\10\u01e2\22\0\16\u01e3\3\0\2\u01e3\2\0\10\u01e3\22\0"+
    "\15\u01e3\1\u01e4\1\100\2\0\2\u01e3\2\0\1\u01e4\7\u01e3"+
    "\22\0\15\u01e3\1\u01e5\1\100\2\0\2\u01e3\2\0\1\u01e5"+
    "\7\u01e3\22\0\16\u01e6\3\0\2\u01e6\2\0\10\u01e6\22\0"+
    "\16\u01e7\3\0\2\u01e7\2\0\10\u01e7\22\0\15\u01e7\1\u01e8"+
    "\1\100\2\0\2\u01e7\2\0\1\u01e8\7\u01e7\22\0\15\u01e7"+
    "\1\u01e9\1\100\2\0\2\u01e7\2\0\1\u01e9\7\u01e7\22\0"+
    "\16\u01ea\3\0\2\u01ea\2\0\10\u01ea\22\0\16\u01eb\3\0"+
    "\2\u01eb\2\0\10\u01eb\22\0\15\u01eb\1\u01ec\1\100\2\0"+
    "\2\u01eb\2\0\1\u01ec\7\u01eb\22\0\15\u01eb\1\u01ed\1\100"+
    "\2\0\2\u01eb\2\0\1\u01ed\7\u01eb\22\0\16\u01ee\3\0"+
    "\2\u01ee\2\0\10\u01ee\22\0\16\u01ef\3\0\2\u01ef\2\0"+
    "\10\u01ef\22\0\15\u01ef\1\u01f0\1\100\2\0\2\u01ef\2\0"+
    "\1\u01f0\7\u01ef\22\0\15\u01ef\1\u01f1\1\100\2\0\2\u01ef"+
    "\2\0\1\u01f1\7\u01ef\22\0\16\u01f2\3\0\2\u01f2\2\0"+
    "\10\u01f2\22\0\16\u01f3\3\0\2\u01f3\2\0\10\u01f3\22\0"+
    "\15\u01f3\1\u01f4\1\100\2\0\2\u01f3\2\0\1\u01f4\7\u01f3"+
    "\22\0\15\u01f3\1\u01f5\1\100\2\0\2\u01f3\2\0\1\u01f5"+
    "\7\u01f3\22\0\16\u01f6\3\0\2\u01f6\2\0\10\u01f6\22\0"+
    "\16\u01f7\3\0\2\u01f7\2\0\10\u01f7\22\0\15\u01f7\1\u01f8"+
    "\1\100\2\0\2\u01f7\2\0\1\u01f8\7\u01f7\22\0\15\u01f7"+
    "\1\u01f9\1\100\2\0\2\u01f7\2\0\1\u01f9\7\u01f7\22\0"+
    "\16\u01fa\3\0\2\u01fa\2\0\10\u01fa\22\0\16\u01fb\3\0"+
    "\2\u01fb\2\0\10\u01fb\22\0\15\u01fb\1\u01fc\1\100\2\0"+
    "\2\u01fb\2\0\1\u01fc\7\u01fb\22\0\15\u01fb\1\u01fd\1\100"+
    "\2\0\2\u01fb\2\0\1\u01fd\7\u01fb\22\0\16\u01fe\3\0"+
    "\2\u01fe\2\0\10\u01fe\22\0\16\u01ff\3\0\2\u01ff\2\0"+
    "\10\u01ff\22\0\15\u01ff\1\u0200\1\100\2\0\2\u01ff\2\0"+
    "\1\u0200\7\u01ff\22\0\15\u01ff\1\u0201\1\100\2\0\2\u01ff"+
    "\2\0\1\u0201\7\u01ff\22\0\16\u0202\3\0\2\u0202\2\0"+
    "\10\u0202\22\0\16\u0203\3\0\2\u0203\2\0\10\u0203\22\0"+
    "\15\u0203\1\u0204\1\100\2\0\2\u0203\2\0\1\u0204\7\u0203"+
    "\22\0\15\u0203\1\u0205\1\100\2\0\2\u0203\2\0\1\u0205"+
    "\7\u0203\22\0\16\u0206\3\0\2\u0206\2\0\10\u0206\22\0"+
    "\16\u0207\3\0\2\u0207\2\0\10\u0207\22\0\15\u0207\1\u0208"+
    "\1\100\2\0\2\u0207\2\0\1\u0208\7\u0207\22\0\15\u0207"+
    "\1\u0209\1\100\2\0\2\u0207\2\0\1\u0209\7\u0207\22\0"+
    "\16\u020a\3\0\2\u020a\2\0\10\u020a\22\0\16\u020b\3\0"+
    "\2\u020b\2\0\10\u020b\22\0\15\u020b\1\u020c\1\100\2\0"+
    "\2\u020b\2\0\1\u020c\7\u020b\22\0\15\u020b\1\u020d\1\100"+
    "\2\0\2\u020b\2\0\1\u020d\7\u020b\22\0\16\u020e\3\0"+
    "\2\u020e\2\0\10\u020e\22\0\16\u020f\3\0\2\u020f\2\0"+
    "\10\u020f\22\0\15\u020f\1\u0210\1\100\2\0\2\u020f\2\0"+
    "\1\u0210\7\u020f\22\0\15\u020f\1\u0211\1\100\2\0\2\u020f"+
    "\2\0\1\u0211\7\u020f\22\0\16\u0212\3\0\2\u0212\2\0"+
    "\10\u0212\22\0\16\u0213\3\0\2\u0213\2\0\10\u0213\22\0"+
    "\15\u0213\1\u0214\1\100\2\0\2\u0213\2\0\1\u0214\7\u0213"+
    "\22\0\15\u0213\1\u0215\1\100\2\0\2\u0213\2\0\1\u0215"+
    "\7\u0213\22\0\16\u0216\3\0\2\u0216\2\0\10\u0216\22\0"+
    "\16\u0217\3\0\2\u0217\2\0\10\u0217\22\0\15\u0217\1\u0218"+
    "\1\100\2\0\2\u0217\2\0\1\u0218\7\u0217\22\0\15\u0217"+
    "\1\u0219\1\100\2\0\2\u0217\2\0\1\u0219\7\u0217\22\0"+
    "\16\u021a\3\0\2\u021a\2\0\10\u021a\22\0\16\u021b\3\0"+
    "\2\u021b\2\0\10\u021b\22\0\15\u021b\1\u021c\1\100\2\0"+
    "\2\u021b\2\0\1\u021c\7\u021b\22\0\15\u021b\1\u021d\1\100"+
    "\2\0\2\u021b\2\0\1\u021d\7\u021b\22\0\16\u021e\3\0"+
    "\2\u021e\2\0\10\u021e\22\0\16\u021f\3\0\2\u021f\2\0"+
    "\10\u021f\22\0\15\u021f\1\u0220\1\100\2\0\2\u021f\2\0"+
    "\1\u0220\7\u021f\22\0\15\u021f\1\u0221\1\100\2\0\2\u021f"+
    "\2\0\1\u0221\7\u021f\22\0\16\u0222\3\0\2\u0222\2\0"+
    "\10\u0222\22\0\16\u0223\3\0\2\u0223\2\0\10\u0223\22\0"+
    "\15\u0223\1\u0224\1\100\2\0\2\u0223\2\0\1\u0224\7\u0223"+
    "\22\0\15\u0223\1\u0225\1\100\2\0\2\u0223\2\0\1\u0225"+
    "\7\u0223\22\0\16\u0226\3\0\2\u0226\2\0\10\u0226\22\0"+
    "\16\u0227\3\0\2\u0227\2\0\10\u0227\22\0\15\u0227\1\u0228"+
    "\1\100\2\0\2\u0227\2\0\1\u0228\7\u0227\22\0\15\u0227"+
    "\1\u0229\1\100\2\0\2\u0227\2\0\1\u0229\7\u0227\22\0"+
    "\16\u022a\3\0\2\u022a\2\0\10\u022a\22\0\16\u022b\3\0"+
    "\2\u022b\2\0\10\u022b\22\0\15\u022b\1\u022c\1\100\2\0"+
    "\2\u022b\2\0\1\u022c\7\u022b\22\0\15\u022b\1\u022d\1\100"+
    "\2\0\2\u022b\2\0\1\u022d\7\u022b\22\0\16\u022e\3\0"+
    "\2\u022e\2\0\10\u022e\22\0\16\u022f\3\0\2\u022f\2\0"+
    "\10\u022f\22\0\15\u022f\1\u0230\1\100\2\0\2\u022f\2\0"+
    "\1\u0230\7\u022f\22\0\15\u022f\1\u0231\1\100\2\0\2\u022f"+
    "\2\0\1\u0231\7\u022f\22\0\16\u0232\3\0\2\u0232\2\0"+
    "\10\u0232\22\0\16\u0233\3\0\2\u0233\2\0\10\u0233\22\0"+
    "\15\u0233\1\u0234\1\100\2\0\2\u0233\2\0\1\u0234\7\u0233"+
    "\22\0\15\u0233\1\u0235\1\100\2\0\2\u0233\2\0\1\u0235"+
    "\7\u0233\22\0\16\u0236\3\0\2\u0236\2\0\10\u0236\22\0"+
    "\16\u0237\3\0\2\u0237\2\0\10\u0237\22\0\15\u0237\1\u0238"+
    "\1\100\2\0\2\u0237\2\0\1\u0238\7\u0237\22\0\15\u0237"+
    "\1\u0239\1\100\2\0\2\u0237\2\0\1\u0239\7\u0237\22\0"+
    "\16\u023a\3\0\2\u023a\2\0\10\u023a\22\0\16\u023b\3\0"+
    "\2\u023b\2\0\10\u023b\22\0\15\u023b\1\u023c\1\100\2\0"+
    "\2\u023b\2\0\1\u023c\7\u023b\22\0\15\u023b\1\u023d\1\100"+
    "\2\0\2\u023b\2\0\1\u023d\7\u023b\22\0\16\u023e\3\0"+
    "\2\u023e\2\0\10\u023e\22\0\16\u023f\3\0\2\u023f\2\0"+
    "\10\u023f\22\0\15\u023f\1\u0240\1\100\2\0\2\u023f\2\0"+
    "\1\u0240\7\u023f\22\0\15\u023f\1\u0241\1\100\2\0\2\u023f"+
    "\2\0\1\u0241\7\u023f\22\0\16\u0242\3\0\2\u0242\2\0"+
    "\10\u0242\22\0\16\u0243\3\0\2\u0243\2\0\10\u0243\22\0"+
    "\15\u0243\1\u0244\1\100\2\0\2\u0243\2\0\1\u0244\7\u0243"+
    "\22\0\15\u0243\1\u0245\1\100\2\0\2\u0243\2\0\1\u0245"+
    "\7\u0243\22\0\16\u0246\3\0\2\u0246\2\0\10\u0246\22\0"+
    "\16\u0247\3\0\2\u0247\2\0\10\u0247\22\0\15\u0247\1\u0248"+
    "\1\100\2\0\2\u0247\2\0\1\u0248\7\u0247\22\0\15\u0247"+
    "\1\u0249\1\100\2\0\2\u0247\2\0\1\u0249\7\u0247\22\0"+
    "\16\u024a\3\0\2\u024a\2\0\10\u024a\22\0\16\u024b\3\0"+
    "\2\u024b\2\0\10\u024b\22\0\15\u024b\1\u024c\1\100\2\0"+
    "\2\u024b\2\0\1\u024c\7\u024b\22\0\15\u024b\1\u024d\1\100"+
    "\2\0\2\u024b\2\0\1\u024d\7\u024b\22\0\16\u024e\3\0"+
    "\2\u024e\2\0\10\u024e\22\0\16\u024f\3\0\2\u024f\2\0"+
    "\10\u024f\22\0\15\u024f\1\u0250\1\100\2\0\2\u024f\2\0"+
    "\1\u0250\7\u024f\22\0\15\u024f\1\u0251\1\100\2\0\2\u024f"+
    "\2\0\1\u0251\7\u024f\22\0\16\u0252\3\0\2\u0252\2\0"+
    "\10\u0252\22\0\16\u0253\3\0\2\u0253\2\0\10\u0253\22\0"+
    "\15\u0253\1\u0254\1\100\2\0\2\u0253\2\0\1\u0254\7\u0253"+
    "\22\0\15\u0253\1\u0255\1\100\2\0\2\u0253\2\0\1\u0255"+
    "\7\u0253\22\0\16\u0256\3\0\2\u0256\2\0\10\u0256\22\0"+
    "\16\u0257\3\0\2\u0257\2\0\10\u0257\22\0\15\u0257\1\u0258"+
    "\1\100\2\0\2\u0257\2\0\1\u0258\7\u0257\22\0\15\u0257"+
    "\1\u0259\1\100\2\0\2\u0257\2\0\1\u0259\7\u0257\22\0"+
    "\16\u025a\3\0\2\u025a\2\0\10\u025a\22\0\16\u025b\3\0"+
    "\2\u025b\2\0\10\u025b\22\0\15\u025b\1\u025c\1\100\2\0"+
    "\2\u025b\2\0\1\u025c\7\u025b\22\0\15\u025b\1\u025d\1\100"+
    "\2\0\2\u025b\2\0\1\u025d\7\u025b\22\0\16\u025e\3\0"+
    "\2\u025e\2\0\10\u025e\22\0\16\u025f\3\0\2\u025f\2\0"+
    "\10\u025f\22\0\15\u025f\1\u0260\1\100\2\0\2\u025f\2\0"+
    "\1\u0260\7\u025f\22\0\15\u025f\1\u0261\1\100\2\0\2\u025f"+
    "\2\0\1\u0261\7\u025f\22\0\16\u0262\3\0\2\u0262\2\0"+
    "\10\u0262\22\0\16\u0263\3\0\2\u0263\2\0\10\u0263\22\0"+
    "\15\u0263\1\u0264\1\100\2\0\2\u0263\2\0\1\u0264\7\u0263"+
    "\22\0\15\u0263\1\u0265\1\100\2\0\2\u0263\2\0\1\u0265"+
    "\7\u0263\22\0\16\u0266\3\0\2\u0266\2\0\10\u0266\22\0"+
    "\16\u0267\3\0\2\u0267\2\0\10\u0267\22\0\15\u0267\1\u0268"+
    "\1\100\2\0\2\u0267\2\0\1\u0268\7\u0267\22\0\15\u0267"+
    "\1\u0269\1\100\2\0\2\u0267\2\0\1\u0269\7\u0267\22\0"+
    "\16\u026a\3\0\2\u026a\2\0\10\u026a\22\0\16\u026b\3\0"+
    "\2\u026b\2\0\10\u026b\22\0\15\u026b\1\u026c\1\100\2\0"+
    "\2\u026b\2\0\1\u026c\7\u026b\22\0\15\u026b\1\u026d\1\100"+
    "\2\0\2\u026b\2\0\1\u026d\7\u026b\22\0\16\u026e\3\0"+
    "\2\u026e\2\0\10\u026e\22\0\16\u026f\3\0\2\u026f\2\0"+
    "\10\u026f\22\0\15\u026f\1\u0270\1\100\2\0\2\u026f\2\0"+
    "\1\u0270\7\u026f\22\0\15\u026f\1\u0271\1\100\2\0\2\u026f"+
    "\2\0\1\u0271\7\u026f\22\0\16\u0272\3\0\2\u0272\2\0"+
    "\10\u0272\22\0\16\u0273\3\0\2\u0273\2\0\10\u0273\22\0"+
    "\15\u0273\1\u0274\1\100\2\0\2\u0273\2\0\1\u0274\7\u0273"+
    "\22\0\15\u0273\1\u0275\1\100\2\0\2\u0273\2\0\1\u0275"+
    "\7\u0273\22\0\16\u0276\3\0\2\u0276\2\0\10\u0276\22\0"+
    "\16\u0277\3\0\2\u0277\2\0\10\u0277\22\0\15\u0277\1\u0278"+
    "\1\100\2\0\2\u0277\2\0\1\u0278\7\u0277\22\0\15\u0277"+
    "\1\u0279\1\100\2\0\2\u0277\2\0\1\u0279\7\u0277\22\0"+
    "\16\u027a\3\0\2\u027a\2\0\10\u027a\22\0\16\u027b\3\0"+
    "\2\u027b\2\0\10\u027b\22\0\15\u027b\1\u027c\1\100\2\0"+
    "\2\u027b\2\0\1\u027c\7\u027b\22\0\15\u027b\1\u027d\1\100"+
    "\2\0\2\u027b\2\0\1\u027d\7\u027b\22\0\16\u027e\3\0"+
    "\2\u027e\2\0\10\u027e\22\0\16\u027f\3\0\2\u027f\2\0"+
    "\10\u027f\22\0\15\u027f\1\u0280\1\100\2\0\2\u027f\2\0"+
    "\1\u0280\7\u027f\22\0\15\u027f\1\u0281\1\100\2\0\2\u027f"+
    "\2\0\1\u0281\7\u027f\22\0\16\u0282\3\0\2\u0282\2\0"+
    "\10\u0282\22\0\16\u0283\3\0\2\u0283\2\0\10\u0283\22\0"+
    "\15\u0283\1\u0284\1\100\2\0\2\u0283\2\0\1\u0284\7\u0283"+
    "\22\0\15\u0283\1\u0285\1\100\2\0\2\u0283\2\0\1\u0285"+
    "\7\u0283\22\0\16\u0286\3\0\2\u0286\2\0\10\u0286\22\0"+
    "\16\u0287\3\0\2\u0287\2\0\10\u0287\22\0\15\u0287\1\u0288"+
    "\1\100\2\0\2\u0287\2\0\1\u0288\7\u0287\22\0\15\u0287"+
    "\1\u0289\1\100\2\0\2\u0287\2\0\1\u0289\7\u0287\22\0"+
    "\16\u028a\3\0\2\u028a\2\0\10\u028a\22\0\16\u028b\3\0"+
    "\2\u028b\2\0\10\u028b\22\0\15\u028b\1\u028c\1\100\2\0"+
    "\2\u028b\2\0\1\u028c\7\u028b\22\0\15\u028b\1\u028d\1\100"+
    "\2\0\2\u028b\2\0\1\u028d\7\u028b\22\0\16\u028e\3\0"+
    "\2\u028e\2\0\10\u028e\22\0\16\u028f\3\0\2\u028f\2\0"+
    "\10\u028f\22\0\15\u028f\1\u0290\1\100\2\0\2\u028f\2\0"+
    "\1\u0290\7\u028f\22\0\15\u028f\1\u0291\1\100\2\0\2\u028f"+
    "\2\0\1\u0291\7\u028f\22\0\16\u0292\3\0\2\u0292\2\0"+
    "\10\u0292\22\0\16\u0293\3\0\2\u0293\2\0\10\u0293\22\0"+
    "\15\u0293\1\u0294\1\100\2\0\2\u0293\2\0\1\u0294\7\u0293"+
    "\22\0\15\u0293\1\u0295\1\100\2\0\2\u0293\2\0\1\u0295"+
    "\7\u0293\22\0\16\u0296\3\0\2\u0296\2\0\10\u0296\22\0"+
    "\16\u0297\3\0\2\u0297\2\0\10\u0297\22\0\15\u0297\1\u0298"+
    "\1\100\2\0\2\u0297\2\0\1\u0298\7\u0297\22\0\15\u0297"+
    "\1\u0299\1\100\2\0\2\u0297\2\0\1\u0299\7\u0297\22\0"+
    "\16\u029a\3\0\2\u029a\2\0\10\u029a\22\0\16\2\3\0"+
    "\2\2\2\0\10\2\22\0\15\2\1\u029b\1\100\2\0"+
    "\2\2\2\0\1\u029b\7\2\22\0\15\2\1\u029c\1\100"+
    "\2\0\2\2\2\0\1\u029c\7\2\22\0\16\u029d\3\0"+
    "\2\u029d\2\0\10\u029d\37\0\1\u029b\1\100\6\0\1\u029b"+
    "\46\0\1\u029e\1\100\6\0\1\u029e\31\0\16\u029f\3\0"+
    "\2\u029f\2\0\10\u029f\22\0\16\u02a0\3\0\2\u02a0\2\0"+
    "\10\u02a0\22\0\16\u02a1\3\0\2\u02a1\2\0\10\u02a1\22\0"+
    "\16\u02a2\3\0\2\u02a2\2\0\10\u02a2\22\0\16\u02a3\3\0"+
    "\2\u02a3\2\0\10\u02a3\22\0\16\u02a4\3\0\2\u02a4\2\0"+
    "\10\u02a4\22\0\16\u02a5\3\0\2\u02a5\2\0\10\u02a5\22\0"+
    "\16\u02a6\3\0\2\u02a6\2\0\10\u02a6\22\0\16\u02a7\3\0"+
    "\2\u02a7\2\0\10\u02a7\22\0\16\u02a8\3\0\2\u02a8\2\0"+
    "\10\u02a8\22\0\16\u02a9\3\0\2\u02a9\2\0\10\u02a9\22\0"+
    "\16\u02aa\3\0\2\u02aa\2\0\10\u02aa\22\0\16\u02ab\3\0"+
    "\2\u02ab\2\0\10\u02ab\22\0\16\u02ac\3\0\2\u02ac\2\0"+
    "\10\u02ac\22\0\16\u02ad\3\0\2\u02ad\2\0\10\u02ad\22\0"+
    "\16\u02ae\3\0\2\u02ae\2\0\10\u02ae\22\0\16\u02af\3\0"+
    "\2\u02af\2\0\10\u02af\22\0\16\u02b0\3\0\2\u02b0\2\0"+
    "\10\u02b0\22\0\16\u02b1\3\0\2\u02b1\2\0\10\u02b1\22\0"+
    "\16\u02b2\3\0\2\u02b2\2\0\10\u02b2\22\0\16\u02b3\3\0"+
    "\2\u02b3\2\0\10\u02b3\22\0\16\u02b4\3\0\2\u02b4\2\0"+
    "\10\u02b4\22\0\16\u02b5\3\0\2\u02b5\2\0\10\u02b5\22\0"+
    "\16\u02b6\3\0\2\u02b6\2\0\10\u02b6\22\0\16\u02b7\3\0"+
    "\2\u02b7\2\0\10\u02b7\22\0\16\u02b8\3\0\2\u02b8\2\0"+
    "\10\u02b8\22\0\16\u02b9\3\0\2\u02b9\2\0\10\u02b9\22\0"+
    "\16\u02ba\3\0\2\u02ba\2\0\10\u02ba\22\0\16\u02bb\3\0"+
    "\2\u02bb\2\0\10\u02bb\22\0\16\u02bc\3\0\2\u02bc\2\0"+
    "\10\u02bc\22\0\16\u02bd\3\0\2\u02bd\2\0\10\u02bd\22\0"+
    "\16\u02be\3\0\2\u02be\2\0\10\u02be\22\0\16\u02bf\3\0"+
    "\2\u02bf\2\0\10\u02bf\22\0\16\u02c0\3\0\2\u02c0\2\0"+
    "\10\u02c0\22\0\16\u02c1\3\0\2\u02c1\2\0\10\u02c1\22\0"+
    "\16\u02c2\3\0\2\u02c2\2\0\10\u02c2\22\0\16\u02c3\3\0"+
    "\2\u02c3\2\0\10\u02c3\22\0\16\u02c4\3\0\2\u02c4\2\0"+
    "\10\u02c4\22\0\16\u02c5\3\0\2\u02c5\2\0\10\u02c5\22\0"+
    "\16\u02c6\3\0\2\u02c6\2\0\10\u02c6\22\0\16\u02c7\3\0"+
    "\2\u02c7\2\0\10\u02c7\22\0\16\u02c8\3\0\2\u02c8\2\0"+
    "\10\u02c8\22\0\16\u02c9\3\0\2\u02c9\2\0\10\u02c9\22\0"+
    "\16\u02ca\3\0\2\u02ca\2\0\10\u02ca\22\0\16\u02cb\3\0"+
    "\2\u02cb\2\0\10\u02cb\22\0\16\u02cc\3\0\2\u02cc\2\0"+
    "\10\u02cc\22\0\16\u02cd\3\0\2\u02cd\2\0\10\u02cd\22\0"+
    "\16\u02ce\3\0\2\u02ce\2\0\10\u02ce\22\0\16\u02cf\3\0"+
    "\2\u02cf\2\0\10\u02cf\22\0\16\u02d0\3\0\2\u02d0\2\0"+
    "\10\u02d0\22\0\16\u02d1\3\0\2\u02d1\2\0\10\u02d1\22\0"+
    "\16\u02d2\3\0\2\u02d2\2\0\10\u02d2\22\0\16\u02d3\3\0"+
    "\2\u02d3\2\0\10\u02d3\22\0\16\u02d4\3\0\2\u02d4\2\0"+
    "\10\u02d4\22\0\16\u02d5\3\0\2\u02d5\2\0\10\u02d5\22\0"+
    "\16\u02d6\3\0\2\u02d6\2\0\10\u02d6\22\0\16\u02d7\3\0"+
    "\2\u02d7\2\0\10\u02d7\22\0\16\u02d8\3\0\2\u02d8\2\0"+
    "\10\u02d8\22\0\16\u02d9\3\0\2\u02d9\2\0\10\u02d9\22\0"+
    "\16\u02da\3\0\2\u02da\2\0\10\u02da\22\0\16\u02db\3\0"+
    "\2\u02db\2\0\10\u02db\22\0\16\u02dc\3\0\2\u02dc\2\0"+
    "\10\u02dc\22\0\16\u02dd\3\0\2\u02dd\2\0\10\u02dd\22\0"+
    "\16\u02de\3\0\2\u02de\2\0\10\u02de\22\0\16\u02df\3\0"+
    "\2\u02df\2\0\10\u02df\22\0\16\u02e0\3\0\2\u02e0\2\0"+
    "\10\u02e0\22\0\16\u02e1\3\0\2\u02e1\2\0\10\u02e1\22\0"+
    "\16\u02e2\3\0\2\u02e2\2\0\10\u02e2\22\0\16\u02e3\3\0"+
    "\2\u02e3\2\0\10\u02e3\22\0\16\u02e4\3\0\2\u02e4\2\0"+
    "\10\u02e4\22\0\16\u02e5\3\0\2\u02e5\2\0\10\u02e5\22\0"+
    "\16\u02e6\3\0\2\u02e6\2\0\10\u02e6\22\0\16\u02e7\3\0"+
    "\2\u02e7\2\0\10\u02e7\22\0\16\u02e8\3\0\2\u02e8\2\0"+
    "\10\u02e8\22\0\16\u02e9\3\0\2\u02e9\2\0\10\u02e9\22\0"+
    "\16\u02ea\3\0\2\u02ea\2\0\10\u02ea\22\0\16\u02eb\3\0"+
    "\2\u02eb\2\0\10\u02eb\22\0\16\u02ec\3\0\2\u02ec\2\0"+
    "\10\u02ec\22\0\16\u02ed\3\0\2\u02ed\2\0\10\u02ed\22\0"+
    "\16\u02ee\3\0\2\u02ee\2\0\10\u02ee\22\0\16\u02ef\3\0"+
    "\2\u02ef\2\0\10\u02ef\22\0\16\u02f0\3\0\2\u02f0\2\0"+
    "\10\u02f0\22\0\16\u02f1\3\0\2\u02f1\2\0\10\u02f1\22\0"+
    "\16\u02f2\3\0\2\u02f2\2\0\10\u02f2\22\0\16\u02f3\3\0"+
    "\2\u02f3\2\0\10\u02f3\22\0\16\u02f4\3\0\2\u02f4\2\0"+
    "\10\u02f4\22\0\16\u02f5\3\0\2\u02f5\2\0\10\u02f5\22\0"+
    "\16\u02f6\3\0\2\u02f6\2\0\10\u02f6\22\0\16\u02f7\3\0"+
    "\2\u02f7\2\0\10\u02f7\22\0\16\u02f8\3\0\2\u02f8\2\0"+
    "\10\u02f8\22\0\16\u02f9\3\0\2\u02f9\2\0\10\u02f9\22\0"+
    "\16\u02fa\3\0\2\u02fa\2\0\10\u02fa\22\0\16\u02fb\3\0"+
    "\2\u02fb\2\0\10\u02fb\22\0\16\u02fc\3\0\2\u02fc\2\0"+
    "\10\u02fc\22\0\16\u02fd\3\0\2\u02fd\2\0\10\u02fd\22\0"+
    "\16\u02fe\3\0\2\u02fe\2\0\10\u02fe\22\0\16\u02ff\3\0"+
    "\2\u02ff\2\0\10\u02ff\22\0\16\u0300\3\0\2\u0300\2\0"+
    "\10\u0300\22\0\16\u0301\3\0\2\u0301\2\0\10\u0301\22\0"+
    "\16\u0302\3\0\2\u0302\2\0\10\u0302\22\0\16\u0303\3\0"+
    "\2\u0303\2\0\10\u0303\22\0\16\u0304\3\0\2\u0304\2\0"+
    "\10\u0304\22\0\16\u0305\3\0\2\u0305\2\0\10\u0305\22\0"+
    "\16\u0306\3\0\2\u0306\2\0\10\u0306\22\0\16\u0307\3\0"+
    "\2\u0307\2\0\10\u0307\22\0\16\u0308\3\0\2\u0308\2\0"+
    "\10\u0308\22\0\16\u0309\3\0\2\u0309\2\0\10\u0309\22\0"+
    "\16\u030a\3\0\2\u030a\2\0\10\u030a\22\0\16\u030b\3\0"+
    "\2\u030b\2\0\10\u030b\22\0\16\u030c\3\0\2\u030c\2\0"+
    "\10\u030c\22\0\16\u030d\3\0\2\u030d\2\0\10\u030d\22\0"+
    "\16\u030e\3\0\2\u030e\2\0\10\u030e\22\0\16\u030f\3\0"+
    "\2\u030f\2\0\10\u030f\22\0\16\u0310\3\0\2\u0310\2\0"+
    "\10\u0310\22\0\16\u0311\3\0\2\u0311\2\0\10\u0311\22\0"+
    "\16\u0312\3\0\2\u0312\2\0\10\u0312\22\0\16\u0313\3\0"+
    "\2\u0313\2\0\10\u0313\22\0\16\u0314\3\0\2\u0314\2\0"+
    "\10\u0314\22\0\16\u0315\3\0\2\u0315\2\0\10\u0315\22\0"+
    "\16\u0316\3\0\2\u0316\2\0\10\u0316\22\0\16\u0317\3\0"+
    "\2\u0317\2\0\10\u0317\22\0\16\u0318\3\0\2\u0318\2\0"+
    "\10\u0318\22\0\16\u0319\3\0\2\u0319\2\0\10\u0319\22\0"+
    "\16\u031a\3\0\2\u031a\2\0\10\u031a\22\0\16\u031b\3\0"+
    "\2\u031b\2\0\10\u031b\22\0\16\u031c\3\0\2\u031c\2\0"+
    "\10\u031c\22\0\16\u031d\3\0\2\u031d\2\0\10\u031d\22\0"+
    "\16\u031e\3\0\2\u031e\2\0\10\u031e\22\0\16\u031f\3\0"+
    "\2\u031f\2\0\10\u031f\22\0\16\u0320\3\0\2\u0320\2\0"+
    "\10\u0320\22\0\16\u0321\3\0\2\u0321\2\0\10\u0321\22\0"+
    "\16\u0322\3\0\2\u0322\2\0\10\u0322\22\0\16\u0323\3\0"+
    "\2\u0323\2\0\10\u0323\22\0\16\u0324\3\0\2\u0324\2\0"+
    "\10\u0324\22\0\16\u0325\3\0\2\u0325\2\0\10\u0325\22\0"+
    "\16\u0326\3\0\2\u0326\2\0\10\u0326\22\0\16\u0327\3\0"+
    "\2\u0327\2\0\10\u0327\22\0\16\u0328\3\0\2\u0328\2\0"+
    "\10\u0328\22\0\16\u0329\3\0\2\u0329\2\0\10\u0329\22\0"+
    "\16\u032a\3\0\2\u032a\2\0\10\u032a\22\0\16\u032b\3\0"+
    "\2\u032b\2\0\10\u032b\22\0\16\u032c\3\0\2\u032c\2\0"+
    "\10\u032c\22\0\16\u032d\3\0\2\u032d\2\0\10\u032d\22\0"+
    "\16\u032e\3\0\2\u032e\2\0\10\u032e\22\0\16\u032f\3\0"+
    "\2\u032f\2\0\10\u032f\22\0\16\u0330\3\0\2\u0330\2\0"+
    "\10\u0330\22\0\16\u0331\3\0\2\u0331\2\0\10\u0331\22\0"+
    "\16\u0332\3\0\2\u0332\2\0\10\u0332\22\0\16\u0333\3\0"+
    "\2\u0333\2\0\10\u0333\22\0\16\u0334\3\0\2\u0334\2\0"+
    "\10\u0334\22\0\16\u0335\3\0\2\u0335\2\0\10\u0335\22\0"+
    "\16\u0336\3\0\2\u0336\2\0\10\u0336\22\0\16\u0337\3\0"+
    "\2\u0337\2\0\10\u0337\22\0\16\u0338\3\0\2\u0338\2\0"+
    "\10\u0338\22\0\16\u0339\3\0\2\u0339\2\0\10\u0339\22\0"+
    "\16\u033a\3\0\2\u033a\2\0\10\u033a\22\0\16\u033b\3\0"+
    "\2\u033b\2\0\10\u033b\22\0\16\u033c\3\0\2\u033c\2\0"+
    "\10\u033c\22\0\16\u033d\3\0\2\u033d\2\0\10\u033d\22\0"+
    "\16\u033e\3\0\2\u033e\2\0\10\u033e\22\0\16\u033f\3\0"+
    "\2\u033f\2\0\10\u033f\22\0\16\u0340\3\0\2\u0340\2\0"+
    "\10\u0340\22\0\16\u0341\3\0\2\u0341\2\0\10\u0341\22\0"+
    "\16\u0342\3\0\2\u0342\2\0\10\u0342\22\0\16\u0343\3\0"+
    "\2\u0343\2\0\10\u0343\22\0\16\u0344\3\0\2\u0344\2\0"+
    "\10\u0344\22\0\16\u0345\3\0\2\u0345\2\0\10\u0345\22\0"+
    "\16\u0346\3\0\2\u0346\2\0\10\u0346\22\0\16\u0347\3\0"+
    "\2\u0347\2\0\10\u0347\22\0\16\u0348\3\0\2\u0348\2\0"+
    "\10\u0348\22\0\16\u0349\3\0\2\u0349\2\0\10\u0349\22\0"+
    "\16\u034a\3\0\2\u034a\2\0\10\u034a\22\0\16\u034b\3\0"+
    "\2\u034b\2\0\10\u034b\22\0\16\u034c\3\0\2\u034c\2\0"+
    "\10\u034c\22\0\16\u034d\3\0\2\u034d\2\0\10\u034d\22\0"+
    "\16\u034e\3\0\2\u034e\2\0\10\u034e\22\0\16\u034f\3\0"+
    "\2\u034f\2\0\10\u034f\22\0\16\u0350\3\0\2\u0350\2\0"+
    "\10\u0350\22\0\16\u0351\3\0\2\u0351\2\0\10\u0351\22\0"+
    "\16\u0352\3\0\2\u0352\2\0\10\u0352\22\0\16\u0353\3\0"+
    "\2\u0353\2\0\10\u0353\22\0\16\u0354\3\0\2\u0354\2\0"+
    "\10\u0354\22\0\16\u0355\3\0\2\u0355\2\0\10\u0355\22\0"+
    "\16\u0356\3\0\2\u0356\2\0\10\u0356\22\0\16\u0357\3\0"+
    "\2\u0357\2\0\10\u0357\22\0\16\u0358\3\0\2\u0358\2\0"+
    "\10\u0358\22\0\16\u0359\3\0\2\u0359\2\0\10\u0359\22\0"+
    "\16\u035a\3\0\2\u035a\2\0\10\u035a\22\0\16\u035b\3\0"+
    "\2\u035b\2\0\10\u035b\22\0\16\u035c\3\0\2\u035c\2\0"+
    "\10\u035c\22\0\16\u035d\3\0\2\u035d\2\0\10\u035d\22\0"+
    "\16\u035e\3\0\2\u035e\2\0\10\u035e\22\0\16\u035f\3\0"+
    "\2\u035f\2\0\10\u035f\22\0\16\u0360\3\0\2\u0360\2\0"+
    "\10\u0360\22\0\16\u0361\3\0\2\u0361\2\0\10\u0361\22\0"+
    "\16\u0362\3\0\2\u0362\2\0\10\u0362\22\0\16\u0363\3\0"+
    "\2\u0363\2\0\10\u0363\22\0\16\u0364\3\0\2\u0364\2\0"+
    "\10\u0364\22\0\16\u0365\3\0\2\u0365\2\0\10\u0365\22\0"+
    "\16\u0366\3\0\2\u0366\2\0\10\u0366\22\0\16\u0367\3\0"+
    "\2\u0367\2\0\10\u0367\22\0\16\u0368\3\0\2\u0368\2\0"+
    "\10\u0368\22\0\16\u0369\3\0\2\u0369\2\0\10\u0369\22\0"+
    "\16\u036a\3\0\2\u036a\2\0\10\u036a\22\0\16\u036b\3\0"+
    "\2\u036b\2\0\10\u036b\22\0\16\u036c\3\0\2\u036c\2\0"+
    "\10\u036c\22\0\16\u036d\3\0\2\u036d\2\0\10\u036d\22\0"+
    "\16\u036e\3\0\2\u036e\2\0\10\u036e\22\0\16\u036f\3\0"+
    "\2\u036f\2\0\10\u036f\22\0\16\u0370\3\0\2\u0370\2\0"+
    "\10\u0370\22\0\16\u0371\3\0\2\u0371\2\0\10\u0371\22\0"+
    "\16\u0372\3\0\2\u0372\2\0\10\u0372\22\0\16\u0373\3\0"+
    "\2\u0373\2\0\10\u0373\22\0\16\u0374\3\0\2\u0374\2\0"+
    "\10\u0374\22\0\16\u0375\3\0\2\u0375\2\0\10\u0375\22\0"+
    "\16\u0376\3\0\2\u0376\2\0\10\u0376\22\0\16\u0377\3\0"+
    "\2\u0377\2\0\10\u0377\22\0\16\u0378\3\0\2\u0378\2\0"+
    "\10\u0378\22\0\16\u0379\3\0\2\u0379\2\0\10\u0379\22\0"+
    "\16\u037a\3\0\2\u037a\2\0\10\u037a\22\0\16\u037b\3\0"+
    "\2\u037b\2\0\10\u037b\22\0\16\u037c\3\0\2\u037c\2\0"+
    "\10\u037c\22\0\16\u037d\3\0\2\u037d\2\0\10\u037d\22\0"+
    "\16\u037e\3\0\2\u037e\2\0\10\u037e\22\0\16\u037f\3\0"+
    "\2\u037f\2\0\10\u037f\22\0\16\u0380\3\0\2\u0380\2\0"+
    "\10\u0380\22\0\16\u0381\3\0\2\u0381\2\0\10\u0381\22\0"+
    "\16\u0382\3\0\2\u0382\2\0\10\u0382\22\0\16\u0383\3\0"+
    "\2\u0383\2\0\10\u0383\22\0\16\u0384\3\0\2\u0384\2\0"+
    "\10\u0384\22\0\16\u0385\3\0\2\u0385\2\0\10\u0385\22\0"+
    "\16\u0386\3\0\2\u0386\2\0\10\u0386\22\0\16\u0387\3\0"+
    "\2\u0387\2\0\10\u0387\22\0\16\u0388\3\0\2\u0388\2\0"+
    "\10\u0388\22\0\16\u0389\3\0\2\u0389\2\0\10\u0389\22\0"+
    "\16\u038a\3\0\2\u038a\2\0\10\u038a\22\0\16\u038b\3\0"+
    "\2\u038b\2\0\10\u038b\22\0\16\u038c\3\0\2\u038c\2\0"+
    "\10\u038c\22\0\16\u038d\3\0\2\u038d\2\0\10\u038d\22\0"+
    "\16\u038e\3\0\2\u038e\2\0\10\u038e\22\0\16\u038f\3\0"+
    "\2\u038f\2\0\10\u038f\22\0\16\u0390\3\0\2\u0390\2\0"+
    "\10\u0390\22\0\16\u0391\3\0\2\u0391\2\0\10\u0391\22\0"+
    "\16\u0392\3\0\2\u0392\2\0\10\u0392\22\0\16\u0393\3\0"+
    "\2\u0393\2\0\10\u0393\22\0\16\u0394\3\0\2\u0394\2\0"+
    "\10\u0394\22\0\16\u0395\3\0\2\u0395\2\0\10\u0395\22\0"+
    "\16\76\3\0\2\76\2\0\10\76\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40843];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\31\1\2\11\2\1\1\11"+
    "\3\1\1\11\3\1\1\11\23\1\2\0\2\11\2\0"+
    "\14\1\6\11\2\0\1\1\1\0\21\1\1\0\1\11"+
    "\1\0\13\1\1\0\17\1\1\0\1\11\u0211\1\1\0"+
    "\367\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[917];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private int count; // Este lleva la cuenta de los TOKENS y es tambiÃ©n el identificador
    private ArrayList<Yytoken> tokens = new ArrayList<>();    
    
    /**
     * Valida la inserciÃ³n de un nuevo token, si exite agrega la line o aumenta las ocurrencias del TOKEN en la misma linea
     * @param newToken
     * @param line
     * @return 
     */
    private boolean addToken(Yytoken newToken, int line) {
        for (Yytoken token : tokens) {
            if (token.getName().toUpperCase().equals(newToken.getName().toUpperCase()) && token.getType().equals(newToken.getType())) {
                for (int i = 0; i < token.getLines().size(); i++) {
                    if (token.getLines().get(i).getNumLine() == line) {
                        token.getLines().get(i).setOccurrences(token.getLines().get(i).getOccurrences() + 1);
                        return true;
                    }
                }
                token.getLines().add(new Line(line));
                return true;
            }
        }
        count++;
        newToken.setId(count);
        newToken.getLines().add(new Line(line));
        tokens.add(newToken);
        return true;
    }

    /**
     * @return the lines
     */
    public ArrayList<Yytoken> getTokens() {
        return tokens;
    }
    
    @Override
    public String toString() {
        String value = "";
        for (Yytoken token : tokens) {
            value += token.toString() + "\n";
        }
        return value;
    }

    public String toStringTokens() {
        String value = "";
        for (Yytoken token : tokens) {
            if(!token.getType().equals(Types_Tokens.ERROR)){
                value += token.toString() + "\n";
            }            
        }
        return value;
    }
    
    public String toStringErrores() {
        String value = "";
        for (Yytoken token : tokens) {
            if(token.getType().equals(Types_Tokens.ERROR)){
                value += token.toString() + "\n";
            }            
        }
        return value;
    }

    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerAnalyzer(java.io.Reader in) {
      count = 0;
    tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.ERROR), yyline);
            }
          case 53: break;
          case 2: 
            { /*Ignore*/
            }
          case 54: break;
          case 3: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LEFTPARENTHESIS);
            }
          case 55: break;
          case 4: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_MULTIPLY);
            }
          case 56: break;
          case 5: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_RIGHTPARENTHESIS);
            }
          case 57: break;
          case 6: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_DIVIDE);
            }
          case 58: break;
          case 7: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.IDENTIFICADOR), yyline);
        return symbol(sym.IDENTIFIER, yytext());
            }
          case 59: break;
          case 8: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL), yyline);
        return symbol(sym.ENTERO, new Integer(yytext()));
            }
          case 60: break;
          case 9: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LESS);
            }
          case 61: break;
          case 10: 
            { return symbol(sym.OP_COMMA);
            }
          case 62: break;
          case 11: 
            { return symbol(sym.OP_SEMI);
            }
          case 63: break;
          case 12: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_TWOPOINTS);
            }
          case 64: break;
          case 13: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_PLUS);
            }
          case 65: break;
          case 14: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_EQUAL);
            }
          case 66: break;
          case 15: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_GREATER);
            }
          case 67: break;
          case 16: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_LESS);
            }
          case 68: break;
          case 17: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_MULTEQUAL);
            }
          case 69: break;
          case 18: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_DIVEQUAL);
            }
          case 70: break;
          case 19: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_OF, yytext());
            }
          case 71: break;
          case 20: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_IF, yytext());
            }
          case 72: break;
          case 21: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_TO, yytext());
            }
          case 73: break;
          case 22: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LESSLESS);
            }
          case 74: break;
          case 23: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LESSEQUAL);
            }
          case 75: break;
          case 24: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING), yyline);
        return symbol(sym.STRING_LINE, new String(yytext()));
            }
          case 76: break;
          case 25: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING), yyline);
        return symbol(sym.NUMERAL_CHARACTER, new String(yytext()));
            }
          case 77: break;
          case 26: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_DO, yytext());
            }
          case 78: break;
          case 27: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_TWOPOINTSEGUAL);
            }
          case 79: break;
          case 28: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_PLUSPLUS);
            }
          case 80: break;
          case 29: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_PLUSEQUAL);
            }
          case 81: break;
          case 30: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_GREATEREQUAL);
            }
          case 82: break;
          case 31: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_LESSEQUAL);
            }
          case 83: break;
          case 32: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_DIFERENT);
            }
          case 84: break;
          case 33: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_END, yytext());
            }
          case 85: break;
          case 34: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.DATA_TYPE,  yytext());
            }
          case 86: break;
          case 35: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL), yyline);
        return symbol(sym.REAL, new Double(yytext()));
            }
          case 87: break;
          case 36: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING), yyline);
        return symbol(sym.STRING_BLOCK, new String(yytext()));
            }
          case 88: break;
          case 37: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_FOR, yytext());
            }
          case 89: break;
          case 38: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_VAR, yytext());
            }
          case 90: break;
          case 39: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_ELSE, yytext());
            }
          case 91: break;
          case 40: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_READ, yytext());
            }
          case 92: break;
          case 41: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_THEN, yytext());
            }
          case 93: break;
          case 42: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_TRUE, yytext());
            }
          case 94: break;
          case 43: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL), yyline);
        return symbol(sym.SCIENTIFIC_NOTATION, new Double(yytext()));
            }
          case 95: break;
          case 44: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_BEGIN, yytext());
            }
          case 96: break;
          case 45: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_CONST, yytext());
            }
          case 97: break;
          case 46: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_FALSE, yytext());
            }
          case 98: break;
          case 47: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_UNTIL, yytext());
            }
          case 99: break;
          case 48: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_WHITE, yytext());
            }
          case 100: break;
          case 49: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_WRITE, yytext());
            }
          case 101: break;
          case 50: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_PROGRAM, yytext());
            }
          case 102: break;
          case 51: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_FUNCTION, yytext());
            }
          case 103: break;
          case 52: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_PROCEDURE, yytext());
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
