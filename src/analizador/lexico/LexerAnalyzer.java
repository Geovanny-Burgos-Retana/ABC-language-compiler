/* The following code was generated by JFlex 1.6.1 */

package analizador.lexico;

import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.*;
import java.io.Reader;

class Yytoken {
    
    private int id; //Identificador Ãºnico para cada TOKEN
    private String name; //Nombre del TOKEN
    private Types_Tokens type;  //Tipo del TOKEN (Identificador, Operador, Palabra Reservada, Literal)
    private ArrayList<Line> lines = new ArrayList<>();  //Arreglos de lineas y ocurrencias
    
    public Yytoken(int id, String name, Types_Tokens type) {
        this.id = id;
        this.name = name;
        this.type = type;
    }

    @Override
    public String toString() {
        String token = name + "\t" + "\t" + type + "\t" + "\t" + lines;
        return token;
    }

    /**
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(int id) {
        this.id = id;
    }
    
    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the type
     */
    public Types_Tokens getType() {
        return type;
    }

    /**
     * @param type the type to set
     */
    public void setType(Types_Tokens type) {
        this.type = type;
    }

    /**
     * @return the lines
     */
    public ArrayList<Line> getLines() {
        return lines;
    }

    /**
     * @param lines the lines to set
     */
    public void setLines(ArrayList<Line> lines) {
        this.lines = lines;        
    }
    
}

/********** Seccion de opciones y declaraciones de JFlex **********/

public class LexerAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\1\12\1\12\1\11\22\0\1\1\1\0\1\41"+
    "\1\42\4\0\1\2\1\4\1\3\1\56\1\53\1\36\1\34\1\7"+
    "\1\43\11\33\1\55\1\54\1\61\1\57\1\60\2\0\1\17\1\13"+
    "\1\21\1\44\1\16\1\45\1\31\1\22\1\24\2\37\1\15\1\50"+
    "\1\20\1\14\1\47\1\37\1\23\1\32\1\25\1\46\1\51\1\52"+
    "\3\37\6\0\4\37\1\40\3\37\1\26\4\37\1\27\5\37\1\30"+
    "\6\37\1\5\1\35\1\6\7\0\1\12\u1fa2\0\1\12\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\2\13\7\1\10\1\1\1\11\2\1\1\10\6\7"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1"+
    "\1\21\1\2\1\1\1\2\1\22\3\7\1\23\7\7"+
    "\1\24\1\25\5\7\1\1\1\10\2\0\1\26\1\27"+
    "\2\0\1\30\1\31\1\1\1\32\10\7\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\0\1\1\1\0\5\7"+
    "\1\41\3\7\1\42\4\7\1\1\1\10\1\43\1\0"+
    "\1\44\1\0\1\31\1\1\1\45\4\7\1\46\2\7"+
    "\1\2\1\0\4\7\1\47\1\7\1\42\1\50\1\51"+
    "\1\52\2\7\1\1\1\10\1\53\1\0\1\31\1\1"+
    "\11\7\1\54\1\7\1\55\2\7\1\1\1\10\1\1"+
    "\1\56\1\7\1\57\2\7\1\60\1\61\4\7\1\42"+
    "\1\1\1\10\1\1\4\7\1\42\1\7\1\1\1\10"+
    "\1\1\2\7\1\62\1\7\1\42\1\1\1\10\1\1"+
    "\1\63\2\7\1\1\1\10\1\1\1\64\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\1\1\10\1\1\1\7\1\1"+
    "\1\10\1\1\1\7\1\10\2\1\1\0\367\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[919];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\62\0\310\0\372"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\62\0\62\0\u05dc\0\u060e\0\62\0\u0640\0\u0672\0\u06a4"+
    "\0\62\0\u06d6\0\u0708\0\u073a\0\62\0\u076c\0\u079e\0\u07d0"+
    "\0\u076c\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u076c\0\u076c\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a"+
    "\0\u0a8c\0\u0abe\0\u0af0\0\62\0\62\0\u041a\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u076c\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\62\0\62\0\62\0\62\0\62"+
    "\0\62\0\u0d7a\0\u0dac\0\u0dde\0\u06d6\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0e10\0\u0f0a\0\u0f3c\0\u0f6e\0\u0e10\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\62"+
    "\0\u0b54\0\u1130\0\u1162\0\u0e10\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u0e10\0\u125c\0\u128e\0\u0dac\0\u12c0\0\u12f2\0\u1324\0\u1356"+
    "\0\u1388\0\u12f2\0\u13ba\0\u12f2\0\u12f2\0\u12f2\0\u12f2\0\u13ec"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14b4\0\62\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8"+
    "\0\u1676\0\u16da\0\u1676\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1676\0\u1806\0\u1676\0\u1838\0\u186a\0\u1676\0\u1676\0\u189c"+
    "\0\u18ce\0\u1900\0\u1932\0\u189c\0\u1964\0\u1996\0\u19c8\0\u19fa"+
    "\0\u1a2c\0\u1a5e\0\u1a90\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1a90\0\u1bee\0\u1bee\0\u1c20\0\u1c52\0\u1c84"+
    "\0\u1bee\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1ce8\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0"+
    "\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260"+
    "\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0"+
    "\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580"+
    "\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710"+
    "\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0"+
    "\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30"+
    "\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0"+
    "\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50"+
    "\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0"+
    "\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070"+
    "\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200"+
    "\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390"+
    "\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520"+
    "\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0"+
    "\0\u36e2\0\u3714\0\u3746\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840"+
    "\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0"+
    "\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60"+
    "\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0"+
    "\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80"+
    "\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010"+
    "\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0"+
    "\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330"+
    "\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0"+
    "\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650"+
    "\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u474a\0\u477c\0\u47ae\0\u47e0"+
    "\0\u4812\0\u4844\0\u4876\0\u48a8\0\u48da\0\u490c\0\u493e\0\u4970"+
    "\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c\0\u4ace\0\u4b00"+
    "\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c\0\u4c5e\0\u4c90"+
    "\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a\0\u4dbc\0\u4dee\0\u4e20"+
    "\0\u4e52\0\u4e84\0\u4eb6\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e\0\u4fb0"+
    "\0\u4fe2\0\u5014\0\u5046\0\u5078\0\u50aa\0\u50dc\0\u510e\0\u5140"+
    "\0\u5172\0\u51a4\0\u51d6\0\u5208\0\u523a\0\u526c\0\u529e\0\u52d0"+
    "\0\u5302\0\u5334\0\u5366\0\u5398\0\u53ca\0\u53fc\0\u542e\0\u5460"+
    "\0\u5492\0\u54c4\0\u54f6\0\u5528\0\u555a\0\u558c\0\u55be\0\u55f0"+
    "\0\u5622\0\u5654\0\u5686\0\u56b8\0\u56ea\0\u571c\0\u574e\0\u5780"+
    "\0\u57b2\0\u57e4\0\u5816\0\u5848\0\u587a\0\u58ac\0\u58de\0\u5910"+
    "\0\u5942\0\u5974\0\u59a6\0\u59d8\0\u5a0a\0\u5a3c\0\u5a6e\0\u5aa0"+
    "\0\u5ad2\0\u5b04\0\u5b36\0\u5b68\0\u5b9a\0\u5bcc\0\u5bfe\0\u5c30"+
    "\0\u5c62\0\u5c94\0\u5cc6\0\u5cf8\0\u5d2a\0\u5d5c\0\u5d8e\0\u5dc0"+
    "\0\u5df2\0\u5e24\0\u5e56\0\u5e88\0\u5eba\0\u5eec\0\u5f1e\0\u5f50"+
    "\0\u5f82\0\u5fb4\0\u5fe6\0\u6018\0\u604a\0\u607c\0\u60ae\0\u60e0"+
    "\0\u6112\0\u6144\0\u6176\0\u61a8\0\u61da\0\u620c\0\u623e\0\u6270"+
    "\0\u62a2\0\u62d4\0\u6306\0\u6338\0\u636a\0\u639c\0\u63ce\0\u6400"+
    "\0\u6432\0\u6464\0\u6496\0\u64c8\0\u64fa\0\u652c\0\u655e\0\u6590"+
    "\0\u65c2\0\u65f4\0\u6626\0\u6658\0\u668a\0\u66bc\0\u66ee\0\u6720"+
    "\0\u6752\0\u6784\0\u67b6\0\u67e8\0\u681a\0\u684c\0\u687e\0\u68b0"+
    "\0\u68e2\0\u6914\0\u6946\0\u6978\0\u69aa\0\u69dc\0\u6a0e\0\u6a40"+
    "\0\u6a72\0\u6aa4\0\u6ad6\0\u6b08\0\u6b3a\0\u6b6c\0\u6b9e\0\u6bd0"+
    "\0\u6c02\0\u6c34\0\u6c66\0\u6c98\0\u6cca\0\u6cfc\0\u6d2e\0\u6d60"+
    "\0\u6d92\0\u6dc4\0\u6df6\0\u6e28\0\u6e5a\0\u6e8c\0\u6ebe\0\u6ef0"+
    "\0\u6f22\0\u6f54\0\u6f86\0\u6fb8\0\u6fea\0\u701c\0\u704e\0\u7080"+
    "\0\u70b2\0\u70e4\0\u7116\0\u7148\0\u717a\0\u71ac\0\u71de\0\u7210"+
    "\0\u7242\0\u7274\0\u72a6\0\u72d8\0\u730a\0\u733c\0\u736e\0\u73a0"+
    "\0\u73d2\0\u7404\0\u7436\0\u7468\0\u749a\0\u74cc\0\u74fe\0\u7530"+
    "\0\u7562\0\u7594\0\u75c6\0\u75f8\0\u762a\0\u765c\0\u768e\0\u76c0"+
    "\0\u76f2\0\u7724\0\u7756\0\u7788\0\u77ba\0\u77ec\0\u781e\0\u7850"+
    "\0\u7882\0\u78b4\0\u78e6\0\u7918\0\u794a\0\u797c\0\u79ae\0\u797c"+
    "\0\u79e0\0\u7a12\0\u7a44\0\u7a76\0\u7aa8\0\u7ada\0\u7b0c\0\u7b3e"+
    "\0\u7b70\0\u7ba2\0\u7bd4\0\u7c06\0\u7c38\0\u7c6a\0\u7c9c\0\u7cce"+
    "\0\u7d00\0\u7d32\0\u7d64\0\u7d96\0\u7dc8\0\u7dfa\0\u7e2c\0\u7e5e"+
    "\0\u7e90\0\u7ec2\0\u7ef4\0\u7f26\0\u7f58\0\u7f8a\0\u7fbc\0\u7fee"+
    "\0\u8020\0\u8052\0\u8084\0\u80b6\0\u80e8\0\u811a\0\u814c\0\u817e"+
    "\0\u81b0\0\u81e2\0\u8214\0\u8246\0\u8278\0\u82aa\0\u82dc\0\u830e"+
    "\0\u8340\0\u8372\0\u83a4\0\u83d6\0\u8408\0\u843a\0\u846c\0\u849e"+
    "\0\u84d0\0\u8502\0\u8534\0\u8566\0\u8598\0\u85ca\0\u85fc\0\u862e"+
    "\0\u8660\0\u8692\0\u86c4\0\u86f6\0\u8728\0\u875a\0\u878c\0\u87be"+
    "\0\u87f0\0\u8822\0\u8854\0\u8886\0\u88b8\0\u88ea\0\u891c\0\u894e"+
    "\0\u8980\0\u89b2\0\u89e4\0\u8a16\0\u8a48\0\u8a7a\0\u8aac\0\u8ade"+
    "\0\u8b10\0\u8b42\0\u8b74\0\u8ba6\0\u8bd8\0\u8c0a\0\u8c3c\0\u8c6e"+
    "\0\u8ca0\0\u8cd2\0\u8d04\0\u8d36\0\u8d68\0\u8d9a\0\u8dcc\0\u8dfe"+
    "\0\u8e30\0\u8e62\0\u8e94\0\u8ec6\0\u8ef8\0\u8f2a\0\u8f5c\0\u8f8e"+
    "\0\u8fc0\0\u8ff2\0\u9024\0\u9056\0\u9088\0\u90ba\0\u90ec\0\u911e"+
    "\0\u9150\0\u9182\0\u91b4\0\u91e6\0\u9218\0\u924a\0\u927c\0\u92ae"+
    "\0\u92e0\0\u9312\0\u9344\0\u9376\0\u93a8\0\u93da\0\u940c\0\u943e"+
    "\0\u9470\0\u94a2\0\u94d4\0\u9506\0\u9538\0\u956a\0\u959c\0\u95ce"+
    "\0\u9600\0\u9632\0\u9664\0\u9696\0\u96c8\0\u96fa\0\u972c\0\u975e"+
    "\0\u9790\0\u97c2\0\u97f4\0\u9826\0\u9858\0\u988a\0\u98bc\0\u98ee"+
    "\0\u9920\0\u9952\0\u9984\0\u99b6\0\u99e8\0\u9a1a\0\u9a4c\0\u9a7e"+
    "\0\u9ab0\0\u9ae2\0\u9b14\0\u9b46\0\u9b78\0\u9baa\0\u9bdc\0\u9c0e"+
    "\0\u9c40\0\u9c72\0\u9ca4\0\u9cd6\0\u9d08\0\u9d3a\0\u9d6c\0\u9d9e"+
    "\0\u9dd0\0\u9e02\0\u9e34\0\u9e66\0\u9e98\0\u9eca\0\u9efc\0\u9f2e"+
    "\0\u9f60\0\u9f92\0\u9fc4\0\u9ff6\0\ua028\0\ua05a\0\ua08c\0\ua0be"+
    "\0\ua0f0\0\ua122\0\ua154\0\ua186\0\ua1b8\0\ua1ea\0\ua21c\0\ua24e"+
    "\0\ua280\0\ua2b2\0\ua2e4\0\ua316\0\ua348\0\ua37a\0\ua3ac\0\ua3de"+
    "\0\ua410\0\ua442\0\ua474\0\ua4a6\0\ua4d8\0\ua50a\0\ua53c\0\ua56e"+
    "\0\ua5a0\0\ua5d2\0\ua604\0\ua636\0\ua668\0\ua69a\0\ua6cc\0\ua6fe"+
    "\0\ua730\0\ua762\0\ua794\0\ua7c6\0\ua7f8\0\ua82a\0\ua85c\0\ua88e"+
    "\0\ua8c0\0\ua8f2\0\ua924\0\ua956\0\ua988\0\ua9ba\0\ua9ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[919];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\3\1\11\1\2\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\16\1\20\1\21\1\22\1\23\3\16\1\24"+
    "\1\25\1\26\1\2\1\27\2\16\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\16\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\65\0\1\50"+
    "\135\0\1\51\2\0\6\7\1\52\1\7\3\53\47\7"+
    "\7\0\1\54\47\0\1\55\12\0\1\3\64\0\1\56"+
    "\1\57\1\56\1\60\15\56\3\0\2\56\2\0\10\56"+
    "\22\0\21\56\3\0\2\56\2\0\2\56\1\61\5\56"+
    "\22\0\1\56\1\62\17\56\3\0\2\56\2\0\10\56"+
    "\22\0\2\56\1\63\2\56\1\64\13\56\3\0\2\56"+
    "\2\0\10\56\22\0\21\56\3\0\2\56\2\0\10\56"+
    "\22\0\1\56\1\65\5\56\1\66\11\56\3\0\2\56"+
    "\2\0\10\56\22\0\3\56\1\67\15\56\3\0\2\56"+
    "\2\0\10\56\22\0\5\56\1\70\13\56\3\0\2\56"+
    "\2\0\2\56\1\71\5\56\22\0\1\56\1\72\5\56"+
    "\1\73\1\74\10\56\3\0\2\56\2\0\10\56\22\0"+
    "\14\56\1\75\4\56\3\0\2\56\2\0\10\56\22\0"+
    "\7\56\1\76\2\56\1\77\6\56\3\0\2\56\2\0"+
    "\10\56\22\0\20\100\1\101\1\102\2\0\2\100\2\0"+
    "\1\101\7\100\42\0\1\103\7\0\1\103\54\0\1\104"+
    "\20\0\1\105\2\0\10\106\3\107\26\106\1\110\20\106"+
    "\33\0\1\111\7\0\1\111\31\0\20\100\1\112\1\102"+
    "\2\0\2\100\2\0\1\112\7\100\22\0\1\56\1\113"+
    "\17\56\3\0\2\56\2\0\10\56\22\0\1\56\1\114"+
    "\2\56\1\115\14\56\3\0\2\56\2\0\3\56\1\116"+
    "\4\56\22\0\5\56\1\117\13\56\3\0\2\56\2\0"+
    "\10\56\22\0\10\56\1\120\10\56\3\0\2\56\2\0"+
    "\10\56\22\0\4\56\1\121\14\56\3\0\2\56\2\0"+
    "\10\56\22\0\7\56\1\122\1\123\10\56\3\0\2\56"+
    "\2\0\10\56\66\0\1\124\60\0\1\125\1\126\61\0"+
    "\1\127\61\0\1\130\1\131\1\0\3\50\1\132\1\133"+
    "\3\50\3\134\47\50\6\135\1\52\1\135\3\0\47\135"+
    "\6\53\1\3\53\53\10\54\3\0\47\54\13\0\21\136"+
    "\3\0\2\136\2\0\10\136\22\0\1\136\1\137\17\136"+
    "\3\0\2\136\2\0\10\136\22\0\16\136\1\140\2\136"+
    "\3\0\2\136\2\0\10\136\22\0\5\136\1\141\13\136"+
    "\3\0\2\136\2\0\10\136\22\0\17\136\1\142\1\136"+
    "\3\0\2\136\2\0\10\136\22\0\21\136\3\0\2\136"+
    "\2\0\1\136\1\143\6\136\22\0\5\136\1\144\13\136"+
    "\3\0\2\136\2\0\10\136\22\0\4\136\1\145\14\136"+
    "\3\0\2\136\2\0\10\136\22\0\4\136\1\146\14\136"+
    "\3\0\2\136\2\0\10\136\22\0\12\136\1\147\6\136"+
    "\3\0\2\136\2\0\10\136\22\0\3\136\1\150\15\136"+
    "\3\0\2\136\2\0\10\136\22\0\21\136\3\0\2\136"+
    "\2\0\3\136\1\151\4\136\22\0\15\136\1\147\3\136"+
    "\3\0\2\136\2\0\10\136\22\0\1\136\1\152\17\136"+
    "\3\0\2\136\2\0\10\136\22\0\10\136\1\153\10\136"+
    "\3\0\2\136\2\0\10\136\22\0\21\154\3\0\2\154"+
    "\2\0\10\154\22\0\20\154\1\155\1\102\2\0\2\154"+
    "\2\0\1\155\7\154\42\0\1\156\7\0\1\156\34\0"+
    "\1\157\14\0\1\103\1\0\1\157\2\0\1\157\2\0"+
    "\1\103\16\0\41\107\1\160\20\107\10\161\3\0\26\161"+
    "\1\110\20\161\33\0\1\162\7\0\1\162\31\0\20\154"+
    "\1\163\1\102\2\0\2\154\2\0\1\163\7\154\22\0"+
    "\10\136\1\164\10\136\3\0\2\136\2\0\10\136\22\0"+
    "\2\136\1\165\16\136\3\0\2\136\2\0\10\136\22\0"+
    "\5\136\1\166\13\136\3\0\2\136\2\0\10\136\22\0"+
    "\12\136\1\167\6\136\3\0\2\136\2\0\10\136\22\0"+
    "\1\136\1\170\17\136\3\0\2\136\2\0\10\136\22\0"+
    "\10\136\1\171\10\136\3\0\2\136\2\0\10\136\22\0"+
    "\11\136\1\172\7\136\3\0\2\136\2\0\10\136\22\0"+
    "\11\136\1\173\7\136\3\0\2\136\2\0\10\136\7\0"+
    "\3\133\1\132\1\174\3\133\3\0\52\133\1\132\4\133"+
    "\3\0\47\133\3\134\1\175\1\0\55\134\13\0\21\176"+
    "\3\0\2\176\2\0\10\176\22\0\2\176\1\177\16\176"+
    "\3\0\2\176\2\0\10\176\22\0\11\176\1\200\7\176"+
    "\3\0\2\176\2\0\10\176\22\0\16\176\1\201\2\176"+
    "\3\0\2\176\2\0\10\176\22\0\3\176\1\202\15\176"+
    "\3\0\2\176\2\0\10\176\22\0\17\176\1\203\1\176"+
    "\3\0\2\176\2\0\10\176\22\0\10\176\1\204\10\176"+
    "\3\0\2\176\2\0\10\176\22\0\2\176\1\204\16\176"+
    "\3\0\2\176\2\0\1\176\1\205\6\176\22\0\5\176"+
    "\1\206\13\176\3\0\2\176\2\0\10\176\22\0\3\176"+
    "\1\207\15\176\3\0\2\176\2\0\10\176\22\0\10\176"+
    "\1\210\10\176\3\0\2\176\2\0\10\176\22\0\11\176"+
    "\1\211\7\176\3\0\2\176\2\0\10\176\22\0\21\212"+
    "\3\0\2\212\2\0\10\212\22\0\20\212\1\213\1\102"+
    "\2\0\2\212\2\0\1\213\7\212\25\0\1\157\14\0"+
    "\1\156\1\0\1\157\2\0\1\157\2\0\1\156\51\0"+
    "\1\214\2\0\1\215\4\0\1\214\12\0\1\215\36\0"+
    "\1\216\7\0\1\216\31\0\20\212\1\217\1\102\2\0"+
    "\2\212\2\0\1\217\7\212\22\0\17\176\1\220\1\176"+
    "\3\0\2\176\2\0\10\176\22\0\6\176\1\221\12\176"+
    "\3\0\2\176\2\0\10\176\22\0\11\176\1\222\7\176"+
    "\3\0\2\176\2\0\10\176\22\0\6\176\1\223\7\176"+
    "\1\224\2\176\3\0\2\176\2\0\10\176\22\0\2\176"+
    "\1\225\16\176\3\0\2\176\2\0\10\176\22\0\12\176"+
    "\1\226\6\176\3\0\2\176\2\0\10\176\13\0\1\3"+
    "\70\0\21\227\3\0\2\227\2\0\10\227\22\0\3\227"+
    "\1\230\15\227\3\0\2\227\2\0\10\227\22\0\5\227"+
    "\1\231\13\227\3\0\2\227\2\0\10\227\22\0\11\227"+
    "\1\232\7\227\3\0\2\227\2\0\10\227\22\0\12\227"+
    "\1\233\6\227\3\0\2\227\2\0\10\227\22\0\12\227"+
    "\1\234\6\227\3\0\2\227\2\0\10\227\22\0\5\227"+
    "\1\235\13\227\3\0\2\227\2\0\10\227\22\0\21\236"+
    "\3\0\2\236\2\0\10\236\22\0\20\236\1\237\1\102"+
    "\2\0\2\236\2\0\1\237\7\236\42\0\1\214\7\0"+
    "\1\214\31\0\20\236\1\240\1\102\2\0\2\236\2\0"+
    "\1\240\7\236\22\0\3\227\1\241\15\227\3\0\2\227"+
    "\2\0\10\227\22\0\12\227\1\242\6\227\3\0\2\227"+
    "\2\0\10\227\22\0\2\227\1\243\16\227\3\0\2\227"+
    "\2\0\10\227\22\0\3\227\1\244\15\227\3\0\2\227"+
    "\2\0\10\227\22\0\10\227\1\245\10\227\3\0\2\227"+
    "\2\0\10\227\22\0\3\227\1\246\15\227\3\0\2\227"+
    "\2\0\10\227\22\0\3\227\1\247\15\227\3\0\2\227"+
    "\2\0\10\227\22\0\21\250\3\0\2\250\2\0\10\250"+
    "\22\0\4\250\1\251\14\250\3\0\2\250\2\0\10\250"+
    "\22\0\5\250\1\252\13\250\3\0\2\250\2\0\10\250"+
    "\22\0\11\250\1\253\7\250\3\0\2\250\2\0\10\250"+
    "\22\0\16\250\1\254\2\250\3\0\2\250\2\0\10\250"+
    "\22\0\21\255\3\0\2\255\2\0\10\255\22\0\20\255"+
    "\1\256\1\102\2\0\2\255\2\0\1\256\7\255\22\0"+
    "\20\255\1\257\1\102\2\0\2\255\2\0\1\257\7\255"+
    "\22\0\11\250\1\260\7\250\3\0\2\250\2\0\10\250"+
    "\22\0\21\250\3\0\2\250\2\0\1\250\1\261\6\250"+
    "\22\0\4\250\1\262\14\250\3\0\2\250\2\0\10\250"+
    "\22\0\21\263\3\0\2\263\2\0\10\263\22\0\5\263"+
    "\1\264\13\263\3\0\2\263\2\0\10\263\22\0\12\263"+
    "\1\264\6\263\3\0\2\263\2\0\10\263\22\0\5\263"+
    "\1\265\13\263\3\0\2\263\2\0\10\263\22\0\21\266"+
    "\3\0\2\266\2\0\10\266\22\0\20\266\1\267\1\102"+
    "\2\0\2\266\2\0\1\267\7\266\22\0\20\266\1\270"+
    "\1\102\2\0\2\266\2\0\1\270\7\266\22\0\1\263"+
    "\1\271\17\263\3\0\2\263\2\0\10\263\22\0\21\263"+
    "\3\0\2\263\2\0\3\263\1\272\4\263\22\0\21\263"+
    "\3\0\2\263\2\0\5\263\1\273\2\263\22\0\21\274"+
    "\3\0\2\274\2\0\10\274\22\0\12\274\1\275\6\274"+
    "\3\0\2\274\2\0\10\274\22\0\21\276\3\0\2\276"+
    "\2\0\10\276\22\0\20\276\1\277\1\102\2\0\2\276"+
    "\2\0\1\277\7\276\22\0\20\276\1\300\1\102\2\0"+
    "\2\276\2\0\1\300\7\276\22\0\5\274\1\301\13\274"+
    "\3\0\2\274\2\0\10\274\22\0\10\274\1\302\10\274"+
    "\3\0\2\274\2\0\10\274\22\0\21\303\3\0\2\303"+
    "\2\0\10\303\22\0\21\304\3\0\2\304\2\0\10\304"+
    "\22\0\20\304\1\305\1\102\2\0\2\304\2\0\1\305"+
    "\7\304\22\0\20\304\1\306\1\102\2\0\2\304\2\0"+
    "\1\306\7\304\22\0\3\303\1\307\15\303\3\0\2\303"+
    "\2\0\10\303\22\0\21\310\3\0\2\310\2\0\10\310"+
    "\22\0\21\311\3\0\2\311\2\0\10\311\22\0\20\311"+
    "\1\312\1\102\2\0\2\311\2\0\1\312\7\311\22\0"+
    "\20\311\1\313\1\102\2\0\2\311\2\0\1\313\7\311"+
    "\22\0\21\314\3\0\2\314\2\0\10\314\22\0\21\315"+
    "\3\0\2\315\2\0\10\315\22\0\20\315\1\316\1\102"+
    "\2\0\2\315\2\0\1\316\7\315\22\0\20\315\1\317"+
    "\1\102\2\0\2\315\2\0\1\317\7\315\22\0\21\320"+
    "\3\0\2\320\2\0\10\320\22\0\21\321\3\0\2\321"+
    "\2\0\10\321\22\0\20\321\1\322\1\102\2\0\2\321"+
    "\2\0\1\322\7\321\22\0\20\321\1\323\1\102\2\0"+
    "\2\321\2\0\1\323\7\321\22\0\21\324\3\0\2\324"+
    "\2\0\10\324\22\0\21\325\3\0\2\325\2\0\10\325"+
    "\22\0\20\325\1\326\1\102\2\0\2\325\2\0\1\326"+
    "\7\325\22\0\20\325\1\327\1\102\2\0\2\325\2\0"+
    "\1\327\7\325\22\0\21\330\3\0\2\330\2\0\10\330"+
    "\22\0\21\331\3\0\2\331\2\0\10\331\22\0\20\331"+
    "\1\332\1\102\2\0\2\331\2\0\1\332\7\331\22\0"+
    "\20\331\1\333\1\102\2\0\2\331\2\0\1\333\7\331"+
    "\22\0\21\334\3\0\2\334\2\0\10\334\22\0\21\335"+
    "\3\0\2\335\2\0\10\335\22\0\20\335\1\336\1\102"+
    "\2\0\2\335\2\0\1\336\7\335\22\0\20\335\1\337"+
    "\1\102\2\0\2\335\2\0\1\337\7\335\22\0\21\340"+
    "\3\0\2\340\2\0\10\340\22\0\21\341\3\0\2\341"+
    "\2\0\10\341\22\0\20\341\1\342\1\102\2\0\2\341"+
    "\2\0\1\342\7\341\22\0\20\341\1\343\1\102\2\0"+
    "\2\341\2\0\1\343\7\341\22\0\21\344\3\0\2\344"+
    "\2\0\10\344\22\0\21\345\3\0\2\345\2\0\10\345"+
    "\22\0\20\345\1\346\1\102\2\0\2\345\2\0\1\346"+
    "\7\345\22\0\20\345\1\347\1\102\2\0\2\345\2\0"+
    "\1\347\7\345\22\0\21\350\3\0\2\350\2\0\10\350"+
    "\22\0\21\351\3\0\2\351\2\0\10\351\22\0\20\351"+
    "\1\352\1\102\2\0\2\351\2\0\1\352\7\351\22\0"+
    "\20\351\1\353\1\102\2\0\2\351\2\0\1\353\7\351"+
    "\22\0\21\354\3\0\2\354\2\0\10\354\22\0\21\355"+
    "\3\0\2\355\2\0\10\355\22\0\20\355\1\356\1\102"+
    "\2\0\2\355\2\0\1\356\7\355\22\0\20\355\1\357"+
    "\1\102\2\0\2\355\2\0\1\357\7\355\22\0\21\360"+
    "\3\0\2\360\2\0\10\360\22\0\21\361\3\0\2\361"+
    "\2\0\10\361\22\0\20\361\1\362\1\102\2\0\2\361"+
    "\2\0\1\362\7\361\22\0\20\361\1\363\1\102\2\0"+
    "\2\361\2\0\1\363\7\361\22\0\21\364\3\0\2\364"+
    "\2\0\10\364\22\0\21\365\3\0\2\365\2\0\10\365"+
    "\22\0\20\365\1\366\1\102\2\0\2\365\2\0\1\366"+
    "\7\365\22\0\20\365\1\367\1\102\2\0\2\365\2\0"+
    "\1\367\7\365\22\0\21\370\3\0\2\370\2\0\10\370"+
    "\22\0\21\371\3\0\2\371\2\0\10\371\22\0\20\371"+
    "\1\372\1\102\2\0\2\371\2\0\1\372\7\371\22\0"+
    "\20\371\1\373\1\102\2\0\2\371\2\0\1\373\7\371"+
    "\22\0\21\374\3\0\2\374\2\0\10\374\22\0\21\375"+
    "\3\0\2\375\2\0\10\375\22\0\20\375\1\376\1\102"+
    "\2\0\2\375\2\0\1\376\7\375\22\0\20\375\1\377"+
    "\1\102\2\0\2\375\2\0\1\377\7\375\22\0\21\u0100"+
    "\3\0\2\u0100\2\0\10\u0100\22\0\21\u0101\3\0\2\u0101"+
    "\2\0\10\u0101\22\0\20\u0101\1\u0102\1\102\2\0\2\u0101"+
    "\2\0\1\u0102\7\u0101\22\0\20\u0101\1\u0103\1\102\2\0"+
    "\2\u0101\2\0\1\u0103\7\u0101\22\0\21\u0104\3\0\2\u0104"+
    "\2\0\10\u0104\22\0\21\u0105\3\0\2\u0105\2\0\10\u0105"+
    "\22\0\20\u0105\1\u0106\1\102\2\0\2\u0105\2\0\1\u0106"+
    "\7\u0105\22\0\20\u0105\1\u0107\1\102\2\0\2\u0105\2\0"+
    "\1\u0107\7\u0105\22\0\21\u0108\3\0\2\u0108\2\0\10\u0108"+
    "\22\0\21\u0109\3\0\2\u0109\2\0\10\u0109\22\0\20\u0109"+
    "\1\u010a\1\102\2\0\2\u0109\2\0\1\u010a\7\u0109\22\0"+
    "\20\u0109\1\u010b\1\102\2\0\2\u0109\2\0\1\u010b\7\u0109"+
    "\22\0\21\u010c\3\0\2\u010c\2\0\10\u010c\22\0\21\u010d"+
    "\3\0\2\u010d\2\0\10\u010d\22\0\20\u010d\1\u010e\1\102"+
    "\2\0\2\u010d\2\0\1\u010e\7\u010d\22\0\20\u010d\1\u010f"+
    "\1\102\2\0\2\u010d\2\0\1\u010f\7\u010d\22\0\21\u0110"+
    "\3\0\2\u0110\2\0\10\u0110\22\0\21\u0111\3\0\2\u0111"+
    "\2\0\10\u0111\22\0\20\u0111\1\u0112\1\102\2\0\2\u0111"+
    "\2\0\1\u0112\7\u0111\22\0\20\u0111\1\u0113\1\102\2\0"+
    "\2\u0111\2\0\1\u0113\7\u0111\22\0\21\u0114\3\0\2\u0114"+
    "\2\0\10\u0114\22\0\21\u0115\3\0\2\u0115\2\0\10\u0115"+
    "\22\0\20\u0115\1\u0116\1\102\2\0\2\u0115\2\0\1\u0116"+
    "\7\u0115\22\0\20\u0115\1\u0117\1\102\2\0\2\u0115\2\0"+
    "\1\u0117\7\u0115\22\0\21\u0118\3\0\2\u0118\2\0\10\u0118"+
    "\22\0\21\u0119\3\0\2\u0119\2\0\10\u0119\22\0\20\u0119"+
    "\1\u011a\1\102\2\0\2\u0119\2\0\1\u011a\7\u0119\22\0"+
    "\20\u0119\1\u011b\1\102\2\0\2\u0119\2\0\1\u011b\7\u0119"+
    "\22\0\21\u011c\3\0\2\u011c\2\0\10\u011c\22\0\21\u011d"+
    "\3\0\2\u011d\2\0\10\u011d\22\0\20\u011d\1\u011e\1\102"+
    "\2\0\2\u011d\2\0\1\u011e\7\u011d\22\0\20\u011d\1\u011f"+
    "\1\102\2\0\2\u011d\2\0\1\u011f\7\u011d\22\0\21\u0120"+
    "\3\0\2\u0120\2\0\10\u0120\22\0\21\u0121\3\0\2\u0121"+
    "\2\0\10\u0121\22\0\20\u0121\1\u0122\1\102\2\0\2\u0121"+
    "\2\0\1\u0122\7\u0121\22\0\20\u0121\1\u0123\1\102\2\0"+
    "\2\u0121\2\0\1\u0123\7\u0121\22\0\21\u0124\3\0\2\u0124"+
    "\2\0\10\u0124\22\0\21\u0125\3\0\2\u0125\2\0\10\u0125"+
    "\22\0\20\u0125\1\u0126\1\102\2\0\2\u0125\2\0\1\u0126"+
    "\7\u0125\22\0\20\u0125\1\u0127\1\102\2\0\2\u0125\2\0"+
    "\1\u0127\7\u0125\22\0\21\u0128\3\0\2\u0128\2\0\10\u0128"+
    "\22\0\21\u0129\3\0\2\u0129\2\0\10\u0129\22\0\20\u0129"+
    "\1\u012a\1\102\2\0\2\u0129\2\0\1\u012a\7\u0129\22\0"+
    "\20\u0129\1\u012b\1\102\2\0\2\u0129\2\0\1\u012b\7\u0129"+
    "\22\0\21\u012c\3\0\2\u012c\2\0\10\u012c\22\0\21\u012d"+
    "\3\0\2\u012d\2\0\10\u012d\22\0\20\u012d\1\u012e\1\102"+
    "\2\0\2\u012d\2\0\1\u012e\7\u012d\22\0\20\u012d\1\u012f"+
    "\1\102\2\0\2\u012d\2\0\1\u012f\7\u012d\22\0\21\u0130"+
    "\3\0\2\u0130\2\0\10\u0130\22\0\21\u0131\3\0\2\u0131"+
    "\2\0\10\u0131\22\0\20\u0131\1\u0132\1\102\2\0\2\u0131"+
    "\2\0\1\u0132\7\u0131\22\0\20\u0131\1\u0133\1\102\2\0"+
    "\2\u0131\2\0\1\u0133\7\u0131\22\0\21\u0134\3\0\2\u0134"+
    "\2\0\10\u0134\22\0\21\u0135\3\0\2\u0135\2\0\10\u0135"+
    "\22\0\20\u0135\1\u0136\1\102\2\0\2\u0135\2\0\1\u0136"+
    "\7\u0135\22\0\20\u0135\1\u0137\1\102\2\0\2\u0135\2\0"+
    "\1\u0137\7\u0135\22\0\21\u0138\3\0\2\u0138\2\0\10\u0138"+
    "\22\0\21\u0139\3\0\2\u0139\2\0\10\u0139\22\0\20\u0139"+
    "\1\u013a\1\102\2\0\2\u0139\2\0\1\u013a\7\u0139\22\0"+
    "\20\u0139\1\u013b\1\102\2\0\2\u0139\2\0\1\u013b\7\u0139"+
    "\22\0\21\u013c\3\0\2\u013c\2\0\10\u013c\22\0\21\u013d"+
    "\3\0\2\u013d\2\0\10\u013d\22\0\20\u013d\1\u013e\1\102"+
    "\2\0\2\u013d\2\0\1\u013e\7\u013d\22\0\20\u013d\1\u013f"+
    "\1\102\2\0\2\u013d\2\0\1\u013f\7\u013d\22\0\21\u0140"+
    "\3\0\2\u0140\2\0\10\u0140\22\0\21\u0141\3\0\2\u0141"+
    "\2\0\10\u0141\22\0\20\u0141\1\u0142\1\102\2\0\2\u0141"+
    "\2\0\1\u0142\7\u0141\22\0\20\u0141\1\u0143\1\102\2\0"+
    "\2\u0141\2\0\1\u0143\7\u0141\22\0\21\u0144\3\0\2\u0144"+
    "\2\0\10\u0144\22\0\21\u0145\3\0\2\u0145\2\0\10\u0145"+
    "\22\0\20\u0145\1\u0146\1\102\2\0\2\u0145\2\0\1\u0146"+
    "\7\u0145\22\0\20\u0145\1\u0147\1\102\2\0\2\u0145\2\0"+
    "\1\u0147\7\u0145\22\0\21\u0148\3\0\2\u0148\2\0\10\u0148"+
    "\22\0\21\u0149\3\0\2\u0149\2\0\10\u0149\22\0\20\u0149"+
    "\1\u014a\1\102\2\0\2\u0149\2\0\1\u014a\7\u0149\22\0"+
    "\20\u0149\1\u014b\1\102\2\0\2\u0149\2\0\1\u014b\7\u0149"+
    "\22\0\21\u014c\3\0\2\u014c\2\0\10\u014c\22\0\21\u014d"+
    "\3\0\2\u014d\2\0\10\u014d\22\0\20\u014d\1\u014e\1\102"+
    "\2\0\2\u014d\2\0\1\u014e\7\u014d\22\0\20\u014d\1\u014f"+
    "\1\102\2\0\2\u014d\2\0\1\u014f\7\u014d\22\0\21\u0150"+
    "\3\0\2\u0150\2\0\10\u0150\22\0\21\u0151\3\0\2\u0151"+
    "\2\0\10\u0151\22\0\20\u0151\1\u0152\1\102\2\0\2\u0151"+
    "\2\0\1\u0152\7\u0151\22\0\20\u0151\1\u0153\1\102\2\0"+
    "\2\u0151\2\0\1\u0153\7\u0151\22\0\21\u0154\3\0\2\u0154"+
    "\2\0\10\u0154\22\0\21\u0155\3\0\2\u0155\2\0\10\u0155"+
    "\22\0\20\u0155\1\u0156\1\102\2\0\2\u0155\2\0\1\u0156"+
    "\7\u0155\22\0\20\u0155\1\u0157\1\102\2\0\2\u0155\2\0"+
    "\1\u0157\7\u0155\22\0\21\u0158\3\0\2\u0158\2\0\10\u0158"+
    "\22\0\21\u0159\3\0\2\u0159\2\0\10\u0159\22\0\20\u0159"+
    "\1\u015a\1\102\2\0\2\u0159\2\0\1\u015a\7\u0159\22\0"+
    "\20\u0159\1\u015b\1\102\2\0\2\u0159\2\0\1\u015b\7\u0159"+
    "\22\0\21\u015c\3\0\2\u015c\2\0\10\u015c\22\0\21\u015d"+
    "\3\0\2\u015d\2\0\10\u015d\22\0\20\u015d\1\u015e\1\102"+
    "\2\0\2\u015d\2\0\1\u015e\7\u015d\22\0\20\u015d\1\u015f"+
    "\1\102\2\0\2\u015d\2\0\1\u015f\7\u015d\22\0\21\u0160"+
    "\3\0\2\u0160\2\0\10\u0160\22\0\21\u0161\3\0\2\u0161"+
    "\2\0\10\u0161\22\0\20\u0161\1\u0162\1\102\2\0\2\u0161"+
    "\2\0\1\u0162\7\u0161\22\0\20\u0161\1\u0163\1\102\2\0"+
    "\2\u0161\2\0\1\u0163\7\u0161\22\0\21\u0164\3\0\2\u0164"+
    "\2\0\10\u0164\22\0\21\u0165\3\0\2\u0165\2\0\10\u0165"+
    "\22\0\20\u0165\1\u0166\1\102\2\0\2\u0165\2\0\1\u0166"+
    "\7\u0165\22\0\20\u0165\1\u0167\1\102\2\0\2\u0165\2\0"+
    "\1\u0167\7\u0165\22\0\21\u0168\3\0\2\u0168\2\0\10\u0168"+
    "\22\0\21\u0169\3\0\2\u0169\2\0\10\u0169\22\0\20\u0169"+
    "\1\u016a\1\102\2\0\2\u0169\2\0\1\u016a\7\u0169\22\0"+
    "\20\u0169\1\u016b\1\102\2\0\2\u0169\2\0\1\u016b\7\u0169"+
    "\22\0\21\u016c\3\0\2\u016c\2\0\10\u016c\22\0\21\u016d"+
    "\3\0\2\u016d\2\0\10\u016d\22\0\20\u016d\1\u016e\1\102"+
    "\2\0\2\u016d\2\0\1\u016e\7\u016d\22\0\20\u016d\1\u016f"+
    "\1\102\2\0\2\u016d\2\0\1\u016f\7\u016d\22\0\21\u0170"+
    "\3\0\2\u0170\2\0\10\u0170\22\0\21\u0171\3\0\2\u0171"+
    "\2\0\10\u0171\22\0\20\u0171\1\u0172\1\102\2\0\2\u0171"+
    "\2\0\1\u0172\7\u0171\22\0\20\u0171\1\u0173\1\102\2\0"+
    "\2\u0171\2\0\1\u0173\7\u0171\22\0\21\u0174\3\0\2\u0174"+
    "\2\0\10\u0174\22\0\21\u0175\3\0\2\u0175\2\0\10\u0175"+
    "\22\0\20\u0175\1\u0176\1\102\2\0\2\u0175\2\0\1\u0176"+
    "\7\u0175\22\0\20\u0175\1\u0177\1\102\2\0\2\u0175\2\0"+
    "\1\u0177\7\u0175\22\0\21\u0178\3\0\2\u0178\2\0\10\u0178"+
    "\22\0\21\u0179\3\0\2\u0179\2\0\10\u0179\22\0\20\u0179"+
    "\1\u017a\1\102\2\0\2\u0179\2\0\1\u017a\7\u0179\22\0"+
    "\20\u0179\1\u017b\1\102\2\0\2\u0179\2\0\1\u017b\7\u0179"+
    "\22\0\21\u017c\3\0\2\u017c\2\0\10\u017c\22\0\21\u017d"+
    "\3\0\2\u017d\2\0\10\u017d\22\0\20\u017d\1\u017e\1\102"+
    "\2\0\2\u017d\2\0\1\u017e\7\u017d\22\0\20\u017d\1\u017f"+
    "\1\102\2\0\2\u017d\2\0\1\u017f\7\u017d\22\0\21\u0180"+
    "\3\0\2\u0180\2\0\10\u0180\22\0\21\u0181\3\0\2\u0181"+
    "\2\0\10\u0181\22\0\20\u0181\1\u0182\1\102\2\0\2\u0181"+
    "\2\0\1\u0182\7\u0181\22\0\20\u0181\1\u0183\1\102\2\0"+
    "\2\u0181\2\0\1\u0183\7\u0181\22\0\21\u0184\3\0\2\u0184"+
    "\2\0\10\u0184\22\0\21\u0185\3\0\2\u0185\2\0\10\u0185"+
    "\22\0\20\u0185\1\u0186\1\102\2\0\2\u0185\2\0\1\u0186"+
    "\7\u0185\22\0\20\u0185\1\u0187\1\102\2\0\2\u0185\2\0"+
    "\1\u0187\7\u0185\22\0\21\u0188\3\0\2\u0188\2\0\10\u0188"+
    "\22\0\21\u0189\3\0\2\u0189\2\0\10\u0189\22\0\20\u0189"+
    "\1\u018a\1\102\2\0\2\u0189\2\0\1\u018a\7\u0189\22\0"+
    "\20\u0189\1\u018b\1\102\2\0\2\u0189\2\0\1\u018b\7\u0189"+
    "\22\0\21\u018c\3\0\2\u018c\2\0\10\u018c\22\0\21\u018d"+
    "\3\0\2\u018d\2\0\10\u018d\22\0\20\u018d\1\u018e\1\102"+
    "\2\0\2\u018d\2\0\1\u018e\7\u018d\22\0\20\u018d\1\u018f"+
    "\1\102\2\0\2\u018d\2\0\1\u018f\7\u018d\22\0\21\u0190"+
    "\3\0\2\u0190\2\0\10\u0190\22\0\21\u0191\3\0\2\u0191"+
    "\2\0\10\u0191\22\0\20\u0191\1\u0192\1\102\2\0\2\u0191"+
    "\2\0\1\u0192\7\u0191\22\0\20\u0191\1\u0193\1\102\2\0"+
    "\2\u0191\2\0\1\u0193\7\u0191\22\0\21\u0194\3\0\2\u0194"+
    "\2\0\10\u0194\22\0\21\u0195\3\0\2\u0195\2\0\10\u0195"+
    "\22\0\20\u0195\1\u0196\1\102\2\0\2\u0195\2\0\1\u0196"+
    "\7\u0195\22\0\20\u0195\1\u0197\1\102\2\0\2\u0195\2\0"+
    "\1\u0197\7\u0195\22\0\21\u0198\3\0\2\u0198\2\0\10\u0198"+
    "\22\0\21\u0199\3\0\2\u0199\2\0\10\u0199\22\0\20\u0199"+
    "\1\u019a\1\102\2\0\2\u0199\2\0\1\u019a\7\u0199\22\0"+
    "\20\u0199\1\u019b\1\102\2\0\2\u0199\2\0\1\u019b\7\u0199"+
    "\22\0\21\u019c\3\0\2\u019c\2\0\10\u019c\22\0\21\u019d"+
    "\3\0\2\u019d\2\0\10\u019d\22\0\20\u019d\1\u019e\1\102"+
    "\2\0\2\u019d\2\0\1\u019e\7\u019d\22\0\20\u019d\1\u019f"+
    "\1\102\2\0\2\u019d\2\0\1\u019f\7\u019d\22\0\21\u01a0"+
    "\3\0\2\u01a0\2\0\10\u01a0\22\0\21\u01a1\3\0\2\u01a1"+
    "\2\0\10\u01a1\22\0\20\u01a1\1\u01a2\1\102\2\0\2\u01a1"+
    "\2\0\1\u01a2\7\u01a1\22\0\20\u01a1\1\u01a3\1\102\2\0"+
    "\2\u01a1\2\0\1\u01a3\7\u01a1\22\0\21\u01a4\3\0\2\u01a4"+
    "\2\0\10\u01a4\22\0\21\u01a5\3\0\2\u01a5\2\0\10\u01a5"+
    "\22\0\20\u01a5\1\u01a6\1\102\2\0\2\u01a5\2\0\1\u01a6"+
    "\7\u01a5\22\0\20\u01a5\1\u01a7\1\102\2\0\2\u01a5\2\0"+
    "\1\u01a7\7\u01a5\22\0\21\u01a8\3\0\2\u01a8\2\0\10\u01a8"+
    "\22\0\21\u01a9\3\0\2\u01a9\2\0\10\u01a9\22\0\20\u01a9"+
    "\1\u01aa\1\102\2\0\2\u01a9\2\0\1\u01aa\7\u01a9\22\0"+
    "\20\u01a9\1\u01ab\1\102\2\0\2\u01a9\2\0\1\u01ab\7\u01a9"+
    "\22\0\21\u01ac\3\0\2\u01ac\2\0\10\u01ac\22\0\21\u01ad"+
    "\3\0\2\u01ad\2\0\10\u01ad\22\0\20\u01ad\1\u01ae\1\102"+
    "\2\0\2\u01ad\2\0\1\u01ae\7\u01ad\22\0\20\u01ad\1\u01af"+
    "\1\102\2\0\2\u01ad\2\0\1\u01af\7\u01ad\22\0\21\u01b0"+
    "\3\0\2\u01b0\2\0\10\u01b0\22\0\21\u01b1\3\0\2\u01b1"+
    "\2\0\10\u01b1\22\0\20\u01b1\1\u01b2\1\102\2\0\2\u01b1"+
    "\2\0\1\u01b2\7\u01b1\22\0\20\u01b1\1\u01b3\1\102\2\0"+
    "\2\u01b1\2\0\1\u01b3\7\u01b1\22\0\21\u01b4\3\0\2\u01b4"+
    "\2\0\10\u01b4\22\0\21\u01b5\3\0\2\u01b5\2\0\10\u01b5"+
    "\22\0\20\u01b5\1\u01b6\1\102\2\0\2\u01b5\2\0\1\u01b6"+
    "\7\u01b5\22\0\20\u01b5\1\u01b7\1\102\2\0\2\u01b5\2\0"+
    "\1\u01b7\7\u01b5\22\0\21\u01b8\3\0\2\u01b8\2\0\10\u01b8"+
    "\22\0\21\u01b9\3\0\2\u01b9\2\0\10\u01b9\22\0\20\u01b9"+
    "\1\u01ba\1\102\2\0\2\u01b9\2\0\1\u01ba\7\u01b9\22\0"+
    "\20\u01b9\1\u01bb\1\102\2\0\2\u01b9\2\0\1\u01bb\7\u01b9"+
    "\22\0\21\u01bc\3\0\2\u01bc\2\0\10\u01bc\22\0\21\u01bd"+
    "\3\0\2\u01bd\2\0\10\u01bd\22\0\20\u01bd\1\u01be\1\102"+
    "\2\0\2\u01bd\2\0\1\u01be\7\u01bd\22\0\20\u01bd\1\u01bf"+
    "\1\102\2\0\2\u01bd\2\0\1\u01bf\7\u01bd\22\0\21\u01c0"+
    "\3\0\2\u01c0\2\0\10\u01c0\22\0\21\u01c1\3\0\2\u01c1"+
    "\2\0\10\u01c1\22\0\20\u01c1\1\u01c2\1\102\2\0\2\u01c1"+
    "\2\0\1\u01c2\7\u01c1\22\0\20\u01c1\1\u01c3\1\102\2\0"+
    "\2\u01c1\2\0\1\u01c3\7\u01c1\22\0\21\u01c4\3\0\2\u01c4"+
    "\2\0\10\u01c4\22\0\21\u01c5\3\0\2\u01c5\2\0\10\u01c5"+
    "\22\0\20\u01c5\1\u01c6\1\102\2\0\2\u01c5\2\0\1\u01c6"+
    "\7\u01c5\22\0\20\u01c5\1\u01c7\1\102\2\0\2\u01c5\2\0"+
    "\1\u01c7\7\u01c5\22\0\21\u01c8\3\0\2\u01c8\2\0\10\u01c8"+
    "\22\0\21\u01c9\3\0\2\u01c9\2\0\10\u01c9\22\0\20\u01c9"+
    "\1\u01ca\1\102\2\0\2\u01c9\2\0\1\u01ca\7\u01c9\22\0"+
    "\20\u01c9\1\u01cb\1\102\2\0\2\u01c9\2\0\1\u01cb\7\u01c9"+
    "\22\0\21\u01cc\3\0\2\u01cc\2\0\10\u01cc\22\0\21\u01cd"+
    "\3\0\2\u01cd\2\0\10\u01cd\22\0\20\u01cd\1\u01ce\1\102"+
    "\2\0\2\u01cd\2\0\1\u01ce\7\u01cd\22\0\20\u01cd\1\u01cf"+
    "\1\102\2\0\2\u01cd\2\0\1\u01cf\7\u01cd\22\0\21\u01d0"+
    "\3\0\2\u01d0\2\0\10\u01d0\22\0\21\u01d1\3\0\2\u01d1"+
    "\2\0\10\u01d1\22\0\20\u01d1\1\u01d2\1\102\2\0\2\u01d1"+
    "\2\0\1\u01d2\7\u01d1\22\0\20\u01d1\1\u01d3\1\102\2\0"+
    "\2\u01d1\2\0\1\u01d3\7\u01d1\22\0\21\u01d4\3\0\2\u01d4"+
    "\2\0\10\u01d4\22\0\21\u01d5\3\0\2\u01d5\2\0\10\u01d5"+
    "\22\0\20\u01d5\1\u01d6\1\102\2\0\2\u01d5\2\0\1\u01d6"+
    "\7\u01d5\22\0\20\u01d5\1\u01d7\1\102\2\0\2\u01d5\2\0"+
    "\1\u01d7\7\u01d5\22\0\21\u01d8\3\0\2\u01d8\2\0\10\u01d8"+
    "\22\0\21\u01d9\3\0\2\u01d9\2\0\10\u01d9\22\0\20\u01d9"+
    "\1\u01da\1\102\2\0\2\u01d9\2\0\1\u01da\7\u01d9\22\0"+
    "\20\u01d9\1\u01db\1\102\2\0\2\u01d9\2\0\1\u01db\7\u01d9"+
    "\22\0\21\u01dc\3\0\2\u01dc\2\0\10\u01dc\22\0\21\u01dd"+
    "\3\0\2\u01dd\2\0\10\u01dd\22\0\20\u01dd\1\u01de\1\102"+
    "\2\0\2\u01dd\2\0\1\u01de\7\u01dd\22\0\20\u01dd\1\u01df"+
    "\1\102\2\0\2\u01dd\2\0\1\u01df\7\u01dd\22\0\21\u01e0"+
    "\3\0\2\u01e0\2\0\10\u01e0\22\0\21\u01e1\3\0\2\u01e1"+
    "\2\0\10\u01e1\22\0\20\u01e1\1\u01e2\1\102\2\0\2\u01e1"+
    "\2\0\1\u01e2\7\u01e1\22\0\20\u01e1\1\u01e3\1\102\2\0"+
    "\2\u01e1\2\0\1\u01e3\7\u01e1\22\0\21\u01e4\3\0\2\u01e4"+
    "\2\0\10\u01e4\22\0\21\u01e5\3\0\2\u01e5\2\0\10\u01e5"+
    "\22\0\20\u01e5\1\u01e6\1\102\2\0\2\u01e5\2\0\1\u01e6"+
    "\7\u01e5\22\0\20\u01e5\1\u01e7\1\102\2\0\2\u01e5\2\0"+
    "\1\u01e7\7\u01e5\22\0\21\u01e8\3\0\2\u01e8\2\0\10\u01e8"+
    "\22\0\21\u01e9\3\0\2\u01e9\2\0\10\u01e9\22\0\20\u01e9"+
    "\1\u01ea\1\102\2\0\2\u01e9\2\0\1\u01ea\7\u01e9\22\0"+
    "\20\u01e9\1\u01eb\1\102\2\0\2\u01e9\2\0\1\u01eb\7\u01e9"+
    "\22\0\21\u01ec\3\0\2\u01ec\2\0\10\u01ec\22\0\21\u01ed"+
    "\3\0\2\u01ed\2\0\10\u01ed\22\0\20\u01ed\1\u01ee\1\102"+
    "\2\0\2\u01ed\2\0\1\u01ee\7\u01ed\22\0\20\u01ed\1\u01ef"+
    "\1\102\2\0\2\u01ed\2\0\1\u01ef\7\u01ed\22\0\21\u01f0"+
    "\3\0\2\u01f0\2\0\10\u01f0\22\0\21\u01f1\3\0\2\u01f1"+
    "\2\0\10\u01f1\22\0\20\u01f1\1\u01f2\1\102\2\0\2\u01f1"+
    "\2\0\1\u01f2\7\u01f1\22\0\20\u01f1\1\u01f3\1\102\2\0"+
    "\2\u01f1\2\0\1\u01f3\7\u01f1\22\0\21\u01f4\3\0\2\u01f4"+
    "\2\0\10\u01f4\22\0\21\u01f5\3\0\2\u01f5\2\0\10\u01f5"+
    "\22\0\20\u01f5\1\u01f6\1\102\2\0\2\u01f5\2\0\1\u01f6"+
    "\7\u01f5\22\0\20\u01f5\1\u01f7\1\102\2\0\2\u01f5\2\0"+
    "\1\u01f7\7\u01f5\22\0\21\u01f8\3\0\2\u01f8\2\0\10\u01f8"+
    "\22\0\21\u01f9\3\0\2\u01f9\2\0\10\u01f9\22\0\20\u01f9"+
    "\1\u01fa\1\102\2\0\2\u01f9\2\0\1\u01fa\7\u01f9\22\0"+
    "\20\u01f9\1\u01fb\1\102\2\0\2\u01f9\2\0\1\u01fb\7\u01f9"+
    "\22\0\21\u01fc\3\0\2\u01fc\2\0\10\u01fc\22\0\21\u01fd"+
    "\3\0\2\u01fd\2\0\10\u01fd\22\0\20\u01fd\1\u01fe\1\102"+
    "\2\0\2\u01fd\2\0\1\u01fe\7\u01fd\22\0\20\u01fd\1\u01ff"+
    "\1\102\2\0\2\u01fd\2\0\1\u01ff\7\u01fd\22\0\21\u0200"+
    "\3\0\2\u0200\2\0\10\u0200\22\0\21\u0201\3\0\2\u0201"+
    "\2\0\10\u0201\22\0\20\u0201\1\u0202\1\102\2\0\2\u0201"+
    "\2\0\1\u0202\7\u0201\22\0\20\u0201\1\u0203\1\102\2\0"+
    "\2\u0201\2\0\1\u0203\7\u0201\22\0\21\u0204\3\0\2\u0204"+
    "\2\0\10\u0204\22\0\21\u0205\3\0\2\u0205\2\0\10\u0205"+
    "\22\0\20\u0205\1\u0206\1\102\2\0\2\u0205\2\0\1\u0206"+
    "\7\u0205\22\0\20\u0205\1\u0207\1\102\2\0\2\u0205\2\0"+
    "\1\u0207\7\u0205\22\0\21\u0208\3\0\2\u0208\2\0\10\u0208"+
    "\22\0\21\u0209\3\0\2\u0209\2\0\10\u0209\22\0\20\u0209"+
    "\1\u020a\1\102\2\0\2\u0209\2\0\1\u020a\7\u0209\22\0"+
    "\20\u0209\1\u020b\1\102\2\0\2\u0209\2\0\1\u020b\7\u0209"+
    "\22\0\21\u020c\3\0\2\u020c\2\0\10\u020c\22\0\21\u020d"+
    "\3\0\2\u020d\2\0\10\u020d\22\0\20\u020d\1\u020e\1\102"+
    "\2\0\2\u020d\2\0\1\u020e\7\u020d\22\0\20\u020d\1\u020f"+
    "\1\102\2\0\2\u020d\2\0\1\u020f\7\u020d\22\0\21\u0210"+
    "\3\0\2\u0210\2\0\10\u0210\22\0\21\u0211\3\0\2\u0211"+
    "\2\0\10\u0211\22\0\20\u0211\1\u0212\1\102\2\0\2\u0211"+
    "\2\0\1\u0212\7\u0211\22\0\20\u0211\1\u0213\1\102\2\0"+
    "\2\u0211\2\0\1\u0213\7\u0211\22\0\21\u0214\3\0\2\u0214"+
    "\2\0\10\u0214\22\0\21\u0215\3\0\2\u0215\2\0\10\u0215"+
    "\22\0\20\u0215\1\u0216\1\102\2\0\2\u0215\2\0\1\u0216"+
    "\7\u0215\22\0\20\u0215\1\u0217\1\102\2\0\2\u0215\2\0"+
    "\1\u0217\7\u0215\22\0\21\u0218\3\0\2\u0218\2\0\10\u0218"+
    "\22\0\21\u0219\3\0\2\u0219\2\0\10\u0219\22\0\20\u0219"+
    "\1\u021a\1\102\2\0\2\u0219\2\0\1\u021a\7\u0219\22\0"+
    "\20\u0219\1\u021b\1\102\2\0\2\u0219\2\0\1\u021b\7\u0219"+
    "\22\0\21\u021c\3\0\2\u021c\2\0\10\u021c\22\0\21\u021d"+
    "\3\0\2\u021d\2\0\10\u021d\22\0\20\u021d\1\u021e\1\102"+
    "\2\0\2\u021d\2\0\1\u021e\7\u021d\22\0\20\u021d\1\u021f"+
    "\1\102\2\0\2\u021d\2\0\1\u021f\7\u021d\22\0\21\u0220"+
    "\3\0\2\u0220\2\0\10\u0220\22\0\21\u0221\3\0\2\u0221"+
    "\2\0\10\u0221\22\0\20\u0221\1\u0222\1\102\2\0\2\u0221"+
    "\2\0\1\u0222\7\u0221\22\0\20\u0221\1\u0223\1\102\2\0"+
    "\2\u0221\2\0\1\u0223\7\u0221\22\0\21\u0224\3\0\2\u0224"+
    "\2\0\10\u0224\22\0\21\u0225\3\0\2\u0225\2\0\10\u0225"+
    "\22\0\20\u0225\1\u0226\1\102\2\0\2\u0225\2\0\1\u0226"+
    "\7\u0225\22\0\20\u0225\1\u0227\1\102\2\0\2\u0225\2\0"+
    "\1\u0227\7\u0225\22\0\21\u0228\3\0\2\u0228\2\0\10\u0228"+
    "\22\0\21\u0229\3\0\2\u0229\2\0\10\u0229\22\0\20\u0229"+
    "\1\u022a\1\102\2\0\2\u0229\2\0\1\u022a\7\u0229\22\0"+
    "\20\u0229\1\u022b\1\102\2\0\2\u0229\2\0\1\u022b\7\u0229"+
    "\22\0\21\u022c\3\0\2\u022c\2\0\10\u022c\22\0\21\u022d"+
    "\3\0\2\u022d\2\0\10\u022d\22\0\20\u022d\1\u022e\1\102"+
    "\2\0\2\u022d\2\0\1\u022e\7\u022d\22\0\20\u022d\1\u022f"+
    "\1\102\2\0\2\u022d\2\0\1\u022f\7\u022d\22\0\21\u0230"+
    "\3\0\2\u0230\2\0\10\u0230\22\0\21\u0231\3\0\2\u0231"+
    "\2\0\10\u0231\22\0\20\u0231\1\u0232\1\102\2\0\2\u0231"+
    "\2\0\1\u0232\7\u0231\22\0\20\u0231\1\u0233\1\102\2\0"+
    "\2\u0231\2\0\1\u0233\7\u0231\22\0\21\u0234\3\0\2\u0234"+
    "\2\0\10\u0234\22\0\21\u0235\3\0\2\u0235\2\0\10\u0235"+
    "\22\0\20\u0235\1\u0236\1\102\2\0\2\u0235\2\0\1\u0236"+
    "\7\u0235\22\0\20\u0235\1\u0237\1\102\2\0\2\u0235\2\0"+
    "\1\u0237\7\u0235\22\0\21\u0238\3\0\2\u0238\2\0\10\u0238"+
    "\22\0\21\u0239\3\0\2\u0239\2\0\10\u0239\22\0\20\u0239"+
    "\1\u023a\1\102\2\0\2\u0239\2\0\1\u023a\7\u0239\22\0"+
    "\20\u0239\1\u023b\1\102\2\0\2\u0239\2\0\1\u023b\7\u0239"+
    "\22\0\21\u023c\3\0\2\u023c\2\0\10\u023c\22\0\21\u023d"+
    "\3\0\2\u023d\2\0\10\u023d\22\0\20\u023d\1\u023e\1\102"+
    "\2\0\2\u023d\2\0\1\u023e\7\u023d\22\0\20\u023d\1\u023f"+
    "\1\102\2\0\2\u023d\2\0\1\u023f\7\u023d\22\0\21\u0240"+
    "\3\0\2\u0240\2\0\10\u0240\22\0\21\u0241\3\0\2\u0241"+
    "\2\0\10\u0241\22\0\20\u0241\1\u0242\1\102\2\0\2\u0241"+
    "\2\0\1\u0242\7\u0241\22\0\20\u0241\1\u0243\1\102\2\0"+
    "\2\u0241\2\0\1\u0243\7\u0241\22\0\21\u0244\3\0\2\u0244"+
    "\2\0\10\u0244\22\0\21\u0245\3\0\2\u0245\2\0\10\u0245"+
    "\22\0\20\u0245\1\u0246\1\102\2\0\2\u0245\2\0\1\u0246"+
    "\7\u0245\22\0\20\u0245\1\u0247\1\102\2\0\2\u0245\2\0"+
    "\1\u0247\7\u0245\22\0\21\u0248\3\0\2\u0248\2\0\10\u0248"+
    "\22\0\21\u0249\3\0\2\u0249\2\0\10\u0249\22\0\20\u0249"+
    "\1\u024a\1\102\2\0\2\u0249\2\0\1\u024a\7\u0249\22\0"+
    "\20\u0249\1\u024b\1\102\2\0\2\u0249\2\0\1\u024b\7\u0249"+
    "\22\0\21\u024c\3\0\2\u024c\2\0\10\u024c\22\0\21\u024d"+
    "\3\0\2\u024d\2\0\10\u024d\22\0\20\u024d\1\u024e\1\102"+
    "\2\0\2\u024d\2\0\1\u024e\7\u024d\22\0\20\u024d\1\u024f"+
    "\1\102\2\0\2\u024d\2\0\1\u024f\7\u024d\22\0\21\u0250"+
    "\3\0\2\u0250\2\0\10\u0250\22\0\21\u0251\3\0\2\u0251"+
    "\2\0\10\u0251\22\0\20\u0251\1\u0252\1\102\2\0\2\u0251"+
    "\2\0\1\u0252\7\u0251\22\0\20\u0251\1\u0253\1\102\2\0"+
    "\2\u0251\2\0\1\u0253\7\u0251\22\0\21\u0254\3\0\2\u0254"+
    "\2\0\10\u0254\22\0\21\u0255\3\0\2\u0255\2\0\10\u0255"+
    "\22\0\20\u0255\1\u0256\1\102\2\0\2\u0255\2\0\1\u0256"+
    "\7\u0255\22\0\20\u0255\1\u0257\1\102\2\0\2\u0255\2\0"+
    "\1\u0257\7\u0255\22\0\21\u0258\3\0\2\u0258\2\0\10\u0258"+
    "\22\0\21\u0259\3\0\2\u0259\2\0\10\u0259\22\0\20\u0259"+
    "\1\u025a\1\102\2\0\2\u0259\2\0\1\u025a\7\u0259\22\0"+
    "\20\u0259\1\u025b\1\102\2\0\2\u0259\2\0\1\u025b\7\u0259"+
    "\22\0\21\u025c\3\0\2\u025c\2\0\10\u025c\22\0\21\u025d"+
    "\3\0\2\u025d\2\0\10\u025d\22\0\20\u025d\1\u025e\1\102"+
    "\2\0\2\u025d\2\0\1\u025e\7\u025d\22\0\20\u025d\1\u025f"+
    "\1\102\2\0\2\u025d\2\0\1\u025f\7\u025d\22\0\21\u0260"+
    "\3\0\2\u0260\2\0\10\u0260\22\0\21\u0261\3\0\2\u0261"+
    "\2\0\10\u0261\22\0\20\u0261\1\u0262\1\102\2\0\2\u0261"+
    "\2\0\1\u0262\7\u0261\22\0\20\u0261\1\u0263\1\102\2\0"+
    "\2\u0261\2\0\1\u0263\7\u0261\22\0\21\u0264\3\0\2\u0264"+
    "\2\0\10\u0264\22\0\21\u0265\3\0\2\u0265\2\0\10\u0265"+
    "\22\0\20\u0265\1\u0266\1\102\2\0\2\u0265\2\0\1\u0266"+
    "\7\u0265\22\0\20\u0265\1\u0267\1\102\2\0\2\u0265\2\0"+
    "\1\u0267\7\u0265\22\0\21\u0268\3\0\2\u0268\2\0\10\u0268"+
    "\22\0\21\u0269\3\0\2\u0269\2\0\10\u0269\22\0\20\u0269"+
    "\1\u026a\1\102\2\0\2\u0269\2\0\1\u026a\7\u0269\22\0"+
    "\20\u0269\1\u026b\1\102\2\0\2\u0269\2\0\1\u026b\7\u0269"+
    "\22\0\21\u026c\3\0\2\u026c\2\0\10\u026c\22\0\21\u026d"+
    "\3\0\2\u026d\2\0\10\u026d\22\0\20\u026d\1\u026e\1\102"+
    "\2\0\2\u026d\2\0\1\u026e\7\u026d\22\0\20\u026d\1\u026f"+
    "\1\102\2\0\2\u026d\2\0\1\u026f\7\u026d\22\0\21\u0270"+
    "\3\0\2\u0270\2\0\10\u0270\22\0\21\u0271\3\0\2\u0271"+
    "\2\0\10\u0271\22\0\20\u0271\1\u0272\1\102\2\0\2\u0271"+
    "\2\0\1\u0272\7\u0271\22\0\20\u0271\1\u0273\1\102\2\0"+
    "\2\u0271\2\0\1\u0273\7\u0271\22\0\21\u0274\3\0\2\u0274"+
    "\2\0\10\u0274\22\0\21\u0275\3\0\2\u0275\2\0\10\u0275"+
    "\22\0\20\u0275\1\u0276\1\102\2\0\2\u0275\2\0\1\u0276"+
    "\7\u0275\22\0\20\u0275\1\u0277\1\102\2\0\2\u0275\2\0"+
    "\1\u0277\7\u0275\22\0\21\u0278\3\0\2\u0278\2\0\10\u0278"+
    "\22\0\21\u0279\3\0\2\u0279\2\0\10\u0279\22\0\20\u0279"+
    "\1\u027a\1\102\2\0\2\u0279\2\0\1\u027a\7\u0279\22\0"+
    "\20\u0279\1\u027b\1\102\2\0\2\u0279\2\0\1\u027b\7\u0279"+
    "\22\0\21\u027c\3\0\2\u027c\2\0\10\u027c\22\0\21\u027d"+
    "\3\0\2\u027d\2\0\10\u027d\22\0\20\u027d\1\u027e\1\102"+
    "\2\0\2\u027d\2\0\1\u027e\7\u027d\22\0\20\u027d\1\u027f"+
    "\1\102\2\0\2\u027d\2\0\1\u027f\7\u027d\22\0\21\u0280"+
    "\3\0\2\u0280\2\0\10\u0280\22\0\21\u0281\3\0\2\u0281"+
    "\2\0\10\u0281\22\0\20\u0281\1\u0282\1\102\2\0\2\u0281"+
    "\2\0\1\u0282\7\u0281\22\0\20\u0281\1\u0283\1\102\2\0"+
    "\2\u0281\2\0\1\u0283\7\u0281\22\0\21\u0284\3\0\2\u0284"+
    "\2\0\10\u0284\22\0\21\u0285\3\0\2\u0285\2\0\10\u0285"+
    "\22\0\20\u0285\1\u0286\1\102\2\0\2\u0285\2\0\1\u0286"+
    "\7\u0285\22\0\20\u0285\1\u0287\1\102\2\0\2\u0285\2\0"+
    "\1\u0287\7\u0285\22\0\21\u0288\3\0\2\u0288\2\0\10\u0288"+
    "\22\0\21\u0289\3\0\2\u0289\2\0\10\u0289\22\0\20\u0289"+
    "\1\u028a\1\102\2\0\2\u0289\2\0\1\u028a\7\u0289\22\0"+
    "\20\u0289\1\u028b\1\102\2\0\2\u0289\2\0\1\u028b\7\u0289"+
    "\22\0\21\u028c\3\0\2\u028c\2\0\10\u028c\22\0\21\u028d"+
    "\3\0\2\u028d\2\0\10\u028d\22\0\20\u028d\1\u028e\1\102"+
    "\2\0\2\u028d\2\0\1\u028e\7\u028d\22\0\20\u028d\1\u028f"+
    "\1\102\2\0\2\u028d\2\0\1\u028f\7\u028d\22\0\21\u0290"+
    "\3\0\2\u0290\2\0\10\u0290\22\0\21\u0291\3\0\2\u0291"+
    "\2\0\10\u0291\22\0\20\u0291\1\u0292\1\102\2\0\2\u0291"+
    "\2\0\1\u0292\7\u0291\22\0\20\u0291\1\u0293\1\102\2\0"+
    "\2\u0291\2\0\1\u0293\7\u0291\22\0\21\u0294\3\0\2\u0294"+
    "\2\0\10\u0294\22\0\21\u0295\3\0\2\u0295\2\0\10\u0295"+
    "\22\0\20\u0295\1\u0296\1\102\2\0\2\u0295\2\0\1\u0296"+
    "\7\u0295\22\0\20\u0295\1\u0297\1\102\2\0\2\u0295\2\0"+
    "\1\u0297\7\u0295\22\0\21\u0298\3\0\2\u0298\2\0\10\u0298"+
    "\22\0\21\u0299\3\0\2\u0299\2\0\10\u0299\22\0\20\u0299"+
    "\1\u029a\1\102\2\0\2\u0299\2\0\1\u029a\7\u0299\22\0"+
    "\20\u0299\1\u029b\1\102\2\0\2\u0299\2\0\1\u029b\7\u0299"+
    "\22\0\21\u029c\3\0\2\u029c\2\0\10\u029c\22\0\21\2"+
    "\3\0\2\2\2\0\10\2\22\0\20\2\1\u029d\1\102"+
    "\2\0\2\2\2\0\1\u029d\7\2\22\0\20\2\1\u029e"+
    "\1\102\2\0\2\2\2\0\1\u029e\7\2\22\0\21\u029f"+
    "\3\0\2\u029f\2\0\10\u029f\42\0\1\u029d\1\102\6\0"+
    "\1\u029d\51\0\1\u02a0\1\102\6\0\1\u02a0\31\0\21\u02a1"+
    "\3\0\2\u02a1\2\0\10\u02a1\22\0\21\u02a2\3\0\2\u02a2"+
    "\2\0\10\u02a2\22\0\21\u02a3\3\0\2\u02a3\2\0\10\u02a3"+
    "\22\0\21\u02a4\3\0\2\u02a4\2\0\10\u02a4\22\0\21\u02a5"+
    "\3\0\2\u02a5\2\0\10\u02a5\22\0\21\u02a6\3\0\2\u02a6"+
    "\2\0\10\u02a6\22\0\21\u02a7\3\0\2\u02a7\2\0\10\u02a7"+
    "\22\0\21\u02a8\3\0\2\u02a8\2\0\10\u02a8\22\0\21\u02a9"+
    "\3\0\2\u02a9\2\0\10\u02a9\22\0\21\u02aa\3\0\2\u02aa"+
    "\2\0\10\u02aa\22\0\21\u02ab\3\0\2\u02ab\2\0\10\u02ab"+
    "\22\0\21\u02ac\3\0\2\u02ac\2\0\10\u02ac\22\0\21\u02ad"+
    "\3\0\2\u02ad\2\0\10\u02ad\22\0\21\u02ae\3\0\2\u02ae"+
    "\2\0\10\u02ae\22\0\21\u02af\3\0\2\u02af\2\0\10\u02af"+
    "\22\0\21\u02b0\3\0\2\u02b0\2\0\10\u02b0\22\0\21\u02b1"+
    "\3\0\2\u02b1\2\0\10\u02b1\22\0\21\u02b2\3\0\2\u02b2"+
    "\2\0\10\u02b2\22\0\21\u02b3\3\0\2\u02b3\2\0\10\u02b3"+
    "\22\0\21\u02b4\3\0\2\u02b4\2\0\10\u02b4\22\0\21\u02b5"+
    "\3\0\2\u02b5\2\0\10\u02b5\22\0\21\u02b6\3\0\2\u02b6"+
    "\2\0\10\u02b6\22\0\21\u02b7\3\0\2\u02b7\2\0\10\u02b7"+
    "\22\0\21\u02b8\3\0\2\u02b8\2\0\10\u02b8\22\0\21\u02b9"+
    "\3\0\2\u02b9\2\0\10\u02b9\22\0\21\u02ba\3\0\2\u02ba"+
    "\2\0\10\u02ba\22\0\21\u02bb\3\0\2\u02bb\2\0\10\u02bb"+
    "\22\0\21\u02bc\3\0\2\u02bc\2\0\10\u02bc\22\0\21\u02bd"+
    "\3\0\2\u02bd\2\0\10\u02bd\22\0\21\u02be\3\0\2\u02be"+
    "\2\0\10\u02be\22\0\21\u02bf\3\0\2\u02bf\2\0\10\u02bf"+
    "\22\0\21\u02c0\3\0\2\u02c0\2\0\10\u02c0\22\0\21\u02c1"+
    "\3\0\2\u02c1\2\0\10\u02c1\22\0\21\u02c2\3\0\2\u02c2"+
    "\2\0\10\u02c2\22\0\21\u02c3\3\0\2\u02c3\2\0\10\u02c3"+
    "\22\0\21\u02c4\3\0\2\u02c4\2\0\10\u02c4\22\0\21\u02c5"+
    "\3\0\2\u02c5\2\0\10\u02c5\22\0\21\u02c6\3\0\2\u02c6"+
    "\2\0\10\u02c6\22\0\21\u02c7\3\0\2\u02c7\2\0\10\u02c7"+
    "\22\0\21\u02c8\3\0\2\u02c8\2\0\10\u02c8\22\0\21\u02c9"+
    "\3\0\2\u02c9\2\0\10\u02c9\22\0\21\u02ca\3\0\2\u02ca"+
    "\2\0\10\u02ca\22\0\21\u02cb\3\0\2\u02cb\2\0\10\u02cb"+
    "\22\0\21\u02cc\3\0\2\u02cc\2\0\10\u02cc\22\0\21\u02cd"+
    "\3\0\2\u02cd\2\0\10\u02cd\22\0\21\u02ce\3\0\2\u02ce"+
    "\2\0\10\u02ce\22\0\21\u02cf\3\0\2\u02cf\2\0\10\u02cf"+
    "\22\0\21\u02d0\3\0\2\u02d0\2\0\10\u02d0\22\0\21\u02d1"+
    "\3\0\2\u02d1\2\0\10\u02d1\22\0\21\u02d2\3\0\2\u02d2"+
    "\2\0\10\u02d2\22\0\21\u02d3\3\0\2\u02d3\2\0\10\u02d3"+
    "\22\0\21\u02d4\3\0\2\u02d4\2\0\10\u02d4\22\0\21\u02d5"+
    "\3\0\2\u02d5\2\0\10\u02d5\22\0\21\u02d6\3\0\2\u02d6"+
    "\2\0\10\u02d6\22\0\21\u02d7\3\0\2\u02d7\2\0\10\u02d7"+
    "\22\0\21\u02d8\3\0\2\u02d8\2\0\10\u02d8\22\0\21\u02d9"+
    "\3\0\2\u02d9\2\0\10\u02d9\22\0\21\u02da\3\0\2\u02da"+
    "\2\0\10\u02da\22\0\21\u02db\3\0\2\u02db\2\0\10\u02db"+
    "\22\0\21\u02dc\3\0\2\u02dc\2\0\10\u02dc\22\0\21\u02dd"+
    "\3\0\2\u02dd\2\0\10\u02dd\22\0\21\u02de\3\0\2\u02de"+
    "\2\0\10\u02de\22\0\21\u02df\3\0\2\u02df\2\0\10\u02df"+
    "\22\0\21\u02e0\3\0\2\u02e0\2\0\10\u02e0\22\0\21\u02e1"+
    "\3\0\2\u02e1\2\0\10\u02e1\22\0\21\u02e2\3\0\2\u02e2"+
    "\2\0\10\u02e2\22\0\21\u02e3\3\0\2\u02e3\2\0\10\u02e3"+
    "\22\0\21\u02e4\3\0\2\u02e4\2\0\10\u02e4\22\0\21\u02e5"+
    "\3\0\2\u02e5\2\0\10\u02e5\22\0\21\u02e6\3\0\2\u02e6"+
    "\2\0\10\u02e6\22\0\21\u02e7\3\0\2\u02e7\2\0\10\u02e7"+
    "\22\0\21\u02e8\3\0\2\u02e8\2\0\10\u02e8\22\0\21\u02e9"+
    "\3\0\2\u02e9\2\0\10\u02e9\22\0\21\u02ea\3\0\2\u02ea"+
    "\2\0\10\u02ea\22\0\21\u02eb\3\0\2\u02eb\2\0\10\u02eb"+
    "\22\0\21\u02ec\3\0\2\u02ec\2\0\10\u02ec\22\0\21\u02ed"+
    "\3\0\2\u02ed\2\0\10\u02ed\22\0\21\u02ee\3\0\2\u02ee"+
    "\2\0\10\u02ee\22\0\21\u02ef\3\0\2\u02ef\2\0\10\u02ef"+
    "\22\0\21\u02f0\3\0\2\u02f0\2\0\10\u02f0\22\0\21\u02f1"+
    "\3\0\2\u02f1\2\0\10\u02f1\22\0\21\u02f2\3\0\2\u02f2"+
    "\2\0\10\u02f2\22\0\21\u02f3\3\0\2\u02f3\2\0\10\u02f3"+
    "\22\0\21\u02f4\3\0\2\u02f4\2\0\10\u02f4\22\0\21\u02f5"+
    "\3\0\2\u02f5\2\0\10\u02f5\22\0\21\u02f6\3\0\2\u02f6"+
    "\2\0\10\u02f6\22\0\21\u02f7\3\0\2\u02f7\2\0\10\u02f7"+
    "\22\0\21\u02f8\3\0\2\u02f8\2\0\10\u02f8\22\0\21\u02f9"+
    "\3\0\2\u02f9\2\0\10\u02f9\22\0\21\u02fa\3\0\2\u02fa"+
    "\2\0\10\u02fa\22\0\21\u02fb\3\0\2\u02fb\2\0\10\u02fb"+
    "\22\0\21\u02fc\3\0\2\u02fc\2\0\10\u02fc\22\0\21\u02fd"+
    "\3\0\2\u02fd\2\0\10\u02fd\22\0\21\u02fe\3\0\2\u02fe"+
    "\2\0\10\u02fe\22\0\21\u02ff\3\0\2\u02ff\2\0\10\u02ff"+
    "\22\0\21\u0300\3\0\2\u0300\2\0\10\u0300\22\0\21\u0301"+
    "\3\0\2\u0301\2\0\10\u0301\22\0\21\u0302\3\0\2\u0302"+
    "\2\0\10\u0302\22\0\21\u0303\3\0\2\u0303\2\0\10\u0303"+
    "\22\0\21\u0304\3\0\2\u0304\2\0\10\u0304\22\0\21\u0305"+
    "\3\0\2\u0305\2\0\10\u0305\22\0\21\u0306\3\0\2\u0306"+
    "\2\0\10\u0306\22\0\21\u0307\3\0\2\u0307\2\0\10\u0307"+
    "\22\0\21\u0308\3\0\2\u0308\2\0\10\u0308\22\0\21\u0309"+
    "\3\0\2\u0309\2\0\10\u0309\22\0\21\u030a\3\0\2\u030a"+
    "\2\0\10\u030a\22\0\21\u030b\3\0\2\u030b\2\0\10\u030b"+
    "\22\0\21\u030c\3\0\2\u030c\2\0\10\u030c\22\0\21\u030d"+
    "\3\0\2\u030d\2\0\10\u030d\22\0\21\u030e\3\0\2\u030e"+
    "\2\0\10\u030e\22\0\21\u030f\3\0\2\u030f\2\0\10\u030f"+
    "\22\0\21\u0310\3\0\2\u0310\2\0\10\u0310\22\0\21\u0311"+
    "\3\0\2\u0311\2\0\10\u0311\22\0\21\u0312\3\0\2\u0312"+
    "\2\0\10\u0312\22\0\21\u0313\3\0\2\u0313\2\0\10\u0313"+
    "\22\0\21\u0314\3\0\2\u0314\2\0\10\u0314\22\0\21\u0315"+
    "\3\0\2\u0315\2\0\10\u0315\22\0\21\u0316\3\0\2\u0316"+
    "\2\0\10\u0316\22\0\21\u0317\3\0\2\u0317\2\0\10\u0317"+
    "\22\0\21\u0318\3\0\2\u0318\2\0\10\u0318\22\0\21\u0319"+
    "\3\0\2\u0319\2\0\10\u0319\22\0\21\u031a\3\0\2\u031a"+
    "\2\0\10\u031a\22\0\21\u031b\3\0\2\u031b\2\0\10\u031b"+
    "\22\0\21\u031c\3\0\2\u031c\2\0\10\u031c\22\0\21\u031d"+
    "\3\0\2\u031d\2\0\10\u031d\22\0\21\u031e\3\0\2\u031e"+
    "\2\0\10\u031e\22\0\21\u031f\3\0\2\u031f\2\0\10\u031f"+
    "\22\0\21\u0320\3\0\2\u0320\2\0\10\u0320\22\0\21\u0321"+
    "\3\0\2\u0321\2\0\10\u0321\22\0\21\u0322\3\0\2\u0322"+
    "\2\0\10\u0322\22\0\21\u0323\3\0\2\u0323\2\0\10\u0323"+
    "\22\0\21\u0324\3\0\2\u0324\2\0\10\u0324\22\0\21\u0325"+
    "\3\0\2\u0325\2\0\10\u0325\22\0\21\u0326\3\0\2\u0326"+
    "\2\0\10\u0326\22\0\21\u0327\3\0\2\u0327\2\0\10\u0327"+
    "\22\0\21\u0328\3\0\2\u0328\2\0\10\u0328\22\0\21\u0329"+
    "\3\0\2\u0329\2\0\10\u0329\22\0\21\u032a\3\0\2\u032a"+
    "\2\0\10\u032a\22\0\21\u032b\3\0\2\u032b\2\0\10\u032b"+
    "\22\0\21\u032c\3\0\2\u032c\2\0\10\u032c\22\0\21\u032d"+
    "\3\0\2\u032d\2\0\10\u032d\22\0\21\u032e\3\0\2\u032e"+
    "\2\0\10\u032e\22\0\21\u032f\3\0\2\u032f\2\0\10\u032f"+
    "\22\0\21\u0330\3\0\2\u0330\2\0\10\u0330\22\0\21\u0331"+
    "\3\0\2\u0331\2\0\10\u0331\22\0\21\u0332\3\0\2\u0332"+
    "\2\0\10\u0332\22\0\21\u0333\3\0\2\u0333\2\0\10\u0333"+
    "\22\0\21\u0334\3\0\2\u0334\2\0\10\u0334\22\0\21\u0335"+
    "\3\0\2\u0335\2\0\10\u0335\22\0\21\u0336\3\0\2\u0336"+
    "\2\0\10\u0336\22\0\21\u0337\3\0\2\u0337\2\0\10\u0337"+
    "\22\0\21\u0338\3\0\2\u0338\2\0\10\u0338\22\0\21\u0339"+
    "\3\0\2\u0339\2\0\10\u0339\22\0\21\u033a\3\0\2\u033a"+
    "\2\0\10\u033a\22\0\21\u033b\3\0\2\u033b\2\0\10\u033b"+
    "\22\0\21\u033c\3\0\2\u033c\2\0\10\u033c\22\0\21\u033d"+
    "\3\0\2\u033d\2\0\10\u033d\22\0\21\u033e\3\0\2\u033e"+
    "\2\0\10\u033e\22\0\21\u033f\3\0\2\u033f\2\0\10\u033f"+
    "\22\0\21\u0340\3\0\2\u0340\2\0\10\u0340\22\0\21\u0341"+
    "\3\0\2\u0341\2\0\10\u0341\22\0\21\u0342\3\0\2\u0342"+
    "\2\0\10\u0342\22\0\21\u0343\3\0\2\u0343\2\0\10\u0343"+
    "\22\0\21\u0344\3\0\2\u0344\2\0\10\u0344\22\0\21\u0345"+
    "\3\0\2\u0345\2\0\10\u0345\22\0\21\u0346\3\0\2\u0346"+
    "\2\0\10\u0346\22\0\21\u0347\3\0\2\u0347\2\0\10\u0347"+
    "\22\0\21\u0348\3\0\2\u0348\2\0\10\u0348\22\0\21\u0349"+
    "\3\0\2\u0349\2\0\10\u0349\22\0\21\u034a\3\0\2\u034a"+
    "\2\0\10\u034a\22\0\21\u034b\3\0\2\u034b\2\0\10\u034b"+
    "\22\0\21\u034c\3\0\2\u034c\2\0\10\u034c\22\0\21\u034d"+
    "\3\0\2\u034d\2\0\10\u034d\22\0\21\u034e\3\0\2\u034e"+
    "\2\0\10\u034e\22\0\21\u034f\3\0\2\u034f\2\0\10\u034f"+
    "\22\0\21\u0350\3\0\2\u0350\2\0\10\u0350\22\0\21\u0351"+
    "\3\0\2\u0351\2\0\10\u0351\22\0\21\u0352\3\0\2\u0352"+
    "\2\0\10\u0352\22\0\21\u0353\3\0\2\u0353\2\0\10\u0353"+
    "\22\0\21\u0354\3\0\2\u0354\2\0\10\u0354\22\0\21\u0355"+
    "\3\0\2\u0355\2\0\10\u0355\22\0\21\u0356\3\0\2\u0356"+
    "\2\0\10\u0356\22\0\21\u0357\3\0\2\u0357\2\0\10\u0357"+
    "\22\0\21\u0358\3\0\2\u0358\2\0\10\u0358\22\0\21\u0359"+
    "\3\0\2\u0359\2\0\10\u0359\22\0\21\u035a\3\0\2\u035a"+
    "\2\0\10\u035a\22\0\21\u035b\3\0\2\u035b\2\0\10\u035b"+
    "\22\0\21\u035c\3\0\2\u035c\2\0\10\u035c\22\0\21\u035d"+
    "\3\0\2\u035d\2\0\10\u035d\22\0\21\u035e\3\0\2\u035e"+
    "\2\0\10\u035e\22\0\21\u035f\3\0\2\u035f\2\0\10\u035f"+
    "\22\0\21\u0360\3\0\2\u0360\2\0\10\u0360\22\0\21\u0361"+
    "\3\0\2\u0361\2\0\10\u0361\22\0\21\u0362\3\0\2\u0362"+
    "\2\0\10\u0362\22\0\21\u0363\3\0\2\u0363\2\0\10\u0363"+
    "\22\0\21\u0364\3\0\2\u0364\2\0\10\u0364\22\0\21\u0365"+
    "\3\0\2\u0365\2\0\10\u0365\22\0\21\u0366\3\0\2\u0366"+
    "\2\0\10\u0366\22\0\21\u0367\3\0\2\u0367\2\0\10\u0367"+
    "\22\0\21\u0368\3\0\2\u0368\2\0\10\u0368\22\0\21\u0369"+
    "\3\0\2\u0369\2\0\10\u0369\22\0\21\u036a\3\0\2\u036a"+
    "\2\0\10\u036a\22\0\21\u036b\3\0\2\u036b\2\0\10\u036b"+
    "\22\0\21\u036c\3\0\2\u036c\2\0\10\u036c\22\0\21\u036d"+
    "\3\0\2\u036d\2\0\10\u036d\22\0\21\u036e\3\0\2\u036e"+
    "\2\0\10\u036e\22\0\21\u036f\3\0\2\u036f\2\0\10\u036f"+
    "\22\0\21\u0370\3\0\2\u0370\2\0\10\u0370\22\0\21\u0371"+
    "\3\0\2\u0371\2\0\10\u0371\22\0\21\u0372\3\0\2\u0372"+
    "\2\0\10\u0372\22\0\21\u0373\3\0\2\u0373\2\0\10\u0373"+
    "\22\0\21\u0374\3\0\2\u0374\2\0\10\u0374\22\0\21\u0375"+
    "\3\0\2\u0375\2\0\10\u0375\22\0\21\u0376\3\0\2\u0376"+
    "\2\0\10\u0376\22\0\21\u0377\3\0\2\u0377\2\0\10\u0377"+
    "\22\0\21\u0378\3\0\2\u0378\2\0\10\u0378\22\0\21\u0379"+
    "\3\0\2\u0379\2\0\10\u0379\22\0\21\u037a\3\0\2\u037a"+
    "\2\0\10\u037a\22\0\21\u037b\3\0\2\u037b\2\0\10\u037b"+
    "\22\0\21\u037c\3\0\2\u037c\2\0\10\u037c\22\0\21\u037d"+
    "\3\0\2\u037d\2\0\10\u037d\22\0\21\u037e\3\0\2\u037e"+
    "\2\0\10\u037e\22\0\21\u037f\3\0\2\u037f\2\0\10\u037f"+
    "\22\0\21\u0380\3\0\2\u0380\2\0\10\u0380\22\0\21\u0381"+
    "\3\0\2\u0381\2\0\10\u0381\22\0\21\u0382\3\0\2\u0382"+
    "\2\0\10\u0382\22\0\21\u0383\3\0\2\u0383\2\0\10\u0383"+
    "\22\0\21\u0384\3\0\2\u0384\2\0\10\u0384\22\0\21\u0385"+
    "\3\0\2\u0385\2\0\10\u0385\22\0\21\u0386\3\0\2\u0386"+
    "\2\0\10\u0386\22\0\21\u0387\3\0\2\u0387\2\0\10\u0387"+
    "\22\0\21\u0388\3\0\2\u0388\2\0\10\u0388\22\0\21\u0389"+
    "\3\0\2\u0389\2\0\10\u0389\22\0\21\u038a\3\0\2\u038a"+
    "\2\0\10\u038a\22\0\21\u038b\3\0\2\u038b\2\0\10\u038b"+
    "\22\0\21\u038c\3\0\2\u038c\2\0\10\u038c\22\0\21\u038d"+
    "\3\0\2\u038d\2\0\10\u038d\22\0\21\u038e\3\0\2\u038e"+
    "\2\0\10\u038e\22\0\21\u038f\3\0\2\u038f\2\0\10\u038f"+
    "\22\0\21\u0390\3\0\2\u0390\2\0\10\u0390\22\0\21\u0391"+
    "\3\0\2\u0391\2\0\10\u0391\22\0\21\u0392\3\0\2\u0392"+
    "\2\0\10\u0392\22\0\21\u0393\3\0\2\u0393\2\0\10\u0393"+
    "\22\0\21\u0394\3\0\2\u0394\2\0\10\u0394\22\0\21\u0395"+
    "\3\0\2\u0395\2\0\10\u0395\22\0\21\u0396\3\0\2\u0396"+
    "\2\0\10\u0396\22\0\21\u0397\3\0\2\u0397\2\0\10\u0397"+
    "\22\0\21\100\3\0\2\100\2\0\10\100\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43550];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\32\1\2\11\2\1\1\11"+
    "\3\1\1\11\3\1\1\11\24\1\2\0\2\11\2\0"+
    "\14\1\6\11\2\0\1\1\1\0\21\1\1\0\1\11"+
    "\1\0\13\1\1\0\17\1\1\0\1\11\u0211\1\1\0"+
    "\367\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[919];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private int count; // Este lleva la cuenta de los TOKENS y es tambiÃ©n el identificador
    private ArrayList<Yytoken> tokens = new ArrayList<>();    
    
    /**
     * Valida la inserciÃ³n de un nuevo token, si exite agrega la line o aumenta las ocurrencias del TOKEN en la misma linea
     * @param newToken
     * @param line
     * @return 
     */
    private boolean addToken(Yytoken newToken, int line) {
        for (Yytoken token : tokens) {
            if (token.getName().toUpperCase().equals(newToken.getName().toUpperCase()) && token.getType().equals(newToken.getType())) {
                for (int i = 0; i < token.getLines().size(); i++) {
                    if (token.getLines().get(i).getNumLine() == line) {
                        token.getLines().get(i).setOccurrences(token.getLines().get(i).getOccurrences() + 1);
                        return true;
                    }
                }
                token.getLines().add(new Line(line));
                return true;
            }
        }
        count++;
        newToken.setId(count);
        newToken.getLines().add(new Line(line));
        tokens.add(newToken);
        return true;
    }

    /**
     * @return the lines
     */
    public ArrayList<Yytoken> getTokens() {
        return tokens;
    }
    
    @Override
    public String toString() {
        String value = "";
        for (Yytoken token : tokens) {
            value += token.toString() + "\n";
        }
        return value;
    }

    public String toStringTokens() {
        String value = "";
        for (Yytoken token : tokens) {
            if(!token.getType().equals(Types_Tokens.ERROR)){
                value += token.toString() + "\n";
            }            
        }
        return value;
    }
    
    public String toStringErrores() {
        String value = "";
        for (Yytoken token : tokens) {
            if(token.getType().equals(Types_Tokens.ERROR)){
                value += token.toString() + "\n";
            }            
        }
        return value;
    }

    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerAnalyzer(java.io.Reader in) {
      count = 0;
    tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.ERROR), yyline);
            }
          case 53: break;
          case 2: 
            { /*Ignore*/
            }
          case 54: break;
          case 3: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LEFTPARENTHESIS);
            }
          case 55: break;
          case 4: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_MULTIPLY);
            }
          case 56: break;
          case 5: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_RIGHTPARENTHESIS);
            }
          case 57: break;
          case 6: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_DIVIDE);
            }
          case 58: break;
          case 7: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.IDENTIFICADOR), yyline);
        return symbol(sym.IDENTIFIER, yytext());
            }
          case 59: break;
          case 8: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL), yyline);
        return symbol(sym.ENTERO, new Integer(yytext()));
            }
          case 60: break;
          case 9: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LESS);
            }
          case 61: break;
          case 10: 
            { return symbol(sym.OP_COMMA);
            }
          case 62: break;
          case 11: 
            { return symbol(sym.OP_SEMI);
            }
          case 63: break;
          case 12: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_TWOPOINTS);
            }
          case 64: break;
          case 13: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_PLUS);
            }
          case 65: break;
          case 14: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_EQUAL);
            }
          case 66: break;
          case 15: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_GREATER);
            }
          case 67: break;
          case 16: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_LESS);
            }
          case 68: break;
          case 17: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_MULTEQUAL);
            }
          case 69: break;
          case 18: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_DIVEQUAL);
            }
          case 70: break;
          case 19: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_OF, yytext());
            }
          case 71: break;
          case 20: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_IF, yytext());
            }
          case 72: break;
          case 21: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_TO, yytext());
            }
          case 73: break;
          case 22: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LESSLESS);
            }
          case 74: break;
          case 23: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LESSEQUAL);
            }
          case 75: break;
          case 24: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING), yyline);
        return symbol(sym.STRING_LINE, new String(yytext()));
            }
          case 76: break;
          case 25: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING), yyline);
        return symbol(sym.NUMERAL_CHARACTER, new String(yytext()));
            }
          case 77: break;
          case 26: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_DO, yytext());
            }
          case 78: break;
          case 27: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_TWOPOINTSEGUAL);
            }
          case 79: break;
          case 28: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_PLUSPLUS);
            }
          case 80: break;
          case 29: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_PLUSEQUAL);
            }
          case 81: break;
          case 30: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_GREATEREQUAL);
            }
          case 82: break;
          case 31: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_LESSEQUAL);
            }
          case 83: break;
          case 32: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_DIFERENT);
            }
          case 84: break;
          case 33: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_END, yytext());
            }
          case 85: break;
          case 34: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.DATA_TYPE,  yytext());
            }
          case 86: break;
          case 35: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL), yyline);
        return symbol(sym.REAL, new Double(yytext()));
            }
          case 87: break;
          case 36: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING), yyline);
        return symbol(sym.STRING_BLOCK, new String(yytext()));
            }
          case 88: break;
          case 37: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_FOR, yytext());
            }
          case 89: break;
          case 38: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_VAR, yytext());
            }
          case 90: break;
          case 39: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_ELSE, yytext());
            }
          case 91: break;
          case 40: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_READ, yytext());
            }
          case 92: break;
          case 41: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_THEN, yytext());
            }
          case 93: break;
          case 42: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_TRUE, yytext());
            }
          case 94: break;
          case 43: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL), yyline);
        return symbol(sym.SCIENTIFIC_NOTATION, new Double(yytext()));
            }
          case 95: break;
          case 44: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_BEGIN, yytext());
            }
          case 96: break;
          case 45: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_CONST, yytext());
            }
          case 97: break;
          case 46: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_FALSE, yytext());
            }
          case 98: break;
          case 47: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_UNTIL, yytext());
            }
          case 99: break;
          case 48: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_WHITE, yytext());
            }
          case 100: break;
          case 49: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_WRITE, yytext());
            }
          case 101: break;
          case 50: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_PROGRAM, yytext());
            }
          case 102: break;
          case 51: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_FUNCTION, yytext());
            }
          case 103: break;
          case 52: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_PROCEDURE, yytext());
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
