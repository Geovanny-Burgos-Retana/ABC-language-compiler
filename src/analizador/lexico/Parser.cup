package analizador.lexico;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import Semantico.Symb;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

parser code {:

    private ArrayList<String> errores = new ArrayList<String>();
    private ArrayList<String> errSemanticos = new ArrayList<>();
    private ArrayList<String> multi_vars = new ArrayList<>();
    private ArrayList<String> params_funct = new ArrayList<>();
    private int count_paramsFunct = 0;
    private LexerAnalyzer scanner;
    private ArrayList<Symb> tableSymb = new ArrayList<>();
    private String funct_current = "";
    private String type_current = "";
    private Assembler asmCode = new Assembler();

    public String toStringErrores() {        
        String value = "";
        for (String error : errores)            
            value += error + "\n";
        return value;
    }

    public void setScanner(LexerAnalyzer lexer){
        scanner = lexer;
    }

    @Override
    protected int error_sync_size () { return 1; }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token == null || cur_token.value == null) { //No se encontró token END
            reportar_error("Error fatal de sintaxis al final del programa.", null);
        }
        else { //Por si acaso
            reportar_error("Error fatal de sintaxis en " + cur_token.value.toString(), cur_token);
        }        
    }

    public void imprimirErrores() {
        System.out.println("\nErrores sintácticos: ");
        for (String error : errores) {
            System.out.println(error);
        }
    }    
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("ERROR");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }

    @Override
    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }

    public void reportar_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }

    public boolean add_to_TS(String name, String type_token, String data_type, int line, String ambito, int qty_params) {        
        for (Symb sym: tableSymb) {
            if (name.equals(sym.getName()) && ambito.equals(sym.getAmbito())) {
                errSemanticos.add("Doblemente declarada: " + name + ". Linea: " + line);
                return false;
            }
        }
        Symb newSym = new Symb(name, type_token, data_type.toUpperCase(), line, ambito, qty_params);
        tableSymb.add(newSym);
        return true;
    }

    public void add_multiVars_to_TS(String dt, int line){
        for (String var : multi_vars) {            
            add_to_TS(var, "VAR", dt, line, getFunction(), 0);
            asmCode.generateGlobalVariables(var, dt);
        }
        multi_vars.clear();
    }

    public void printTablaSimbolos(){
        try {
            String arch = "TablaSimbolos.txt";
            BufferedWriter out = new BufferedWriter(new FileWriter(arch));
            int cont=0;
            for(Symb s: tableSymb){
                out.write(cont+"=>"+s.toString());
                out.newLine();
                cont++;
            }
            out.close();
        } catch (IOException ex) {
            
        }
    }

    public String getFunction() {
        if (funct_current.equals("")) {
            return "GLOBAL";
        } else {
            return funct_current;
        }
    }

    public boolean setQty_paramsFunct(String id_funct) {
        for (Symb symb : tableSymb) {
            if (id_funct.equals(symb.getName())) {
                symb.setQty_params(count_paramsFunct);
                return true;
            }
        }
        return false;
    }

    public void params_into_TS(String id, String dt, int line) {
        add_to_TS(id, "PARAM", dt, line, funct_current, 0); 
        count_paramsFunct += 1;       
    }

    public String toStringErrSem() {
        String value = "****** ERRORES SEMANTICOS ******\n";
        for (String errSemantico : errSemanticos) {
            value += errSemantico + "\n";
        }
        return value;
    }

    public boolean existSymb(String id, int line) {
        for (Symb symb : tableSymb) {
            if (id.equals(symb.getName()) && (funct_current.equals(symb.getAmbito()) || symb.getAmbito().equals("GLOBAL"))) {
                return true;
            }
        }
        errSemanticos.add("No declarada: " + id + ". Linea: " + line);
        return false;
    }
    
    public Symb getSymbTable(String id) {
        for (Symb symb : tableSymb) {
            if (id.equals(symb.getName())) {
                return symb;
            }
        }
        return null;
    }
    
    public boolean corroborateTypes(ArrayList<String> ids) {
        Symb sym = getSymbTable(ids.get(0));
        for (String id : ids) {
            Symb symbol = getSymbTable(id);
            if (!(symbol.getData_type().equals(sym.getData_type())))
                return false;
        }
        return true;
    }

    public void sentence_into_TS1(String id1, int line){
        if (existSymb(id1, line)) {
            ArrayList<String> ids = new ArrayList<>();
            ids.add(id1);
            if(!corroborateTypes(ids)) {
                errSemanticos.add("Tipos incompatibles. Linea: " + line);
            }
        }
    }
    
    public void sentence_into_TS2(String id1, String id2, int line){
        if (existSymb(id1, line) && existSymb(id2, line)) {
            ArrayList<String> ids = new ArrayList<>();
            ids.add(id1);
            ids.add(id2);
            if(!corroborateTypes(ids)) {
                errSemanticos.add("Tipos incompatibles. Linea: " + line);
            }
        }
    }
    
    public void sentence_into_TS3(String id1, String id2, String id3, int line){
        if (existSymb(id1, line) && existSymb(id2, line) && existSymb(id3, line)) {
            ArrayList<String> ids = new ArrayList<>();
            ids.add(id1);
            ids.add(id2);
            ids.add(id3);
            if(!corroborateTypes(ids)) {
                errSemanticos.add("Tipos incompatibles. Linea: " + line);
            }
        }
    }

    public void printAssemblerFile(){
        if(errores.size() == 0 && errSemanticos.size() == 0){
            asmCode.createAssemblerFile();
        }
        else
            System.out.println("No se puede generar archivo .asm cuando hay errores en el codigo");
    }
:}

// TERMINALES -----------------------------------------------------------------
terminal
    // TIPOS DE DATO
    DATA_TYPE,
    // PALABRAS RESERVADAS
    RW_BEGIN, RW_CONST, RW_DO, RW_ELSE, RW_END, RW_FALSE, RW_FOR,
    RW_FUNCTION, RW_IF, RW_OF, RW_PROCEDURE, RW_PROGRAM, RW_READ,
    RW_THEN, RW_TO, RW_TRUE, RW_UNTIL, RW_VAR, RW_WHILE, RW_WHITE, RW_WRITE,
    // OPERADORES ARITMETICOS
    OP_PLUSPLUS, OP_LESSLESS, OP_TWOPOINTSEGUAL, OP_PLUS, OP_LESS,
    OP_MULTIPLY, OP_DIVIDE, OP_MOD, OP_LEFTPARENTHESIS, OP_RIGHTPARENTHESIS,
    OP_PLUSEQUAL, OP_LESSEQUAL, OP_MULTEQUAL, OP_DIVEQUAL, OP_DIV,
    OP_COMMA, OP_SEMI, OP_TWOPOINTS,
    // OPERADORES BOOLEANOS
    OPB_EQUAL, OPB_GREATEREQUAL, OPB_GREATER, OPB_LESSEQUAL,
    OPB_LESS, OPB_DIFERENT, OPB_OR, OPB_AND, OPB_NOT,
    // IDENTIFICADORES
    IDENTIFIER;

terminal Integer ENTERO;
terminal Double  REAL;
terminal Double  SCIENTIFIC_NOTATION;
terminal String  STRING_LINE;
terminal String  STRING_BLOCK;
terminal String  NUMERAL_CHARACTER;

// NO TERMINALES --------------------------------------------------------------
non terminal 
    declaration_program, optional_sections, optional_sections2,
    constants_section, declarations_constants, declaration_constant,
    variables_section, declarations_variables, declaration_var,
    functions_section, function, procedure, parameters, parameters_list, value,
    seccion_instrucciones, seccion_instrucciones1,
    bloque_while, bloque_if, block_optional_if, block_optional_else, bloque_for,
    condicion_booleana, condicion_booleana1, condicion_booleana2, condicion_not, operador_booleano, operador_aritmetico,
    cuerpo_estructura_control, cuerpo_estructura_control1, sentencia,
    write_funct_call, parameters_write, params_list_write, read_funct_call,
    values_params, params_funct_call, params_list_funt_call,
    operador_aritmetico1;

/* Precedencia y asociación de terminales-------------------------*/
precedence left OP_LEFTPARENTHESIS;

// GRAMATICA
start with declaration_program;

declaration_program ::=   RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN cuerpo_estructura_control RW_END
                        | error:e IDENTIFIER optional_sections RW_BEGIN cuerpo_estructura_control RW_END
                            {:
                                parser.report_error("ERROR: Sin PROGRAM",e);
                            :}
                        | RW_PROGRAM error:e optional_sections RW_BEGIN cuerpo_estructura_control RW_END
                            {:
                                parser.report_error("ERROR: Programa sin IDENTIFICADOR", e);
                            :}
                        | RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN error:e cuerpo_estructura_control RW_END
                            {:
                                parser.report_error("Error en declaración bloques programa",e);
                            :};

optional_sections ::=     constants_section variables_section functions_section
                        | constants_section
                        | variables_section
                        | functions_section
                        | constants_section variables_section
                        | constants_section functions_section
                        | variables_section functions_section
                        | /* epsilon*/;

optional_sections2 ::=    constants_section variables_section seccion_instrucciones
                        | constants_section seccion_instrucciones
                        | variables_section seccion_instrucciones
                        | variables_section
                        | seccion_instrucciones
                        | /* epsilon */;
// CONSTANTES
constants_section ::= RW_CONST declarations_constants;

declarations_constants ::=    declaration_constant
                            | declaration_constant declarations_constants;                        

declaration_constant ::=  IDENTIFIER:id OPB_EQUAL value OP_SEMI
                            {:
                                add_to_TS(id.toString(), "CONST", "NONE", idleft, getFunction(), 0);
                            :}
                        | error:e OP_SEMI
                            {:
                                parser.report_error("ERROR: Declaración de constante incorrecta ", e);
                            :};

// VARIABLES
variables_section ::= RW_VAR declarations_variables;

declarations_variables ::=    declaration_var
                            | declaration_var declarations_variables;

declaration_var ::=   IDENTIFIER:id OP_TWOPOINTS DATA_TYPE:dt OP_SEMI
                        {:
                            multi_vars.add(id.toString());
                            add_multiVars_to_TS(dt.toString(), idleft);                            
                        :}
                    | IDENTIFIER:id OP_COMMA 
                        {:
                            multi_vars.add(id.toString());
                        :} declaration_var
                    | error:e OP_SEMI
                        {:
                            parser.report_error("ERROR: Declaración de variable incorrecta", e);
                        :};

// FUNCIONES
functions_section ::=   function
                      | procedure
                      | function functions_section
                      | procedure functions_section;

function ::=  RW_FUNCTION IDENTIFIER:id {: funct_current = id.toString(); :}
              OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE:dt
              RW_BEGIN optional_sections2 IDENTIFIER:id_return OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    if(!id.equals(id_return)){
                        parser.report_error("ERROR: ID y ID de retorno distintos ", id);
                    } else {
                        add_to_TS(id.toString(), "FUNCT", dt.toString(), idleft, "GLOBAL", 0);
                        setQty_paramsFunct(funct_current);
                        count_paramsFunct = 0;
                        funct_current = "";
                        params_funct.clear();
                    }
                :}
            /*| RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error:e
                RW_BEGIN optional_sections2 IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.report_error("ERROR: Función sin valor de retorno", e);
                :}*/
            | RW_FUNCTION IDENTIFIER error:e
                RW_BEGIN optional_sections2 
                IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.report_error("ERROR: Función parametros proc cuerpo incorrecto", e);
                :}
            | RW_FUNCTION error:e RW_END
                {:
                    parser.report_error("ERROR: Función estructura incorrecta", e);
                :};

procedure ::=     RW_PROCEDURE IDENTIFIER:id {: funct_current = id.toString(); :} OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS
                  RW_BEGIN optional_sections2 IDENTIFIER:id_return OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        if(!id.equals(id_return)){                            
                            parser.report_error("ERROR: Identificador de procedimiento y retorno distintos", id);
                        } else {
                            add_to_TS(id.toString(), "PROC", "NONE", idleft, "GLOBAL", 0);
                            setQty_paramsFunct(funct_current);
                            count_paramsFunct = 0;
                            funct_current = "";
                            params_funct.clear();
                        }
                    :}
                | RW_PROCEDURE IDENTIFIER error:e
                  RW_BEGIN optional_sections2 
                  IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.report_error("ERROR: Procedimiento parametros proc cuerpo incorrecto", e);
                    :}
                | RW_PROCEDURE error:e RW_END
                    {:
                        parser.report_error("ERROR: Procedimiento estructura incorrecta", e);
                    :};

parameters ::=    DATA_TYPE:dt IDENTIFIER:id
                    {:
                        params_into_TS(id.toString(), dt.toString(), idleft);
                    :}
                | DATA_TYPE:dt IDENTIFIER:id parameters_list
                    {:
                        params_into_TS(id.toString(), dt.toString(), idleft);
                    :}
                | /* epsilon */
                | error:e
                    {:
                        parser.report_error("ERROR: Estructura de paramatro incorrecta", e);
                    :}; 

parameters_list ::=   OP_COMMA DATA_TYPE:dt IDENTIFIER:id
                        {:
                            params_into_TS(id.toString(), dt.toString(), idleft);
                        :}
                    | OP_COMMA DATA_TYPE:dt IDENTIFIER:id parameters_list
                        {:
                            params_into_TS(id.toString(), dt.toString(), idleft);
                        :}
                    | error:e
                        {:
                            parser.report_error("ERROR: Estructura del parametros mal definida", e);
                        :};

value ::= ENTERO:valor {:RESULT = valor;:}
         | REAL:valor {:RESULT = valor;:}
         | SCIENTIFIC_NOTATION:valor {:RESULT = valor;:}
         | STRING_LINE:valor {:RESULT = valor;:}
         | STRING_BLOCK:valor {:RESULT = valor;:}
         | NUMERAL_CHARACTER:valor {:RESULT = valor;:};

//INSTRUCCIONES
seccion_instrucciones ::= seccion_instrucciones1 seccion_instrucciones | seccion_instrucciones1; 

seccion_instrucciones1 ::= bloque_while | bloque_if | bloque_for;

//ESTRUCTURAS DE CONTROL
bloque_while ::= RW_WHILE 
                        {: asmCode.generateWhile(); :}
                OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO
                RW_BEGIN cuerpo_estructura_control 
                RW_END
                        {: asmCode.exitLabelWhile(); :}
            
        | RW_WHILE error:e cuerpo_estructura_control RW_END
            {: 
                parser.report_error("Falta expresión en while", e);
            :};

bloque_if ::= RW_IF {: asmCode.generateIf(); :} OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_THEN 
              block_optional_if block_optional_else {: asmCode.exitLabelIf(); :}
            | RW_IF error:e block_optional_if block_optional_else 
                {:
                    parser.report_error("Error: falta paréntesis abrir en IF", e);
                :};

block_optional_else ::=   RW_ELSE 
                            {:
                                asmCode.generateElse();
                            :} RW_BEGIN cuerpo_estructura_control RW_END                          
                        | RW_ELSE
                            {:
                                asmCode.generateElse();
                            :} sentencia
                        | /* epsilon */;

block_optional_if ::= RW_BEGIN cuerpo_estructura_control RW_END
                    | sentencia;

bloque_for ::=    RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO 
                  RW_BEGIN cuerpo_estructura_control RW_END
                | RW_FOR error:e OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO
                  RW_BEGIN cuerpo_estructura_control RW_END
                    {:
                        parser.report_error("Error: en identificador en FOR", e);
                    :}
                | RW_FOR IDENTIFIER error:e ENTERO RW_TO ENTERO RW_DO
                  RW_BEGIN cuerpo_estructura_control RW_END
                    {:
                        parser.report_error("Error: en asignación en FOR", e);
                    :}
                | RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO error:e ENTERO RW_DO
                  RW_BEGIN cuerpo_estructura_control RW_END
                    {:
                        parser.report_error("Error: Falta TO en FOR", e);
                    :}
                | RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO error:e RW_DO
                  RW_BEGIN cuerpo_estructura_control RW_END
                    {:
                        parser.report_error("Error: Falta entero en FOR", e);
                    :}
                | RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO error:e
                  RW_BEGIN cuerpo_estructura_control RW_END
                    {: 
                        parser.report_error("Error: Falta DO en FOR", e);
                    :}
                | RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO
                  error:e cuerpo_estructura_control RW_END
                    {: 
                        parser.report_error("Error: Falta BEGIN en FOR", e);
                    :}
                | RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO 
                  RW_BEGIN cuerpo_estructura_control error:e 
                    {: 
                        parser.report_error("Error: Falta END en FOR", e);
                    :};

//UTILITARIAS
condicion_booleana ::=    condicion_booleana1 
                        | condicion_not 
                        | OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS operador_booleano OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS
                        | RW_TRUE 
                        | RW_FALSE                        
                        | error:e 
                            {: 
                                parser.report_error("Error en condición booleana",e);
                            :};


condicion_not ::= OPB_NOT IDENTIFIER | OPB_NOT OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS;

condicion_booleana1 ::=   condicion_booleana2 operador_booleano condicion_booleana2
                        | condicion_booleana2 operador_booleano RW_TRUE
                        | condicion_booleana2 operador_booleano RW_FALSE;

condicion_booleana2 ::= IDENTIFIER | ENTERO | REAL;

operador_booleano ::= OPB_EQUAL | OPB_GREATEREQUAL | OPB_GREATER | OPB_LESSEQUAL | OPB_LESS | OPB_DIFERENT | OPB_OR | OPB_AND | OPB_NOT;

operador_aritmetico ::= OP_PLUSPLUS {:RESULT = "++";:} 
                        | OP_LESSLESS  {:RESULT = "--";:}
                        | OP_TWOPOINTSEGUAL {:RESULT = ":=";:}
                        | OP_PLUS {:RESULT = "+";:}  
                        | OP_LESS {:RESULT = "-";:}
                        | OP_MULTIPLY {:RESULT = "*";:}
                        | OP_DIVIDE {:RESULT = "/";:}
                        | OP_MOD {:RESULT = "MOD";:}
                        | OP_LEFTPARENTHESIS {:RESULT = "(";:}
                        | OP_RIGHTPARENTHESIS {:RESULT = ")";:}
                        | OP_PLUSEQUAL {:RESULT = "+=";:}
                        | OP_LESSEQUAL {:RESULT = "-=";:}
                        | OP_MULTEQUAL {:RESULT = "*=";:}
                        | OP_DIVEQUAL {:RESULT = "/=";:}
                        | OP_DIV {:RESULT = "DIV";:};

operador_aritmetico1 ::= OP_PLUS {:RESULT = "+";:}
                        | OP_LESS {:RESULT = "-";:}
                        | OP_MULTIPLY {:RESULT = "*";:}
                        | OP_DIVIDE {:RESULT = "/";:};

cuerpo_estructura_control ::= /*epsilon*/ |cuerpo_estructura_control1 cuerpo_estructura_control;

cuerpo_estructura_control1 ::=  bloque_while | bloque_if | bloque_for | sentencia;

sentencia ::= IDENTIFIER:id1 OP_TWOPOINTSEGUAL OP_PLUSPLUS IDENTIFIER:id2 OP_SEMI
                {:
                    sentence_into_TS2(id1.toString(), id2.toString(), id1left);
                    asmCode.AritmeticUnary(id2.toString(), "++", id1.toString());
                :}
            | IDENTIFIER:id1 OP_TWOPOINTSEGUAL OP_LESSLESS IDENTIFIER:id2 OP_SEMI
                {:
                    sentence_into_TS2(id1.toString(), id2.toString(), id1left);
                    asmCode.AritmeticUnary(id2.toString(), "--", id1.toString());
                :}
            | IDENTIFIER:id1 OP_TWOPOINTSEGUAL IDENTIFIER:id2 OP_LEFTPARENTHESIS params_funct_call OP_RIGHTPARENTHESIS OP_SEMI
                {:
                    sentence_into_TS2(id1.toString(), id2.toString(), id1left);
                :}
            | IDENTIFIER:id1 OP_TWOPOINTSEGUAL value:valor OP_SEMI
                {:
                    existSymb(id1.toString(), id1left);
                    //System.out.println(valor);
                    asmCode.AritmeticUnary(valor.toString(), ":=", id1.toString());
                :}
            | IDENTIFIER:id1 OP_TWOPOINTSEGUAL value:op1 operador_aritmetico:opa value:op2 OP_SEMI
                {:
                    existSymb(id1.toString(), id1left);
                    //System.out.println("opa: "+opa+" "+op1+" "+op2);
                    asmCode.AritmeticBinary(op1.toString(), op2.toString(), opa.toString(), id1.toString());
                :}
            | IDENTIFIER:id1 OP_TWOPOINTSEGUAL IDENTIFIER:id2 OP_PLUSPLUS OP_SEMI
                {:
                    sentence_into_TS2(id1.toString(), id2.toString(), id1left);
                    asmCode.AritmeticUnary(id2.toString(), "++", id1.toString());
                :}
            | IDENTIFIER:id1 OP_TWOPOINTSEGUAL IDENTIFIER:id2 OP_LESSLESS OP_SEMI
                {:
                    sentence_into_TS2(id1.toString(), id2.toString(), id1left);
                    asmCode.AritmeticUnary(id2.toString(), "--", id1.toString());
                :}
            | IDENTIFIER:id1 OP_TWOPOINTSEGUAL IDENTIFIER:id2 OP_SEMI
                {:
                    sentence_into_TS2(id1.toString(), id2.toString(), id1left);
                    asmCode.AritmeticUnary(id2.toString(), ":=", id1.toString());
                :}
            | IDENTIFIER:id1 OP_TWOPOINTSEGUAL IDENTIFIER:id2 operador_aritmetico1:opa IDENTIFIER:id3 OP_SEMI
                {:
                    sentence_into_TS3(id1.toString(), id2.toString(), id3.toString(), id1left);
                    asmCode.AritmeticBinary(id2.toString(), id3.toString(), opa.toString(), id1.toString());
                :}
            | IDENTIFIER:id1 OP_TWOPOINTSEGUAL IDENTIFIER:id2 operador_aritmetico1:opa value:v OP_SEMI
                {:
                    sentence_into_TS2(id1.toString(), id2.toString(), id1left);
                    asmCode.AritmeticBinary(id2.toString(), v.toString(), opa.toString(), id1.toString());
                :}
            | read_funct_call OP_SEMI
            | write_funct_call OP_SEMI
            | IDENTIFIER:id1 OP_LEFTPARENTHESIS params_funct_call OP_RIGHTPARENTHESIS OP_SEMI
                {:
                    existSymb(id1.toString(), id1left);
                :}
            | IDENTIFIER error:e OP_SEMI
                {:
                    parser.report_error("Error en sentencia", e);
                :}
        ;

values_params ::= value
                | IDENTIFIER OPB_EQUAL value
                | IDENTIFIER operador_aritmetico1 IDENTIFIER
                | IDENTIFIER operador_aritmetico1 value
                | value operador_aritmetico1 IDENTIFIER
                | value operador_aritmetico1 value
                | IDENTIFIER;

params_funct_call ::= values_params
                    | values_params params_list_funt_call
                    | /* epsilon */
                    | error:e
                        {:
                            parser.report_error("ERROR: Estructura de parametro incorrecta en llamada de función", e);
                        :}; 

params_list_funt_call ::= OP_COMMA values_params
                        | OP_COMMA values_params params_list_funt_call
                        | error:e
                            {:
                                parser.report_error("ERROR: Estructura del parametros mal definida en llamada de función", e);
                            :};

read_funct_call ::=   RW_READ OP_LEFTPARENTHESIS OP_RIGHTPARENTHESIS
                    | RW_READ OP_LEFTPARENTHESIS IDENTIFIER OP_RIGHTPARENTHESIS
                    | RW_READ error:e
                        {:
                            parser.report_error("ERROR: Llamada incorrecta a función READ", e);
                        :};

write_funct_call ::=  RW_WRITE OP_LEFTPARENTHESIS parameters_write OP_RIGHTPARENTHESIS
                    | RW_WRITE error:e
                        {:
                            parser.report_error("ERROR: Llamada incorrecta a función WRITE", e);
                        :};

parameters_write ::=  IDENTIFIER
                    | value
                    | IDENTIFIER params_list_write
                    | value params_list_write
                    | error:e
                        {:
                            parser.report_error("ERROR: Estructura de paramatro en WRITE incorrecta", e);
                        :};                    

params_list_write ::= OP_COMMA IDENTIFIER
                    | OP_COMMA value 
                    | OP_COMMA IDENTIFIER params_list_write
                    | OP_COMMA value params_list_write
                    | error:e
                        {:
                            parser.report_error("ERROR: Estructura del parametros de llamada a función mal definida", e);
                        :};
