
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador.lexico;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\007\000\002\002" +
    "\010\000\002\002\003\000\002\003\005\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\004\004\000\002" +
    "\005\003\000\002\005\004\000\002\006\006\000\002\006" +
    "\005\000\002\007\004\000\002\010\003\000\002\010\004" +
    "\000\002\011\006\000\002\011\005\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\013\017\000\002\013\016\000\002\013" +
    "\016\000\002\013\013\000\002\013\016\000\002\013\015" +
    "\000\002\013\020\000\002\013\014\000\002\013\005\000" +
    "\002\014\015\000\002\014\014\000\002\014\014\000\002" +
    "\014\013\000\002\014\014\000\002\014\016\000\002\014" +
    "\016\000\002\014\012\000\002\014\005\000\002\015\004" +
    "\000\002\015\005\000\002\015\002\000\002\015\003\000" +
    "\002\016\005\000\002\016\006\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\004\000\002\020\002" +
    "\000\002\021\003\000\002\021\003\000\002\022\012\000" +
    "\002\022\010\000\002\023\003\000\002\023\003\000\002" +
    "\023\011\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\026\004\000\002\026\006\000\002\024\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\002\000\002\031\004\000" +
    "\002\032\003\000\002\032\004\000\002\033\006\000\002" +
    "\033\005\000\002\033\005\000\002\033\010\000\002\033" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\003\004\020\005\001\002\000\004\002" +
    "\ufffe\001\002\000\004\065\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\014\005\017\006" +
    "\021\014\012\017\014\026\015\001\002\000\010\005\uffea" +
    "\014\012\017\014\001\002\000\010\003\305\042\307\065" +
    "\306\001\002\000\004\005\ufffa\001\002\000\010\003\210" +
    "\042\212\065\211\001\002\000\006\003\177\065\200\001" +
    "\002\000\010\005\uffeb\014\012\017\014\001\002\000\010" +
    "\003\027\011\uffc8\027\030\001\002\000\012\005\ufffc\014" +
    "\012\017\014\026\015\001\002\000\004\065\160\001\002" +
    "\000\004\005\025\001\002\000\010\005\ufffb\014\012\017" +
    "\014\001\002\000\004\005\ufff7\001\002\000\010\003\027" +
    "\011\uffc8\027\030\001\002\000\004\011\156\001\002\000" +
    "\010\003\uffc6\011\uffc6\027\uffc6\001\002\000\006\003\034" +
    "\042\035\001\002\000\010\003\uffc7\011\uffc7\027\uffc7\001" +
    "\002\000\010\003\027\011\uffc8\027\030\001\002\000\004" +
    "\011\uffc9\001\002\000\004\007\152\001\002\000\022\003" +
    "\044\012\036\024\042\042\040\064\043\065\046\066\041" +
    "\067\045\001\002\000\004\043\uffbf\001\002\000\004\043" +
    "\077\001\002\000\010\065\046\066\041\067\045\001\002" +
    "\000\026\043\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002\000\004" +
    "\043\uffc0\001\002\000\006\042\066\065\065\001\002\000" +
    "\004\043\uffbe\001\002\000\026\043\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\001\002\000\026\043\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\001" +
    "\002\000\004\043\uffc2\001\002\000\024\054\053\055\054" +
    "\056\052\057\061\060\062\061\063\062\057\063\060\064" +
    "\056\001\002\000\004\043\uffc3\001\002\000\012\042\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\001\002\000\012\042\uffb7\065" +
    "\uffb7\066\uffb7\067\uffb7\001\002\000\012\042\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\001\002\000\010\065\046\066\041\067" +
    "\045\001\002\000\012\042\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\001\002\000\012\042\uffb1\065\uffb1\066\uffb1\067\uffb1\001" +
    "\002\000\012\042\uffb0\065\uffb0\066\uffb0\067\uffb0\001\002" +
    "\000\012\042\uffb4\065\uffb4\066\uffb4\067\uffb4\001\002\000" +
    "\012\042\uffb3\065\uffb3\066\uffb3\067\uffb3\001\002\000\012" +
    "\042\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002\000\004\043" +
    "\uffbb\001\002\000\004\043\uffbd\001\002\000\010\065\046" +
    "\066\041\067\045\001\002\000\004\043\070\001\002\000" +
    "\004\043\uffbc\001\002\000\004\043\072\001\002\000\024" +
    "\054\053\055\054\056\052\057\061\060\062\061\063\062" +
    "\057\063\060\064\056\001\002\000\004\042\074\001\002" +
    "\000\010\065\046\066\041\067\045\001\002\000\004\043" +
    "\076\001\002\000\004\043\uffc1\001\002\000\004\007\100" +
    "\001\002\000\004\005\101\001\002\000\010\011\uff9f\027" +
    "\030\065\102\001\002\000\012\003\113\032\115\033\114" +
    "\034\112\001\002\000\004\052\111\001\002\000\010\011" +
    "\uff9d\027\uff9d\065\uff9d\001\002\000\004\011\110\001\002" +
    "\000\010\011\uff9f\027\030\065\102\001\002\000\004\011" +
    "\uff9e\001\002\000\012\003\uffc5\011\uffc5\027\uffc5\065\uffc5" +
    "\001\002\000\010\011\uff9c\027\uff9c\065\uff9c\001\002\000" +
    "\014\066\126\067\121\070\122\071\124\072\125\001\002" +
    "\000\004\052\120\001\002\000\004\052\117\001\002\000" +
    "\004\052\116\001\002\000\004\052\uff9a\001\002\000\004" +
    "\052\uff99\001\002\000\004\052\uff97\001\002\000\042\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\052\uffcd\001\002\000\042\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\052\uffcc\001\002\000\042\032\141\033\145\034\130\035" +
    "\137\036\144\037\143\040\142\041\146\042\132\043\127" +
    "\044\147\045\135\046\133\047\140\050\131\052\136\001" +
    "\002\000\042\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\001\002\000\042" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\052\uffca\001\002\000\042\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\052\uffce\001\002\000\014\066\uffa5\067\uffa5\070\uffa5" +
    "\071\uffa5\072\uffa5\001\002\000\014\066\uffac\067\uffac\070" +
    "\uffac\071\uffac\072\uffac\001\002\000\014\066\uffa0\067\uffa0" +
    "\070\uffa0\071\uffa0\072\uffa0\001\002\000\014\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\001\002\000\014\066\uffa2" +
    "\067\uffa2\070\uffa2\071\uffa2\072\uffa2\001\002\000\014\066" +
    "\126\067\121\070\122\071\124\072\125\001\002\000\014" +
    "\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\001\002\000" +
    "\004\052\uff9b\001\002\000\014\066\uffab\067\uffab\070\uffab" +
    "\071\uffab\072\uffab\001\002\000\014\066\uffa1\067\uffa1\070" +
    "\uffa1\071\uffa1\072\uffa1\001\002\000\014\066\uffae\067\uffae" +
    "\070\uffae\071\uffae\072\uffae\001\002\000\014\066\uffa8\067" +
    "\uffa8\070\uffa8\071\uffa8\072\uffa8\001\002\000\014\066\uffa9" +
    "\067\uffa9\070\uffa9\071\uffa9\072\uffa9\001\002\000\014\066" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\001\002\000\014" +
    "\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\001\002\000" +
    "\014\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\001\002" +
    "\000\014\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\001" +
    "\002\000\004\052\151\001\002\000\004\052\uff98\001\002" +
    "\000\004\005\153\001\002\000\010\011\uff9f\027\030\065" +
    "\102\001\002\000\004\011\155\001\002\000\012\003\uffc4" +
    "\011\uffc4\027\uffc4\065\uffc4\001\002\000\004\002\uffff\001" +
    "\002\000\012\005\ufff6\014\ufff6\017\ufff6\026\ufff6\001\002" +
    "\000\006\003\163\054\164\001\002\000\014\005\ufff5\014" +
    "\ufff5\017\ufff5\026\ufff5\065\160\001\002\000\012\005\ufff4" +
    "\014\ufff4\017\ufff4\026\ufff4\001\002\000\004\052\167\001" +
    "\002\000\014\066\126\067\121\070\122\071\124\072\125" +
    "\001\002\000\004\052\166\001\002\000\014\005\ufff3\014" +
    "\ufff3\017\ufff3\026\ufff3\065\ufff3\001\002\000\014\005\ufff2" +
    "\014\ufff2\017\ufff2\026\ufff2\065\ufff2\001\002\000\010\005" +
    "\ufff9\014\012\017\014\001\002\000\004\005\ufff8\001\002" +
    "\000\004\005\ufffd\001\002\000\004\011\174\001\002\000" +
    "\004\002\000\001\002\000\004\005\uffe9\001\002\000\014" +
    "\003\177\005\ufff0\014\ufff0\017\ufff0\065\200\001\002\000" +
    "\014\003\uffec\005\uffec\014\uffec\017\uffec\065\uffec\001\002" +
    "\000\006\051\203\053\202\001\002\000\010\005\ufff1\014" +
    "\ufff1\017\ufff1\001\002\000\004\004\205\001\002\000\006" +
    "\003\177\065\200\001\002\000\014\003\uffed\005\uffed\014" +
    "\uffed\017\uffed\065\uffed\001\002\000\004\052\206\001\002" +
    "\000\014\003\uffee\005\uffee\014\uffee\017\uffee\065\uffee\001" +
    "\002\000\010\005\uffef\014\uffef\017\uffef\001\002\000\004" +
    "\011\304\001\002\000\014\003\214\004\213\005\uffd3\042" +
    "\235\043\uffd3\001\002\000\010\003\214\004\213\043\uffd3" +
    "\001\002\000\004\065\225\001\002\000\010\005\uffd2\043" +
    "\uffd2\053\uffd2\001\002\000\004\043\216\001\002\000\004" +
    "\005\217\001\002\000\004\065\220\001\002\000\004\034" +
    "\221\001\002\000\014\066\126\067\121\070\122\071\124" +
    "\072\125\001\002\000\004\052\223\001\002\000\004\011" +
    "\224\001\002\000\010\005\uffdd\014\uffdd\017\uffdd\001\002" +
    "\000\014\003\226\005\uffd5\043\uffd5\051\227\053\uffd5\001" +
    "\002\000\010\005\uffcf\043\uffcf\053\uffcf\001\002\000\004" +
    "\004\231\001\002\000\010\005\uffd4\043\uffd4\053\uffd4\001" +
    "\002\000\004\065\232\001\002\000\014\003\226\005\uffd1" +
    "\043\uffd1\051\227\053\uffd1\001\002\000\010\005\uffd0\043" +
    "\uffd0\053\uffd0\001\002\000\006\005\267\043\270\001\002" +
    "\000\012\003\214\004\213\005\uffd3\043\uffd3\001\002\000" +
    "\006\005\237\043\240\001\002\000\004\065\262\001\002" +
    "\000\006\003\241\005\242\001\002\000\004\005\254\001" +
    "\002\000\006\003\243\065\244\001\002\000\004\011\253" +
    "\001\002\000\004\034\245\001\002\000\014\066\126\067" +
    "\121\070\122\071\124\072\125\001\002\000\004\052\247" +
    "\001\002\000\006\003\251\011\250\001\002\000\010\005" +
    "\uffde\014\uffde\017\uffde\001\002\000\004\011\252\001\002" +
    "\000\010\005\uffd8\014\uffd8\017\uffd8\001\002\000\010\005" +
    "\uffd7\014\uffd7\017\uffd7\001\002\000\004\065\255\001\002" +
    "\000\004\034\256\001\002\000\014\066\126\067\121\070" +
    "\122\071\124\072\125\001\002\000\004\052\260\001\002" +
    "\000\004\011\261\001\002\000\010\005\uffd9\014\uffd9\017" +
    "\uffd9\001\002\000\004\034\263\001\002\000\014\066\126" +
    "\067\121\070\122\071\124\072\125\001\002\000\004\052" +
    "\265\001\002\000\004\011\266\001\002\000\010\005\uffda" +
    "\014\uffda\017\uffda\001\002\000\004\065\277\001\002\000" +
    "\004\005\271\001\002\000\004\065\272\001\002\000\004" +
    "\034\273\001\002\000\014\066\126\067\121\070\122\071" +
    "\124\072\125\001\002\000\004\052\275\001\002\000\004" +
    "\011\276\001\002\000\010\005\uffdc\014\uffdc\017\uffdc\001" +
    "\002\000\004\034\300\001\002\000\014\066\126\067\121" +
    "\070\122\071\124\072\125\001\002\000\004\052\302\001" +
    "\002\000\004\011\303\001\002\000\010\005\uffdb\014\uffdb" +
    "\017\uffdb\001\002\000\010\005\uffd6\014\uffd6\017\uffd6\001" +
    "\002\000\004\011\377\001\002\000\014\003\214\004\213" +
    "\005\uffd3\042\323\043\uffd3\001\002\000\010\003\214\004" +
    "\213\043\uffd3\001\002\000\004\043\311\001\002\000\004" +
    "\053\312\001\002\000\004\004\313\001\002\000\004\005" +
    "\314\001\002\000\004\065\315\001\002\000\004\034\316" +
    "\001\002\000\014\066\126\067\121\070\122\071\124\072" +
    "\125\001\002\000\004\052\320\001\002\000\004\011\321" +
    "\001\002\000\010\005\uffe6\014\uffe6\017\uffe6\001\002\000" +
    "\006\005\360\043\361\001\002\000\012\003\214\004\213" +
    "\043\uffd3\053\uffd3\001\002\000\006\043\326\053\325\001" +
    "\002\000\004\004\351\001\002\000\006\005\330\053\327" +
    "\001\002\000\004\004\336\001\002\000\004\065\331\001" +
    "\002\000\004\034\332\001\002\000\014\066\126\067\121" +
    "\070\122\071\124\072\125\001\002\000\004\052\334\001" +
    "\002\000\004\011\335\001\002\000\010\005\uffe2\014\uffe2" +
    "\017\uffe2\001\002\000\004\005\337\001\002\000\006\003" +
    "\340\065\341\001\002\000\004\011\350\001\002\000\004" +
    "\034\342\001\002\000\014\066\126\067\121\070\122\071" +
    "\124\072\125\001\002\000\004\052\344\001\002\000\006" +
    "\003\346\011\345\001\002\000\010\005\uffe7\014\uffe7\017" +
    "\uffe7\001\002\000\004\011\347\001\002\000\010\005\uffe1" +
    "\014\uffe1\017\uffe1\001\002\000\010\005\uffe0\014\uffe0\017" +
    "\uffe0\001\002\000\004\005\352\001\002\000\004\065\353" +
    "\001\002\000\004\034\354\001\002\000\014\066\126\067" +
    "\121\070\122\071\124\072\125\001\002\000\004\052\356" +
    "\001\002\000\004\011\357\001\002\000\010\005\uffe3\014" +
    "\uffe3\017\uffe3\001\002\000\004\065\372\001\002\000\004" +
    "\053\362\001\002\000\004\004\363\001\002\000\004\005" +
    "\364\001\002\000\004\065\365\001\002\000\004\034\366" +
    "\001\002\000\014\066\126\067\121\070\122\071\124\072" +
    "\125\001\002\000\004\052\370\001\002\000\004\011\371" +
    "\001\002\000\010\005\uffe5\014\uffe5\017\uffe5\001\002\000" +
    "\004\034\373\001\002\000\014\066\126\067\121\070\122" +
    "\071\124\072\125\001\002\000\004\052\375\001\002\000" +
    "\004\011\376\001\002\000\010\005\uffe4\014\uffe4\017\uffe4" +
    "\001\002\000\010\005\uffdf\014\uffdf\017\uffdf\001\002\000" +
    "\004\005\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\021\004\017\007\022\012\012\013\015\014\010\001" +
    "\001\000\010\012\377\013\015\014\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\200\011\175\001\001\000\010\012\174\013\015\014\010" +
    "\001\001\000\010\020\172\021\031\022\030\001\001\000" +
    "\012\007\167\012\170\013\015\014\010\001\001\000\006" +
    "\005\156\006\160\001\001\000\002\001\001\000\010\012" +
    "\023\013\015\014\010\001\001\000\002\001\001\000\010" +
    "\020\025\021\031\022\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\032\021\031\022\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\036\024\050\025\047\026\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\070\025\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\066\025\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\072" +
    "\001\001\000\002\001\001\000\006\024\074\025\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\103\031\104\032\105\033" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\103\031\106\032" +
    "\105\033\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\103\031\153\032\105\033\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\161\006\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\171\013\015\014\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\206\011\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\233\001\001\000\004\015\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\321\001" +
    "\001\000\004\015\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\366\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<String> errores = new ArrayList<String>();

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token == null || cur_token.value == null) { //No se encontró token END
            reportar_error("Error fatal de sintaxis al final del programa.", null);
        }
        else { //Por si acaso
            reportar_error("Error fatal de sintaxis en " + cur_token.value.toString(), cur_token);
        }        
    }

    public void imprimirErrores() {
        System.out.println("\nErrores sintácticos: ");
        for (String error : errores) {
            System.out.println(error);
        }
    }    
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m);
    }

    @Override
    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.out.println("ENTRO");
        //System.exit(1);
    }

    public void reportar_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaration_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaration_program ::= RW_PROGRAM IDENTIFIER RW_BEGIN seccion_instrucciones RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_program ::= RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN seccion_instrucciones RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                parser.errores.add("Error en declaración bloques programa"+e);
                                parser.report_error("Error en declaración bloques programa",e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // optional_sections ::= constants_section variables_section functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optional_sections ::= constants_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optional_sections ::= variables_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optional_sections ::= functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optional_sections ::= constants_section variables_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optional_sections ::= constants_section functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optional_sections ::= variables_section functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constants_section ::= RW_CONST declarations_constants 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constants_section",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations_constants ::= declaration_constant 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_constants",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations_constants ::= declaration_constant declarations_constants 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_constants",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_constant ::= IDENTIFIER OPB_EQUAL value OP_SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_constant",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_constant ::= IDENTIFIER error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		                            
                                parser.errores.add("ERROR: Declaración de constante incorrecta" + e);
                                parser.report_error("ERROR: Declaración de constante incorrecta", e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_constant",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables_section ::= RW_VAR declarations_variables 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_section",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarations_variables ::= declaration_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_variables",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations_variables ::= declaration_var declarations_variables 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_variables",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration_var ::= IDENTIFIER OP_TWOPOINTS DATA_TYPE OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_var ::= IDENTIFIER OP_COMMA declaration_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_var ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                parser.errores.add("ERROR: Declaración de variable incorrecta" + e);
                                parser.report_error("ERROR: Declaración de variable incorrecta", e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // functions_section ::= function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // functions_section ::= procedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // functions_section ::= function functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // functions_section ::= procedure functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
                    if(!id.equals(id_return)){
                        parser.errores.add("ERROR: ID y ID de retorno distintos " + id + " != " + id_return);
                        parser.report_error("ERROR: ID y ID de retorno distintos ", id + " != " + id_return);
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function ::= RW_FUNCTION OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Función sin nombre identificador" + "FUNCT");
                    parser.report_error("ERROR: Función sin nombre identificador", "FUNCT");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function ::= RW_FUNCTION IDENTIFIER parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Procedimiento sin parentesis izquierdo para los parametros" + "PROC");
                    parser.report_error("ERROR: Procedimiento sin parentesis izquierdo para los parametros", "PROC");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function ::= RW_FUNCTION IDENTIFIER parameters RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Función sin parentesis para los parametros" + "PROC");
                    parser.report_error("ERROR: Función sin parentesis para los parametros", "PROC");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Procedimiento sin parentesis derecho para los parametros" + "PROC");
                    parser.report_error("ERROR: Procedimiento sin parentesis derecho para los parametros", "PROC");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Un función debe tener valor de retorno" + "FUNCT");
                    parser.report_error("ERROR: Un función debe tener valor de retorno", "FUNCT");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    parser.errores.add("ERROR: Linea inalcansable porque la linea de retorno esta antes" + e);
                    parser.report_error("ERROR: Linea inalcansable porque la linea de retorno esta antes", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    parser.errores.add("ERROR: Linea de retorno con estructura incorrecta" + e);
                    parser.report_error("ERROR: Linea de retorno con estructura incorrecta", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function ::= RW_FUNCTION error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    parser.errores.add("ERROR: Estructura de procedimiento incorrecta" + e);
                    parser.report_error("ERROR: Estructura de procedimiento incorrecta", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
                        if(!id.equals(id_return)){
                            parser.errores.add("ERROR: ID y ID de retorno distintos " + id + " != " + id_return);
                            parser.report_error("ERROR: ID y ID de retorno distintos ", id + " != " + id_return);
                        }
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure ::= RW_PROCEDURE OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                        parser.errores.add("ERROR: Procedimiento sin nombre identificador" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin nombre identificador", "PROC");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure ::= RW_PROCEDURE IDENTIFIER parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                        parser.errores.add("ERROR: Procedimiento sin parentesis izquierdo para los parametros" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin parentesis izquierdo para los parametros", "PROC");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure ::= RW_PROCEDURE IDENTIFIER parameters RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                        parser.errores.add("ERROR: Procedimiento sin parentesis para los parametros" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin parentesis para los parametros", "PROC");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                        parser.errores.add("ERROR: Procedimiento sin parentesis derecho para los parametros" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin parentesis derecho para los parametros", "PROC");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		
                        parser.errores.add("ERROR: Un procedimiento no debe tener valor de retorno" + e);
                        parser.report_error("ERROR: Un procedimiento no debe tener valor de retorno", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        parser.errores.add("ERROR: Linea inalcansable porque la linea de retorno esta antes" + e);
                        parser.report_error("ERROR: Linea inalcansable porque la linea de retorno esta antes", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        parser.errores.add("ERROR: Linea de retorno con estructura incorrecta" + e);
                        parser.report_error("ERROR: Linea de retorno con estructura incorrecta", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedure ::= RW_PROCEDURE error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        parser.errores.add("ERROR: Estructura de procedimiento incorrecta" + e);
                        parser.report_error("ERROR: Estructura de procedimiento incorrecta", e);
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameters ::= DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameters ::= DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameters ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameters ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        parser.errores.add("ERROR: Estructura de paramatro incorrecta" + e);
                        parser.report_error("ERROR: Estructura de paramatro incorrecta", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_list",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_list",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parameters_list ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            parser.errores.add("ERROR: Estructura del parametros mal definida");
                            parser.report_error("ERROR: Estructura del parametros mal definida",e);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_list",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= SCIENTIFIC_NOTATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= STRING_LINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= STRING_BLOCK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // seccion_instrucciones ::= seccion_instrucciones1 seccion_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // seccion_instrucciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // seccion_instrucciones1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // seccion_instrucciones1 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
            parser.errores.add("Error en el cuerpo de instrucciones");
            parser.report_error("Error en el cuerpo de instrucciones",e);
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_while",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque_while ::= RW_WHILE error RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		 
                parser.errores.add("Falta expresión en while");
                parser.report_error("Falta expresión en while", e);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_while",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion_booleana ::= condicion_booleana1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicion_booleana ::= condicion_not 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicion_booleana ::= OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS operador_booleano OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicion_booleana ::= RW_TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicion_booleana ::= RW_FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicion_booleana ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
            parser.errores.add("Error en condición booleana");
            parser.report_error("Error en condición booleana",e);
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicion_not ::= OPB_NOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_not",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicion_not ::= OPB_NOT OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_not",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicion_booleana1 ::= condicion_booleana2 operador_booleano condicion_booleana2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicion_booleana2 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicion_booleana2 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion_booleana2 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_booleano ::= OPB_EQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_booleano ::= OPB_GREATEREQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_booleano ::= OPB_GREATER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador_booleano ::= OPB_LESSEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador_booleano ::= OPB_LESS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador_booleano ::= OPB_DIFERENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador_booleano ::= OPB_OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador_booleano ::= OPB_AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador_booleano ::= OPB_NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador_aritmetico ::= OP_PLUSPLUS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador_aritmetico ::= OP_LESSLESS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador_aritmetico ::= OP_TWOPOINTSEGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador_aritmetico ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador_aritmetico ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador_aritmetico ::= OP_MULTIPLY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador_aritmetico ::= OP_DIVIDE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador_aritmetico ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador_aritmetico ::= OP_LEFTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador_aritmetico ::= OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operador_aritmetico ::= OP_PLUSEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operador_aritmetico ::= OP_LESSEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operador_aritmetico ::= OP_MULTEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operador_aritmetico ::= OP_DIVEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operador_aritmetico ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_estructura_control ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_estructura_control ::= cuerpo_estructura_control1 cuerpo_estructura_control 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo_estructura_control1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_estructura_control1 ::= sentencia OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia ::= IDENTIFIER OP_PLUSPLUS OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia ::= IDENTIFIER OP_LESSLESS OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL value operador_aritmetico value OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia ::= IDENTIFIER error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
                parser.errores.add("Error en sentencia");
                parser.report_error("Error en sentencia",e);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
