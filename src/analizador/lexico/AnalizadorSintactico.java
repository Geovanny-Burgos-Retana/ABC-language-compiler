
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador.lexico;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\002\003\000\002\003\005\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\004\004\000\002" +
    "\005\003\000\002\005\004\000\002\006\006\000\002\006" +
    "\005\000\002\007\004\000\002\010\003\000\002\010\004" +
    "\000\002\011\006\000\002\011\005\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\013\017\000\002\013\016\000\002\013" +
    "\016\000\002\013\013\000\002\013\016\000\002\013\015" +
    "\000\002\013\020\000\002\013\014\000\002\013\005\000" +
    "\002\014\015\000\002\014\014\000\002\014\014\000\002" +
    "\014\013\000\002\014\014\000\002\014\016\000\002\014" +
    "\016\000\002\014\012\000\002\014\005\000\002\015\004" +
    "\000\002\015\005\000\002\015\002\000\002\015\003\000" +
    "\002\016\005\000\002\016\006\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\006\003\004\020\005\001\002\000\004\002" +
    "\ufffe\001\002\000\004\064\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\014\005\017\006" +
    "\021\014\012\017\014\026\015\001\002\000\010\005\uffea" +
    "\014\012\017\014\001\002\000\010\003\161\041\163\064" +
    "\162\001\002\000\004\005\ufffa\001\002\000\010\003\064" +
    "\041\066\064\065\001\002\000\006\003\053\064\054\001" +
    "\002\000\010\005\uffeb\014\012\017\014\001\002\000\004" +
    "\011\050\001\002\000\012\005\ufffc\014\012\017\014\026" +
    "\015\001\002\000\004\064\030\001\002\000\004\005\025" +
    "\001\002\000\010\005\ufffb\014\012\017\014\001\002\000" +
    "\004\005\ufff7\001\002\000\004\011\026\001\002\000\004" +
    "\002\uffff\001\002\000\012\005\ufff6\014\ufff6\017\ufff6\026" +
    "\ufff6\001\002\000\006\003\033\053\034\001\002\000\014" +
    "\005\ufff5\014\ufff5\017\ufff5\026\ufff5\064\030\001\002\000" +
    "\012\005\ufff4\014\ufff4\017\ufff4\026\ufff4\001\002\000\004" +
    "\051\044\001\002\000\014\065\042\066\035\067\036\070" +
    "\040\071\041\001\002\000\004\051\uffcd\001\002\000\004" +
    "\051\uffcc\001\002\000\004\051\043\001\002\000\004\051" +
    "\uffcb\001\002\000\004\051\uffca\001\002\000\004\051\uffce" +
    "\001\002\000\014\005\ufff3\014\ufff3\017\ufff3\026\ufff3\064" +
    "\ufff3\001\002\000\014\005\ufff2\014\ufff2\017\ufff2\026\ufff2" +
    "\064\ufff2\001\002\000\010\005\ufff9\014\012\017\014\001" +
    "\002\000\004\005\ufff8\001\002\000\004\005\ufffd\001\002" +
    "\000\004\002\000\001\002\000\004\005\uffe9\001\002\000" +
    "\014\003\053\005\ufff0\014\ufff0\017\ufff0\064\054\001\002" +
    "\000\014\003\uffec\005\uffec\014\uffec\017\uffec\064\uffec\001" +
    "\002\000\006\050\057\052\056\001\002\000\010\005\ufff1" +
    "\014\ufff1\017\ufff1\001\002\000\004\004\061\001\002\000" +
    "\006\003\053\064\054\001\002\000\014\003\uffed\005\uffed" +
    "\014\uffed\017\uffed\064\uffed\001\002\000\004\051\062\001" +
    "\002\000\014\003\uffee\005\uffee\014\uffee\017\uffee\064\uffee" +
    "\001\002\000\010\005\uffef\014\uffef\017\uffef\001\002\000" +
    "\004\011\160\001\002\000\014\003\070\004\067\005\uffd3" +
    "\041\111\042\uffd3\001\002\000\010\003\070\004\067\042" +
    "\uffd3\001\002\000\004\064\101\001\002\000\010\005\uffd2" +
    "\042\uffd2\052\uffd2\001\002\000\004\042\072\001\002\000" +
    "\004\005\073\001\002\000\004\064\074\001\002\000\004" +
    "\033\075\001\002\000\014\065\042\066\035\067\036\070" +
    "\040\071\041\001\002\000\004\051\077\001\002\000\004" +
    "\011\100\001\002\000\010\005\uffdd\014\uffdd\017\uffdd\001" +
    "\002\000\014\003\102\005\uffd5\042\uffd5\050\103\052\uffd5" +
    "\001\002\000\010\005\uffcf\042\uffcf\052\uffcf\001\002\000" +
    "\004\004\105\001\002\000\010\005\uffd4\042\uffd4\052\uffd4" +
    "\001\002\000\004\064\106\001\002\000\014\003\102\005" +
    "\uffd1\042\uffd1\050\103\052\uffd1\001\002\000\010\005\uffd0" +
    "\042\uffd0\052\uffd0\001\002\000\006\005\143\042\144\001" +
    "\002\000\012\003\070\004\067\005\uffd3\042\uffd3\001\002" +
    "\000\006\005\113\042\114\001\002\000\004\064\136\001" +
    "\002\000\006\003\115\005\116\001\002\000\004\005\130" +
    "\001\002\000\006\003\117\064\120\001\002\000\004\011" +
    "\127\001\002\000\004\033\121\001\002\000\014\065\042" +
    "\066\035\067\036\070\040\071\041\001\002\000\004\051" +
    "\123\001\002\000\006\003\125\011\124\001\002\000\010" +
    "\005\uffde\014\uffde\017\uffde\001\002\000\004\011\126\001" +
    "\002\000\010\005\uffd8\014\uffd8\017\uffd8\001\002\000\010" +
    "\005\uffd7\014\uffd7\017\uffd7\001\002\000\004\064\131\001" +
    "\002\000\004\033\132\001\002\000\014\065\042\066\035" +
    "\067\036\070\040\071\041\001\002\000\004\051\134\001" +
    "\002\000\004\011\135\001\002\000\010\005\uffd9\014\uffd9" +
    "\017\uffd9\001\002\000\004\033\137\001\002\000\014\065" +
    "\042\066\035\067\036\070\040\071\041\001\002\000\004" +
    "\051\141\001\002\000\004\011\142\001\002\000\010\005" +
    "\uffda\014\uffda\017\uffda\001\002\000\004\064\153\001\002" +
    "\000\004\005\145\001\002\000\004\064\146\001\002\000" +
    "\004\033\147\001\002\000\014\065\042\066\035\067\036" +
    "\070\040\071\041\001\002\000\004\051\151\001\002\000" +
    "\004\011\152\001\002\000\010\005\uffdc\014\uffdc\017\uffdc" +
    "\001\002\000\004\033\154\001\002\000\014\065\042\066" +
    "\035\067\036\070\040\071\041\001\002\000\004\051\156" +
    "\001\002\000\004\011\157\001\002\000\010\005\uffdb\014" +
    "\uffdb\017\uffdb\001\002\000\010\005\uffd6\014\uffd6\017\uffd6" +
    "\001\002\000\004\011\253\001\002\000\014\003\070\004" +
    "\067\005\uffd3\041\177\042\uffd3\001\002\000\010\003\070" +
    "\004\067\042\uffd3\001\002\000\004\042\165\001\002\000" +
    "\004\052\166\001\002\000\004\004\167\001\002\000\004" +
    "\005\170\001\002\000\004\064\171\001\002\000\004\033" +
    "\172\001\002\000\014\065\042\066\035\067\036\070\040" +
    "\071\041\001\002\000\004\051\174\001\002\000\004\011" +
    "\175\001\002\000\010\005\uffe6\014\uffe6\017\uffe6\001\002" +
    "\000\006\005\234\042\235\001\002\000\012\003\070\004" +
    "\067\042\uffd3\052\uffd3\001\002\000\006\042\202\052\201" +
    "\001\002\000\004\004\225\001\002\000\006\005\204\052" +
    "\203\001\002\000\004\004\212\001\002\000\004\064\205" +
    "\001\002\000\004\033\206\001\002\000\014\065\042\066" +
    "\035\067\036\070\040\071\041\001\002\000\004\051\210" +
    "\001\002\000\004\011\211\001\002\000\010\005\uffe2\014" +
    "\uffe2\017\uffe2\001\002\000\004\005\213\001\002\000\006" +
    "\003\214\064\215\001\002\000\004\011\224\001\002\000" +
    "\004\033\216\001\002\000\014\065\042\066\035\067\036" +
    "\070\040\071\041\001\002\000\004\051\220\001\002\000" +
    "\006\003\222\011\221\001\002\000\010\005\uffe7\014\uffe7" +
    "\017\uffe7\001\002\000\004\011\223\001\002\000\010\005" +
    "\uffe1\014\uffe1\017\uffe1\001\002\000\010\005\uffe0\014\uffe0" +
    "\017\uffe0\001\002\000\004\005\226\001\002\000\004\064" +
    "\227\001\002\000\004\033\230\001\002\000\014\065\042" +
    "\066\035\067\036\070\040\071\041\001\002\000\004\051" +
    "\232\001\002\000\004\011\233\001\002\000\010\005\uffe3" +
    "\014\uffe3\017\uffe3\001\002\000\004\064\246\001\002\000" +
    "\004\052\236\001\002\000\004\004\237\001\002\000\004" +
    "\005\240\001\002\000\004\064\241\001\002\000\004\033" +
    "\242\001\002\000\014\065\042\066\035\067\036\070\040" +
    "\071\041\001\002\000\004\051\244\001\002\000\004\011" +
    "\245\001\002\000\010\005\uffe5\014\uffe5\017\uffe5\001\002" +
    "\000\004\033\247\001\002\000\014\065\042\066\035\067" +
    "\036\070\040\071\041\001\002\000\004\051\251\001\002" +
    "\000\004\011\252\001\002\000\010\005\uffe4\014\uffe4\017" +
    "\uffe4\001\002\000\010\005\uffdf\014\uffdf\017\uffdf\001\002" +
    "\000\004\005\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\021\004\017\007\022\012\012\013\015\014\010\001" +
    "\001\000\010\012\253\013\015\014\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\054\011\051\001\001\000\010\012\050\013\015\014\010" +
    "\001\001\000\002\001\001\000\012\007\044\012\045\013" +
    "\015\014\010\001\001\000\006\005\026\006\030\001\001" +
    "\000\002\001\001\000\010\012\023\013\015\014\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\031\006" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\046\013\015\014\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\062\011\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\107\001" +
    "\001\000\004\015\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\175\001\001\000\004\015\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<String> errores = new ArrayList<String>();

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token == null || cur_token.value == null) { //No se encontró token END
            reportar_error("Error fatal de sintaxis al final del programa.", null);
        }
        else { //Por si acaso
            reportar_error("Error fatal de sintaxis en " + cur_token.value.toString(), cur_token);
        }        
    }

    public void imprimirErrores() {
        System.out.println("\nErrores sintácticos: ");
        for (String error : errores) {
            System.out.println(error);
        }
    }    
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m);
    }

    @Override
    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.out.println("ENTRO");
        //System.exit(1);
    }

    public void reportar_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaration_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaration_program ::= RW_PROGRAM IDENTIFIER RW_BEGIN RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_program ::= RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                parser.errores.add("Error en declaración bloques programa"+e);
                                parser.report_error("Error en declaración bloques programa",e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // optional_sections ::= constants_section variables_section functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optional_sections ::= constants_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optional_sections ::= variables_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optional_sections ::= functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optional_sections ::= constants_section variables_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optional_sections ::= constants_section functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optional_sections ::= variables_section functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constants_section ::= RW_CONST declarations_constants 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constants_section",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations_constants ::= declaration_constant 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_constants",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations_constants ::= declaration_constant declarations_constants 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_constants",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_constant ::= IDENTIFIER OPB_EQUAL value OP_SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_constant",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_constant ::= IDENTIFIER error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		                            
                                parser.errores.add("ERROR: Declaración de constante incorrecta" + e);
                                parser.report_error("ERROR: Declaración de constante incorrecta", e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_constant",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables_section ::= RW_VAR declarations_variables 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_section",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarations_variables ::= declaration_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_variables",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations_variables ::= declaration_var declarations_variables 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_variables",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration_var ::= IDENTIFIER OP_TWOPOINTS DATA_TYPE OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_var ::= IDENTIFIER OP_COMMA declaration_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_var ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                parser.errores.add("ERROR: Declaración de variable incorrecta" + e);
                                parser.report_error("ERROR: Declaración de variable incorrecta", e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // functions_section ::= function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // functions_section ::= procedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // functions_section ::= function functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // functions_section ::= procedure functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
                    if(!id.equals(id_return)){
                        parser.errores.add("ERROR: ID y ID de retorno distintos " + id + " != " + id_return);
                        parser.report_error("ERROR: ID y ID de retorno distintos ", id + " != " + id_return);
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function ::= RW_FUNCTION OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Función sin nombre identificador" + "FUNCT");
                    parser.report_error("ERROR: Función sin nombre identificador", "FUNCT");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function ::= RW_FUNCTION IDENTIFIER parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Procedimiento sin parentesis izquierdo para los parametros" + "PROC");
                    parser.report_error("ERROR: Procedimiento sin parentesis izquierdo para los parametros", "PROC");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function ::= RW_FUNCTION IDENTIFIER parameters RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Función sin parentesis para los parametros" + "PROC");
                    parser.report_error("ERROR: Función sin parentesis para los parametros", "PROC");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Procedimiento sin parentesis derecho para los parametros" + "PROC");
                    parser.report_error("ERROR: Procedimiento sin parentesis derecho para los parametros", "PROC");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                    parser.errores.add("ERROR: Un función debe tener valor de retorno" + "FUNCT");
                    parser.report_error("ERROR: Un función debe tener valor de retorno", "FUNCT");
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    parser.errores.add("ERROR: Linea inalcansable porque la linea de retorno esta antes" + e);
                    parser.report_error("ERROR: Linea inalcansable porque la linea de retorno esta antes", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    parser.errores.add("ERROR: Linea de retorno con estructura incorrecta" + e);
                    parser.report_error("ERROR: Linea de retorno con estructura incorrecta", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function ::= RW_FUNCTION error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    parser.errores.add("ERROR: Estructura de procedimiento incorrecta" + e);
                    parser.report_error("ERROR: Estructura de procedimiento incorrecta", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
                        if(!id.equals(id_return)){
                            parser.errores.add("ERROR: ID y ID de retorno distintos " + id + " != " + id_return);
                            parser.report_error("ERROR: ID y ID de retorno distintos ", id + " != " + id_return);
                        }
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure ::= RW_PROCEDURE OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                        parser.errores.add("ERROR: Procedimiento sin nombre identificador" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin nombre identificador", "PROC");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure ::= RW_PROCEDURE IDENTIFIER parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                        parser.errores.add("ERROR: Procedimiento sin parentesis izquierdo para los parametros" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin parentesis izquierdo para los parametros", "PROC");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure ::= RW_PROCEDURE IDENTIFIER parameters RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                        parser.errores.add("ERROR: Procedimiento sin parentesis para los parametros" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin parentesis para los parametros", "PROC");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		
                        parser.errores.add("ERROR: Procedimiento sin parentesis derecho para los parametros" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin parentesis derecho para los parametros", "PROC");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		
                        parser.errores.add("ERROR: Un procedimiento no debe tener valor de retorno" + e);
                        parser.report_error("ERROR: Un procedimiento no debe tener valor de retorno", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        parser.errores.add("ERROR: Linea inalcansable porque la linea de retorno esta antes" + e);
                        parser.report_error("ERROR: Linea inalcansable porque la linea de retorno esta antes", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        parser.errores.add("ERROR: Linea de retorno con estructura incorrecta" + e);
                        parser.report_error("ERROR: Linea de retorno con estructura incorrecta", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedure ::= RW_PROCEDURE error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        parser.errores.add("ERROR: Estructura de procedimiento incorrecta" + e);
                        parser.report_error("ERROR: Estructura de procedimiento incorrecta", e);
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameters ::= DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameters ::= DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameters ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameters ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        parser.errores.add("ERROR: Estructura de paramatro incorrecta" + e);
                        parser.report_error("ERROR: Estructura de paramatro incorrecta", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_list",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_list",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parameters_list ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            parser.errores.add("ERROR: Estructura del parametros mal definida");
                            parser.report_error("ERROR: Estructura del parametros mal definida",e);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_list",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= SCIENTIFIC_NOTATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= STRING_LINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= STRING_BLOCK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
