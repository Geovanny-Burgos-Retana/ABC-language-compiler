
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador.lexico;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import Semantico.Symb;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\011\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\002\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\004" +
    "\000\002\006\003\000\002\006\004\000\002\007\006\000" +
    "\002\007\004\000\002\010\004\000\002\011\003\000\002" +
    "\011\004\000\002\012\006\000\002\051\002\000\002\012" +
    "\006\000\002\012\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\004\000\002\013\004\000\002\052\002\000" +
    "\002\014\021\000\002\014\014\000\002\014\005\000\002" +
    "\015\016\000\002\015\017\000\002\015\016\000\002\015" +
    "\014\000\002\015\005\000\002\016\004\000\002\016\005" +
    "\000\002\016\002\000\002\016\003\000\002\017\005\000" +
    "\002\017\006\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\004\000\002\021\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\012\000\002\023\006\000\002\023\011\000\002" +
    "\023\012\000\002\023\012\000\002\024\011\000\002\024" +
    "\006\000\002\024\011\000\002\024\011\000\002\026\006" +
    "\000\002\026\004\000\002\026\002\000\002\025\005\000" +
    "\002\025\003\000\002\027\014\000\002\027\014\000\002" +
    "\027\014\000\002\027\014\000\002\027\014\000\002\027" +
    "\014\000\002\027\014\000\002\027\014\000\002\030\003" +
    "\000\002\030\003\000\002\030\011\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\033\004\000\002" +
    "\033\006\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\036\002\000" +
    "\002\036\004\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\040\007\000\002\040" +
    "\007\000\002\040\011\000\002\040\006\000\002\040\010" +
    "\000\002\040\007\000\002\040\007\000\002\040\006\000" +
    "\002\040\010\000\002\040\010\000\002\040\004\000\002" +
    "\040\004\000\002\040\007\000\002\040\005\000\002\045" +
    "\003\000\002\045\005\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\003\000" +
    "\002\046\003\000\002\046\004\000\002\046\002\000\002" +
    "\046\003\000\002\047\004\000\002\047\005\000\002\047" +
    "\003\000\002\044\005\000\002\044\006\000\002\044\004" +
    "\000\002\041\006\000\002\041\004\000\002\042\003\000" +
    "\002\042\003\000\002\042\004\000\002\042\004\000\002" +
    "\042\003\000\002\043\004\000\002\043\004\000\002\043" +
    "\005\000\002\043\005\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\006\003\005\020\004\001\002\000\006\003" +
    "\u016a\065\u016b\001\002\000\004\065\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\014\005" +
    "\ufff5\006\020\014\012\017\014\026\015\001\002\000\010" +
    "\005\uffe2\014\012\017\014\001\002\000\006\003\u0151\065" +
    "\u0152\001\002\000\004\005\ufff9\001\002\000\006\003\u0119" +
    "\065\u011a\001\002\000\006\003\u010d\065\u010f\001\002\000" +
    "\012\005\ufffb\014\012\017\014\026\015\001\002\000\010" +
    "\005\uffe3\014\012\017\014\001\002\000\006\003\u0100\065" +
    "\u0102\001\002\000\004\005\024\001\002\000\010\005\ufffa" +
    "\014\012\017\014\001\002\000\004\005\ufff6\001\002\000" +
    "\020\011\uff84\013\026\015\035\021\027\027\036\031\031" +
    "\065\040\001\002\000\022\003\uff81\011\uff81\013\uff81\015" +
    "\uff81\021\uff81\027\uff81\031\uff81\065\uff81\001\002\000\006" +
    "\003\323\065\324\001\002\000\006\003\316\042\317\001" +
    "\002\000\004\052\315\001\002\000\006\003\276\042\277" +
    "\001\002\000\022\003\uff7f\011\uff7f\013\uff7f\015\uff7f\021" +
    "\uff7f\027\uff7f\031\uff7f\065\uff7f\001\002\000\022\003\uff80" +
    "\011\uff80\013\uff80\015\uff80\021\uff80\027\uff80\031\uff80\065" +
    "\uff80\001\002\000\022\003\uff82\011\uff82\013\uff82\015\uff82" +
    "\021\uff82\027\uff82\031\uff82\065\uff82\001\002\000\006\003" +
    "\245\042\246\001\002\000\006\003\161\042\162\001\002" +
    "\000\022\003\uff84\011\uff84\013\026\015\035\021\027\027" +
    "\036\031\031\065\040\001\002\000\010\003\046\034\045" +
    "\042\047\001\002\000\004\011\044\001\002\000\004\052" +
    "\043\001\002\000\024\003\uff74\010\uff74\011\uff74\013\uff74" +
    "\015\uff74\021\uff74\027\uff74\031\uff74\065\uff74\001\002\000" +
    "\004\002\uffff\001\002\000\024\032\107\033\112\065\110" +
    "\066\050\067\055\070\052\071\062\072\051\073\053\001" +
    "\002\000\004\052\106\001\002\000\024\003\054\043\uff67" +
    "\065\057\066\050\067\055\070\052\071\062\072\051\073" +
    "\053\001\002\000\046\003\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\001\002\000\046\003\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\001\002\000\046\003\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\001\002\000\046\003\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\001\002\000\004\043\uff66\001\002" +
    "\000\046\003\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\001" +
    "\002\000\010\003\101\043\uff69\051\103\001\002\000\022" +
    "\003\uff6a\035\066\036\070\037\071\040\067\043\uff6a\051" +
    "\uff6a\054\075\001\002\000\020\003\uff70\035\066\036\070" +
    "\037\071\040\067\043\uff70\051\uff70\001\002\000\004\043" +
    "\063\001\002\000\046\003\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\001\002\000\004\052\064\001\002\000\024\003" +
    "\uff72\010\uff72\011\uff72\013\uff72\015\uff72\021\uff72\027\uff72" +
    "\031\uff72\065\uff72\001\002\000\020\065\072\066\050\067" +
    "\055\070\052\071\062\072\051\073\053\001\002\000\020" +
    "\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073" +
    "\uff88\001\002\000\020\065\uff85\066\uff85\067\uff85\070\uff85" +
    "\071\uff85\072\uff85\073\uff85\001\002\000\020\065\uff87\066" +
    "\uff87\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\001\002" +
    "\000\020\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072" +
    "\uff86\073\uff86\001\002\000\010\003\uff6c\043\uff6c\051\uff6c" +
    "\001\002\000\010\003\uff6b\043\uff6b\051\uff6b\001\002\000" +
    "\020\065\077\066\050\067\055\070\052\071\062\072\051" +
    "\073\053\001\002\000\016\066\050\067\055\070\052\071" +
    "\062\072\051\073\053\001\002\000\010\003\uff6f\043\uff6f" +
    "\051\uff6f\001\002\000\010\003\uff6e\043\uff6e\051\uff6e\001" +
    "\002\000\010\003\uff6d\043\uff6d\051\uff6d\001\002\000\004" +
    "\043\uff63\001\002\000\004\043\uff68\001\002\000\020\065" +
    "\057\066\050\067\055\070\052\071\062\072\051\073\053" +
    "\001\002\000\010\003\101\043\uff65\051\103\001\002\000" +
    "\004\043\uff64\001\002\000\024\003\uff71\010\uff71\011\uff71" +
    "\013\uff71\015\uff71\021\uff71\027\uff71\031\uff71\065\uff71\001" +
    "\002\000\004\065\156\001\002\000\022\032\142\033\144" +
    "\035\066\036\070\037\071\040\067\042\140\052\141\001" +
    "\002\000\042\032\127\033\133\034\116\035\125\036\132" +
    "\037\131\040\130\041\134\042\120\043\115\044\135\045" +
    "\123\046\121\047\126\050\117\052\124\001\002\000\004" +
    "\065\113\001\002\000\004\052\114\001\002\000\024\003" +
    "\uff7d\010\uff7d\011\uff7d\013\uff7d\015\uff7d\021\uff7d\027\uff7d" +
    "\031\uff7d\065\uff7d\001\002\000\016\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\001\002\000\016\066\uff95" +
    "\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\001\002\000" +
    "\016\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073\uff89" +
    "\001\002\000\016\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072" +
    "\uff8f\073\uff8f\001\002\000\016\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\073\uff8b\001\002\000\016\066\050\067" +
    "\055\070\052\071\062\072\051\073\053\001\002\000\016" +
    "\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\001" +
    "\002\000\024\003\uff7b\010\uff7b\011\uff7b\013\uff7b\015\uff7b" +
    "\021\uff7b\027\uff7b\031\uff7b\065\uff7b\001\002\000\016\066" +
    "\uff94\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94\001\002" +
    "\000\016\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073" +
    "\uff8a\001\002\000\016\066\uff97\067\uff97\070\uff97\071\uff97" +
    "\072\uff97\073\uff97\001\002\000\016\066\uff91\067\uff91\070" +
    "\uff91\071\uff91\072\uff91\073\uff91\001\002\000\016\066\uff92" +
    "\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92\001\002\000" +
    "\016\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93" +
    "\001\002\000\016\066\uff96\067\uff96\070\uff96\071\uff96\072" +
    "\uff96\073\uff96\001\002\000\016\066\uff90\067\uff90\070\uff90" +
    "\071\uff90\072\uff90\073\uff90\001\002\000\016\066\uff8d\067" +
    "\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\001\002\000\004" +
    "\052\137\001\002\000\024\003\uff7a\010\uff7a\011\uff7a\013" +
    "\uff7a\015\uff7a\021\uff7a\027\uff7a\031\uff7a\065\uff7a\001\002" +
    "\000\024\003\054\043\uff67\065\057\066\050\067\055\070" +
    "\052\071\062\072\051\073\053\001\002\000\024\003\uff77" +
    "\010\uff77\011\uff77\013\uff77\015\uff77\021\uff77\027\uff77\031" +
    "\uff77\065\uff77\001\002\000\004\052\152\001\002\000\020" +
    "\065\146\066\050\067\055\070\052\071\062\072\051\073" +
    "\053\001\002\000\004\052\145\001\002\000\024\003\uff78" +
    "\010\uff78\011\uff78\013\uff78\015\uff78\021\uff78\027\uff78\031" +
    "\uff78\065\uff78\001\002\000\004\052\151\001\002\000\004" +
    "\052\150\001\002\000\024\003\uff75\010\uff75\011\uff75\013" +
    "\uff75\015\uff75\021\uff75\027\uff75\031\uff75\065\uff75\001\002" +
    "\000\024\003\uff76\010\uff76\011\uff76\013\uff76\015\uff76\021" +
    "\uff76\027\uff76\031\uff76\065\uff76\001\002\000\024\003\uff79" +
    "\010\uff79\011\uff79\013\uff79\015\uff79\021\uff79\027\uff79\031" +
    "\uff79\065\uff79\001\002\000\004\043\154\001\002\000\004" +
    "\052\155\001\002\000\024\003\uff7c\010\uff7c\011\uff7c\013" +
    "\uff7c\015\uff7c\021\uff7c\027\uff7c\031\uff7c\065\uff7c\001\002" +
    "\000\004\052\157\001\002\000\024\003\uff7e\010\uff7e\011" +
    "\uff7e\013\uff7e\015\uff7e\021\uff7e\027\uff7e\031\uff7e\065\uff7e" +
    "\001\002\000\006\003\uff83\011\uff83\001\002\000\020\011" +
    "\uff84\013\026\015\035\021\027\027\036\031\031\065\040" +
    "\001\002\000\022\003\172\012\163\024\166\042\165\064" +
    "\170\065\173\066\167\067\171\001\002\000\006\003\uffaa" +
    "\043\uffaa\001\002\000\004\043\226\001\002\000\010\065" +
    "\173\066\167\067\171\001\002\000\006\003\uffab\043\uffab" +
    "\001\002\000\030\003\uffa2\043\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2" +
    "\001\002\000\006\042\215\065\214\001\002\000\030\003" +
    "\uffa1\043\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002\000\006\003" +
    "\uffa9\043\uffa9\001\002\000\030\003\uffa3\043\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\001\002\000\006\003\uffad\043\uffad\001\002" +
    "\000\024\054\200\055\201\056\177\057\206\060\207\061" +
    "\210\062\204\063\205\064\203\001\002\000\006\003\uffae" +
    "\043\uffae\001\002\000\016\012\uff9e\024\uff9e\042\uff9e\065" +
    "\uff9e\066\uff9e\067\uff9e\001\002\000\016\012\uffa0\024\uffa0" +
    "\042\uffa0\065\uffa0\066\uffa0\067\uffa0\001\002\000\016\012" +
    "\uff9f\024\uff9f\042\uff9f\065\uff9f\066\uff9f\067\uff9f\001\002" +
    "\000\014\012\212\024\213\065\173\066\167\067\171\001" +
    "\002\000\016\012\uff98\024\uff98\042\uff98\065\uff98\066\uff98" +
    "\067\uff98\001\002\000\016\012\uff9a\024\uff9a\042\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\001\002\000\016\012\uff99\024\uff99" +
    "\042\uff99\065\uff99\066\uff99\067\uff99\001\002\000\016\012" +
    "\uff9d\024\uff9d\042\uff9d\065\uff9d\066\uff9d\067\uff9d\001\002" +
    "\000\016\012\uff9c\024\uff9c\042\uff9c\065\uff9c\066\uff9c\067" +
    "\uff9c\001\002\000\016\012\uff9b\024\uff9b\042\uff9b\065\uff9b" +
    "\066\uff9b\067\uff9b\001\002\000\006\003\uffa6\043\uffa6\001" +
    "\002\000\006\003\uffa4\043\uffa4\001\002\000\006\003\uffa5" +
    "\043\uffa5\001\002\000\006\003\uffa8\043\uffa8\001\002\000" +
    "\010\065\173\066\167\067\171\001\002\000\004\043\217" +
    "\001\002\000\006\003\uffa7\043\uffa7\001\002\000\004\043" +
    "\221\001\002\000\024\054\200\055\201\056\177\057\206" +
    "\060\207\061\210\062\204\063\205\064\203\001\002\000" +
    "\004\042\223\001\002\000\010\065\173\066\167\067\171" +
    "\001\002\000\004\043\225\001\002\000\006\003\uffac\043" +
    "\uffac\001\002\000\006\003\227\007\230\001\002\000\020" +
    "\011\uff84\013\026\015\035\021\027\027\036\031\031\065" +
    "\040\001\002\000\006\003\231\005\232\001\002\000\020" +
    "\011\uff84\013\026\015\035\021\027\027\036\031\031\065" +
    "\040\001\002\000\022\003\233\011\uff84\013\026\015\035" +
    "\021\027\027\036\031\031\065\040\001\002\000\004\011" +
    "\236\001\002\000\004\011\235\001\002\000\022\003\uffc4" +
    "\011\uffc4\013\uffc4\015\uffc4\021\uffc4\027\uffc4\031\uffc4\065" +
    "\uffc4\001\002\000\022\003\uffc0\011\uffc0\013\uffc0\015\uffc0" +
    "\021\uffc0\027\uffc0\031\uffc0\065\uffc0\001\002\000\004\011" +
    "\240\001\002\000\022\003\uffc1\011\uffc1\013\uffc1\015\uffc1" +
    "\021\uffc1\027\uffc1\031\uffc1\065\uffc1\001\002\000\004\011" +
    "\242\001\002\000\022\003\uffc2\011\uffc2\013\uffc2\015\uffc2" +
    "\021\uffc2\027\uffc2\031\uffc2\065\uffc2\001\002\000\004\011" +
    "\244\001\002\000\022\003\uffc3\011\uffc3\013\uffc3\015\uffc3" +
    "\021\uffc3\027\uffc3\031\uffc3\065\uffc3\001\002\000\012\005" +
    "\254\021\027\031\031\065\040\001\002\000\022\003\172" +
    "\012\163\024\166\042\165\064\170\065\173\066\167\067" +
    "\171\001\002\000\006\003\250\043\251\001\002\000\004" +
    "\022\271\001\002\000\006\003\252\022\253\001\002\000" +
    "\012\005\254\021\027\031\031\065\040\001\002\000\012" +
    "\005\254\021\027\031\031\065\040\001\002\000\020\011" +
    "\uff84\013\026\015\035\021\027\027\036\031\031\065\040" +
    "\001\002\000\024\003\uffb7\010\uffb7\011\uffb7\013\uffb7\015" +
    "\uffb7\021\uffb7\027\uffb7\031\uffb7\065\uffb7\001\002\000\024" +
    "\003\uffb9\010\260\011\uffb9\013\uffb9\015\uffb9\021\uffb9\027" +
    "\uffb9\031\uffb9\065\uffb9\001\002\000\022\003\uffbf\011\uffbf" +
    "\013\uffbf\015\uffbf\021\uffbf\027\uffbf\031\uffbf\065\uffbf\001" +
    "\002\000\012\005\261\021\027\031\031\065\040\001\002" +
    "\000\020\011\uff84\013\026\015\035\021\027\027\036\031" +
    "\031\065\040\001\002\000\022\003\uffba\011\uffba\013\uffba" +
    "\015\uffba\021\uffba\027\uffba\031\uffba\065\uffba\001\002\000" +
    "\004\011\264\001\002\000\022\003\uffbb\011\uffbb\013\uffbb" +
    "\015\uffbb\021\uffbb\027\uffbb\031\uffbb\065\uffbb\001\002\000" +
    "\004\011\266\001\002\000\024\003\uffb8\010\uffb8\011\uffb8" +
    "\013\uffb8\015\uffb8\021\uffb8\027\uffb8\031\uffb8\065\uffb8\001" +
    "\002\000\024\003\uffb9\010\260\011\uffb9\013\uffb9\015\uffb9" +
    "\021\uffb9\027\uffb9\031\uffb9\065\uffb9\001\002\000\022\003" +
    "\uffbc\011\uffbc\013\uffbc\015\uffbc\021\uffbc\027\uffbc\031\uffbc" +
    "\065\uffbc\001\002\000\012\005\254\021\027\031\031\065" +
    "\040\001\002\000\024\003\uffb9\010\260\011\uffb9\013\uffb9" +
    "\015\uffb9\021\uffb9\027\uffb9\031\uffb9\065\uffb9\001\002\000" +
    "\022\003\uffbd\011\uffbd\013\uffbd\015\uffbd\021\uffbd\027\uffbd" +
    "\031\uffbd\065\uffbd\001\002\000\024\003\uffb9\010\260\011" +
    "\uffb9\013\uffb9\015\uffb9\021\uffb9\027\uffb9\031\uffb9\065\uffb9" +
    "\001\002\000\022\003\uffbe\011\uffbe\013\uffbe\015\uffbe\021" +
    "\uffbe\027\uffbe\031\uffbe\065\uffbe\001\002\000\004\052\uff5e" +
    "\001\002\000\022\003\300\065\301\066\050\067\055\070" +
    "\052\071\062\072\051\073\053\001\002\000\004\043\uff59" +
    "\001\002\000\010\003\305\043\uff5d\051\306\001\002\000" +
    "\010\003\305\043\uff5c\051\306\001\002\000\004\043\304" +
    "\001\002\000\004\052\uff5f\001\002\000\004\043\uff54\001" +
    "\002\000\020\065\310\066\050\067\055\070\052\071\062" +
    "\072\051\073\053\001\002\000\004\043\uff5a\001\002\000" +
    "\010\003\305\043\uff58\051\306\001\002\000\010\003\305" +
    "\043\uff57\051\306\001\002\000\004\043\uff55\001\002\000" +
    "\004\043\uff56\001\002\000\004\043\uff5b\001\002\000\024" +
    "\003\uff73\010\uff73\011\uff73\013\uff73\015\uff73\021\uff73\027" +
    "\uff73\031\uff73\065\uff73\001\002\000\004\052\uff60\001\002" +
    "\000\006\043\321\065\320\001\002\000\004\043\322\001" +
    "\002\000\004\052\uff62\001\002\000\004\052\uff61\001\002" +
    "\000\004\034\370\001\002\000\006\003\326\034\325\001" +
    "\002\000\004\066\336\001\002\000\004\066\327\001\002" +
    "\000\004\023\330\001\002\000\004\066\331\001\002\000" +
    "\004\007\332\001\002\000\004\005\333\001\002\000\020" +
    "\011\uff84\013\026\015\035\021\027\027\036\031\031\065" +
    "\040\001\002\000\004\011\335\001\002\000\022\003\uffb4" +
    "\011\uffb4\013\uffb4\015\uffb4\021\uffb4\027\uffb4\031\uffb4\065" +
    "\uffb4\001\002\000\006\003\337\023\340\001\002\000\004" +
    "\066\363\001\002\000\006\003\341\066\342\001\002\000" +
    "\004\007\357\001\002\000\006\003\343\007\344\001\002" +
    "\000\004\005\354\001\002\000\006\003\345\005\346\001" +
    "\002\000\020\011\uff84\013\026\015\035\021\027\027\036" +
    "\031\031\065\040\001\002\000\022\003\uff84\011\uff84\013" +
    "\026\015\035\021\027\027\036\031\031\065\040\001\002" +
    "\000\006\003\351\011\350\001\002\000\022\003\uffb6\011" +
    "\uffb6\013\uffb6\015\uffb6\021\uffb6\027\uffb6\031\uffb6\065\uffb6" +
    "\001\002\000\022\003\uffaf\011\uffaf\013\uffaf\015\uffaf\021" +
    "\uffaf\027\uffaf\031\uffaf\065\uffaf\001\002\000\004\011\353" +
    "\001\002\000\022\003\uffb0\011\uffb0\013\uffb0\015\uffb0\021" +
    "\uffb0\027\uffb0\031\uffb0\065\uffb0\001\002\000\020\011\uff84" +
    "\013\026\015\035\021\027\027\036\031\031\065\040\001" +
    "\002\000\004\011\356\001\002\000\022\003\uffb1\011\uffb1" +
    "\013\uffb1\015\uffb1\021\uffb1\027\uffb1\031\uffb1\065\uffb1\001" +
    "\002\000\004\005\360\001\002\000\020\011\uff84\013\026" +
    "\015\035\021\027\027\036\031\031\065\040\001\002\000" +
    "\004\011\362\001\002\000\022\003\uffb2\011\uffb2\013\uffb2" +
    "\015\uffb2\021\uffb2\027\uffb2\031\uffb2\065\uffb2\001\002\000" +
    "\004\007\364\001\002\000\004\005\365\001\002\000\020" +
    "\011\uff84\013\026\015\035\021\027\027\036\031\031\065" +
    "\040\001\002\000\004\011\367\001\002\000\022\003\uffb3" +
    "\011\uffb3\013\uffb3\015\uffb3\021\uffb3\027\uffb3\031\uffb3\065" +
    "\uffb3\001\002\000\004\066\371\001\002\000\004\023\372" +
    "\001\002\000\004\066\373\001\002\000\004\007\374\001" +
    "\002\000\004\005\375\001\002\000\020\011\uff84\013\026" +
    "\015\035\021\027\027\036\031\031\065\040\001\002\000" +
    "\004\011\377\001\002\000\022\003\uffb5\011\uffb5\013\uffb5" +
    "\015\uffb5\021\uffb5\027\uffb5\031\uffb5\065\uffb5\001\002\000" +
    "\004\052\u0108\001\002\000\020\005\uffef\013\uffef\014\uffef" +
    "\015\uffef\017\uffef\026\uffef\027\uffef\001\002\000\004\054" +
    "\u0105\001\002\000\024\003\u0100\005\uffee\013\uffee\014\uffee" +
    "\015\uffee\017\uffee\026\uffee\027\uffee\065\u0102\001\002\000" +
    "\020\005\uffed\013\uffed\014\uffed\015\uffed\017\uffed\026\uffed" +
    "\027\uffed\001\002\000\016\066\050\067\055\070\052\071" +
    "\062\072\051\073\053\001\002\000\004\052\u0107\001\002" +
    "\000\024\003\uffec\005\uffec\013\uffec\014\uffec\015\uffec\017" +
    "\uffec\026\uffec\027\uffec\065\uffec\001\002\000\024\003\uffeb" +
    "\005\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\026\uffeb\027" +
    "\uffeb\065\uffeb\001\002\000\004\005\uffe1\001\002\000\010" +
    "\005\ufff8\014\012\017\014\001\002\000\004\005\ufff7\001" +
    "\002\000\004\005\ufffc\001\002\000\004\052\u0118\001\002" +
    "\000\022\003\u010d\005\uffe9\013\uffe9\014\uffe9\015\uffe9\017" +
    "\uffe9\027\uffe9\065\u010f\001\002\000\006\051\u0112\053\u0111" +
    "\001\002\000\016\005\uffea\013\uffea\014\uffea\015\uffea\017" +
    "\uffea\027\uffea\001\002\000\004\004\u0115\001\002\000\006" +
    "\003\uffe6\065\uffe6\001\002\000\006\003\u010d\065\u010f\001" +
    "\002\000\022\003\uffe5\005\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\017\uffe5\027\uffe5\065\uffe5\001\002\000\004\052\u0116\001" +
    "\002\000\022\003\uffe7\005\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\017\uffe7\027\uffe7\065\uffe7\001\002\000\016\005\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\017\uffe8\027\uffe8\001\002\000\022" +
    "\003\uffe4\005\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\027" +
    "\uffe4\065\uffe4\001\002\000\004\011\u0150\001\002\000\006" +
    "\003\u011b\042\u011c\001\002\000\004\005\u0149\001\002\000" +
    "\010\003\u011e\004\u011d\043\uffd4\001\002\000\004\065\u0142" +
    "\001\002\000\004\043\uffd3\001\002\000\004\043\u0120\001" +
    "\002\000\006\003\u0121\005\u0122\001\002\000\004\005\u013b" +
    "\001\002\000\020\003\u0129\006\020\013\026\015\035\026" +
    "\015\027\036\065\ufff0\001\002\000\012\013\uffc6\015\uffc6" +
    "\027\uffc6\065\uffc6\001\002\000\004\065\ufff1\001\002\000" +
    "\012\013\uffc5\015\uffc5\027\uffc5\065\uffc5\001\002\000\012" +
    "\013\uffc7\015\uffc7\027\uffc7\065\uffc7\001\002\000\012\013" +
    "\026\015\035\026\015\027\036\001\002\000\012\013\026" +
    "\015\035\027\036\065\uffc8\001\002\000\004\065\u0132\001" +
    "\002\000\010\013\026\015\035\027\036\001\002\000\004" +
    "\065\u012c\001\002\000\004\034\u012d\001\002\000\016\066" +
    "\050\067\055\070\052\071\062\072\051\073\053\001\002" +
    "\000\004\052\u012f\001\002\000\004\011\u0130\001\002\000" +
    "\010\005\uffdb\014\uffdb\017\uffdb\001\002\000\004\065\ufff2" +
    "\001\002\000\004\034\u0133\001\002\000\016\066\050\067" +
    "\055\070\052\071\062\072\051\073\053\001\002\000\004" +
    "\052\u0135\001\002\000\004\011\u0136\001\002\000\010\005" +
    "\uffd9\014\uffd9\017\uffd9\001\002\000\004\065\uffc9\001\002" +
    "\000\004\065\ufff3\001\002\000\010\013\026\015\035\027" +
    "\036\001\002\000\004\065\ufff4\001\002\000\016\006\020" +
    "\013\026\015\035\026\015\027\036\065\ufff0\001\002\000" +
    "\004\065\u013d\001\002\000\004\034\u013e\001\002\000\016" +
    "\066\050\067\055\070\052\071\062\072\051\073\053\001" +
    "\002\000\004\052\u0140\001\002\000\004\011\u0141\001\002" +
    "\000\010\005\uffda\014\uffda\017\uffda\001\002\000\010\003" +
    "\u0143\043\uffd6\051\u0144\001\002\000\004\043\uffd0\001\002" +
    "\000\004\004\u0146\001\002\000\004\043\uffd5\001\002\000" +
    "\004\065\u0147\001\002\000\010\003\u0143\043\uffd2\051\u0144" +
    "\001\002\000\004\043\uffd1\001\002\000\016\006\020\013" +
    "\026\015\035\026\015\027\036\065\ufff0\001\002\000\004" +
    "\065\u014b\001\002\000\004\034\u014c\001\002\000\016\066" +
    "\050\067\055\070\052\071\062\072\051\073\053\001\002" +
    "\000\004\052\u014e\001\002\000\004\011\u014f\001\002\000" +
    "\010\005\uffd8\014\uffd8\017\uffd8\001\002\000\010\005\uffd7" +
    "\014\uffd7\017\uffd7\001\002\000\004\011\u0168\001\002\000" +
    "\006\003\u0154\042\uffdf\001\002\000\004\042\u015c\001\002" +
    "\000\004\005\u0155\001\002\000\016\006\020\013\026\015" +
    "\035\026\015\027\036\065\ufff0\001\002\000\004\065\u0157" +
    "\001\002\000\004\034\u0158\001\002\000\016\066\050\067" +
    "\055\070\052\071\062\072\051\073\053\001\002\000\004" +
    "\052\u015a\001\002\000\004\011\u015b\001\002\000\010\005" +
    "\uffdd\014\uffdd\017\uffdd\001\002\000\010\003\u011e\004\u011d" +
    "\043\uffd4\001\002\000\004\043\u015e\001\002\000\004\053" +
    "\u015f\001\002\000\004\004\u0160\001\002\000\004\005\u0161" +
    "\001\002\000\016\006\020\013\026\015\035\026\015\027" +
    "\036\065\ufff0\001\002\000\004\065\u0163\001\002\000\004" +
    "\034\u0164\001\002\000\016\066\050\067\055\070\052\071" +
    "\062\072\051\073\053\001\002\000\004\052\u0166\001\002" +
    "\000\004\011\u0167\001\002\000\010\005\uffde\014\uffde\017" +
    "\uffde\001\002\000\010\005\uffdc\014\uffdc\017\uffdc\001\002" +
    "\000\004\005\uffe0\001\002\000\014\005\ufff5\006\020\014" +
    "\012\017\014\026\015\001\002\000\014\005\ufff5\006\020" +
    "\014\012\017\014\026\015\001\002\000\004\005\u016d\001" +
    "\002\000\022\003\u016e\011\uff84\013\026\015\035\021\027" +
    "\027\036\031\031\065\040\001\002\000\020\011\uff84\013" +
    "\026\015\035\021\027\027\036\031\031\065\040\001\002" +
    "\000\004\011\u0170\001\002\000\004\002\000\001\002\000" +
    "\004\011\u0172\001\002\000\004\002\ufffd\001\002\000\004" +
    "\005\u0174\001\002\000\020\011\uff84\013\026\015\035\021" +
    "\027\027\036\031\031\065\040\001\002\000\004\011\u0176" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\020\005\015\010\021\013\012\014\016\015\010\001" +
    "\001\000\010\013\u0168\014\016\015\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\u010f\012\u010d\001\001\000\012\010\u0109\013\u010a\014\016" +
    "\015\010\001\001\000\010\013\u0108\014\016\015\010\001" +
    "\001\000\006\006\u0100\007\u0102\001\001\000\002\001\001" +
    "\000\010\013\022\014\016\015\010\001\001\000\002\001" +
    "\001\000\022\023\033\024\024\027\032\036\040\037\036" +
    "\040\031\041\027\044\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\023\033" +
    "\024\024\027\032\036\157\037\036\040\031\041\027\044" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\110\001\001\000\002\001\001\000\010\020\057\045\055" +
    "\046\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\101\001\001\000\004\050\073\001" +
    "\001\000\004\050\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\077\001\001\000\004\020\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\057\045\103" +
    "\001\001\000\004\047\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\142\001\001" +
    "\000\004\035\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\057\045\055\046\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\023\033\024\024\027\032\036\242" +
    "\037\036\040\031\041\027\044\041\001\001\000\012\030" +
    "\163\031\175\032\174\033\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\217\032\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\215\032\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\221\001\001\000\002\001\001\000\006\031\223\032" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\023\033\024\024\027\032\036\240\037" +
    "\036\040\031\041\027\044\041\001\001\000\002\001\001" +
    "\000\022\023\033\024\024\027\032\036\236\037\036\040" +
    "\031\041\027\044\041\001\001\000\022\023\033\024\024" +
    "\027\032\036\233\037\036\040\031\041\027\044\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\273\040\254\041\027\044\041\001" +
    "\001\000\012\030\246\031\175\032\174\033\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\266\040\254\041\027\044\041\001\001\000\012" +
    "\025\255\040\254\041\027\044\041\001\001\000\022\023" +
    "\033\024\024\027\032\036\264\037\036\040\031\041\027" +
    "\044\041\001\001\000\002\001\001\000\004\026\256\001" +
    "\001\000\002\001\001\000\010\040\261\041\027\044\041" +
    "\001\001\000\022\023\033\024\024\027\032\036\262\037" +
    "\036\040\031\041\027\044\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\267\001\001\000\002\001\001" +
    "\000\012\025\271\040\254\041\027\044\041\001\001\000" +
    "\004\026\272\001\001\000\002\001\001\000\004\026\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\301\042\302\001\001\000\002\001\001\000\004\043\313" +
    "\001\001\000\004\043\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\310\001\001" +
    "\000\002\001\001\000\004\043\312\001\001\000\004\043" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\023\033\024\024\027" +
    "\032\036\333\037\036\040\031\041\027\044\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\033\024\024\027\032\036\351\037\036\040\031\041\027" +
    "\044\041\001\001\000\022\023\033\024\024\027\032\036" +
    "\346\037\036\040\031\041\027\044\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\033\024\024\027\032" +
    "\036\354\037\036\040\031\041\027\044\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\023\033\024\024\027\032\036\360\037\036\040\031\041" +
    "\027\044\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\023\033\024" +
    "\024\027\032\036\365\037\036\040\031\041\027\044\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\023\033\024\024\027\032\036" +
    "\375\037\036\040\031\041\027\044\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0103\007\u0102\001\001" +
    "\000\002\001\001\000\004\020\u0105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\u010b\014\016\015\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u0116" +
    "\012\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u0112\001\001\000\004\012\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u011e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\u012a\005" +
    "\u0126\010\u0129\021\u0123\022\u0127\023\u0125\024\u0122\027\u0124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\u0138\021\u0137\022\u0127" +
    "\023\u0125\024\u0122\027\u0124\001\001\000\014\021\u0136\022" +
    "\u0127\023\u0125\024\u0122\027\u0124\001\001\000\002\001\001" +
    "\000\014\021\u0130\022\u0127\023\u0125\024\u0122\027\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u012d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\u0139" +
    "\022\u0127\023\u0125\024\u0122\027\u0124\001\001\000\002\001" +
    "\001\000\022\004\u013b\005\u0126\010\u0129\021\u0123\022\u0127" +
    "\023\u0125\024\u0122\027\u0124\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u013e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u0144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u0147\001\001\000\002\001" +
    "\001\000\022\004\u0149\005\u0126\010\u0129\021\u0123\022\u0127" +
    "\023\u0125\024\u0122\027\u0124\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u014c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u0152\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\u0155\005\u0126\010\u0129\021" +
    "\u0123\022\u0127\023\u0125\024\u0122\027\u0124\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0158\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u015c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\u0161\005\u0126" +
    "\010\u0129\021\u0123\022\u0127\023\u0125\024\u0122\027\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\u0172" +
    "\005\015\010\021\013\012\014\016\015\010\001\001\000" +
    "\016\003\u016b\005\015\010\021\013\012\014\016\015\010" +
    "\001\001\000\002\001\001\000\022\023\033\024\024\027" +
    "\032\036\u016e\037\036\040\031\041\027\044\041\001\001" +
    "\000\022\023\033\024\024\027\032\036\u0170\037\036\040" +
    "\031\041\027\044\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\023\033\024\024\027\032\036\u0174\037\036" +
    "\040\031\041\027\044\041\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<String> errores = new ArrayList<String>();
    private ArrayList<String> errSemanticos = new ArrayList<>();
    private ArrayList<String> multi_vars = new ArrayList<>();
    private ArrayList<String> params_funct = new ArrayList<>();
    private int count_paramsFunct = 0;
    private LexerAnalyzer scanner;
    private ArrayList<Symb> tableSymb = new ArrayList<>();
    private String funct_current = "";
    private String type_current = "";

    public String toStringErrores() {        
        String value = "";
        for (String error : errores)            
            value += error + "\n";
        return value;
    }

    public void setScanner(LexerAnalyzer lexer){
        scanner = lexer;
    }

    @Override
    protected int error_sync_size () { return 1; }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token == null || cur_token.value == null) { //No se encontró token END
            reportar_error("Error fatal de sintaxis al final del programa.", null);
        }
        else { //Por si acaso
            reportar_error("Error fatal de sintaxis en " + cur_token.value.toString(), cur_token);
        }        
    }

    public void imprimirErrores() {
        System.out.println("\nErrores sintácticos: ");
        for (String error : errores) {
            System.out.println(error);
        }
    }    
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("ERROR");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }

    @Override
    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }

    public void reportar_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }

    public boolean add_to_TS(String name, String type_token, String data_type, int line, String ambito, int qty_params) {        
        for (Symb sym: tableSymb) {
            if (name.equals(sym.getName()) && ambito.equals(sym.getAmbito())) {
                errSemanticos.add("Doblemente declarada: " + name);
                return false;
            }
        }
        Symb newSym = new Symb(name, type_token, data_type, line, ambito, qty_params);
        tableSymb.add(newSym);
        return true;
    }

    public void add_multiVars_to_TS(String dt, int line){
        for (String var : multi_vars) {            
            add_to_TS(var, "VAR", dt, line, getFunction(), 0);
        }
        multi_vars.clear();
    }

    public void printTablaSimbolos(){
        try {
            String arch = "TablaSimbolos.txt";
            BufferedWriter out = new BufferedWriter(new FileWriter(arch));
            int cont=0;
            for(Symb s: tableSymb){
                out.write(cont+"=>"+s.toString());
                out.newLine();
                cont++;
            }
            out.close();
        } catch (IOException ex) {
            
        }
    }

    public String getFunction() {
        if (funct_current.equals("")) {
            return "GLOBAL";
        } else {
            return funct_current;
        }
    }

    public boolean setQty_paramsFunct(String id_funct) {
        for (Symb symb : tableSymb) {
            if (id_funct.equals(symb.getName())) {
                symb.setQty_params(count_paramsFunct);
                return true;
            }
        }
        return false;
    }

    public void params_into_TS(String id, String dt, int line) {
        add_to_TS(id, "PARAM", dt, line, funct_current, 0); 
        count_paramsFunct += 1;       
    }

    public String toStringErrSem() {
        String value = "****** ERRORES SEMANTICOS ******\n";
        for (String errSemantico : errSemanticos) {
            value += errSemantico + "\n";
        }
        return value;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaration_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaration_program ::= RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_program ::= error IDENTIFIER optional_sections RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
                                parser.report_error("ERROR: Sin PROGRAM",e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_program ::= RW_PROGRAM error optional_sections RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
                                parser.report_error("ERROR: Programa sin IDENTIFICADOR", e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_program ::= RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                parser.report_error("Error en declaración bloques programa",e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optional_sections ::= constants_section variables_section functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optional_sections ::= constants_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optional_sections ::= variables_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optional_sections ::= functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optional_sections ::= constants_section variables_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optional_sections ::= constants_section functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optional_sections ::= variables_section functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optional_sections ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optional_sections2 ::= constants_section variables_section seccion_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optional_sections2 ::= constants_section seccion_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optional_sections2 ::= variables_section seccion_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optional_sections2 ::= seccion_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optional_sections2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constants_section ::= RW_CONST declarations_constants 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constants_section",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarations_constants ::= declaration_constant 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_constants",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarations_constants ::= declaration_constant declarations_constants 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_constants",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_constant ::= IDENTIFIER OPB_EQUAL value OP_SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                                add_to_TS(id.toString(), "CONST", "NONE", idleft, getFunction(), 0);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_constant",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration_constant ::= error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                parser.report_error("ERROR: Declaración de constante incorrecta ", e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_constant",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variables_section ::= RW_VAR declarations_variables 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_section",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarations_variables ::= declaration_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_variables",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarations_variables ::= declaration_var declarations_variables 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarations_variables",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration_var ::= IDENTIFIER OP_TWOPOINTS DATA_TYPE OP_SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                            multi_vars.add(id.toString());
                            add_multiVars_to_TS(dt.toString(), idleft);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_var",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                            multi_vars.add(id.toString());
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_var ::= IDENTIFIER OP_COMMA NT$0 declaration_var 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_var",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration_var ::= error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                            parser.report_error("ERROR: Declaración de variable incorrecta", e);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_var",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functions_section ::= function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functions_section ::= procedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // functions_section ::= function functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // functions_section ::= procedure functions_section 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 funct_current = id.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function ::= RW_FUNCTION IDENTIFIER NT$1 OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN optional_sections2 IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
                    if(!id.equals(id_return)){
                        parser.report_error("ERROR: ID y ID de retorno distintos ", id);
                    } else {
                        add_to_TS(id.toString(), "FUNCT", dt.toString(), idleft, "GLOBAL", 0);
                        setQty_paramsFunct(funct_current);
                        count_paramsFunct = 0;
                        funct_current = "";
                        params_funct.clear();
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function ::= RW_FUNCTION IDENTIFIER error RW_BEGIN optional_sections2 IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		
                    parser.report_error("ERROR: Función parametros proc cuerpo incorrecto", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function ::= RW_FUNCTION error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    parser.report_error("ERROR: Función estructura incorrecta", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN optional_sections2 IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
                        if(!id.equals(id_return)){                            
                            parser.report_error("ERROR: Identificador de procedimiento y retorno distintos", id);
                        }
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error RW_BEGIN optional_sections2 IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		
                        parser.report_error("ERROR: Procedimiento con valor de retorno", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN error IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
                        parser.report_error("ERROR: Procedimiento cuerpo incorrecto", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedure ::= RW_PROCEDURE IDENTIFIER error RW_BEGIN optional_sections2 IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		
                        parser.report_error("ERROR: Procedimiento parametros proc cuerpo incorrecto", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedure ::= RW_PROCEDURE error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        parser.report_error("ERROR: Procedimiento estructura incorrecta", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameters ::= DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        params_into_TS(id.toString(), dt.toString(), idleft);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameters ::= DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        params_into_TS(id.toString(), dt.toString(), idleft);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameters ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameters ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        parser.report_error("ERROR: Estructura de paramatro incorrecta", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            params_into_TS(id.toString(), dt.toString(), idleft);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                            params_into_TS(id.toString(), dt.toString(), idleft);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameters_list ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            parser.report_error("ERROR: Estructura del parametros mal definida", e);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= SCIENTIFIC_NOTATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= STRING_LINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= STRING_BLOCK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= NUMERAL_CHARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // seccion_instrucciones ::= seccion_instrucciones1 seccion_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // seccion_instrucciones ::= seccion_instrucciones1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // seccion_instrucciones1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // seccion_instrucciones1 ::= bloque_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // seccion_instrucciones1 ::= bloque_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_while ::= RW_WHILE error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                parser.report_error("Falta expresión en while", e);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                parser.report_error("ERROR: Falta do para el while", e);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                parser.report_error("ERROR: Falta begin para el while", e);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO RW_BEGIN error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
                parser.report_error("ERROR: Falta begin para el while", e);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloque_if ::= RW_IF OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_THEN block_optional_if block_optional_else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloque_if ::= RW_IF error block_optional_if block_optional_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                    parser.report_error("Error: falta paréntesis abrir en IF", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bloque_if ::= RW_IF OP_LEFTPARENTHESIS condicion_booleana error RW_THEN block_optional_if block_optional_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                    parser.report_error("Error: falta paréntesis cerrar en IF", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bloque_if ::= RW_IF OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS error block_optional_if block_optional_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		                     
                    parser.report_error("Error: falta THEN o cuerpo incorrecto del IF", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // block_optional_else ::= RW_ELSE RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("block_optional_else",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // block_optional_else ::= RW_ELSE sentencia 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("block_optional_else",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // block_optional_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("block_optional_else",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // block_optional_if ::= RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("block_optional_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // block_optional_if ::= sentencia 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("block_optional_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bloque_for ::= RW_FOR error OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		
                        parser.report_error("Error: en identificador en FOR", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bloque_for ::= RW_FOR IDENTIFIER error ENTERO RW_TO ENTERO RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		
                        parser.report_error("Error: en asignación en FOR", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO error ENTERO RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
                        parser.report_error("Error: Falta TO en FOR", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO error RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
                        parser.report_error("Error: Falta entero en FOR", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO error RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		 
                        parser.report_error("Error: Falta DO en FOR", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
                        parser.report_error("Error: Falta BEGIN en FOR", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO RW_BEGIN cuerpo_estructura_control error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                        parser.report_error("Error: Falta END en FOR", e);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicion_booleana ::= condicion_booleana1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicion_booleana ::= condicion_not 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicion_booleana ::= OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS operador_booleano OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicion_booleana ::= RW_TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicion_booleana ::= RW_FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion_booleana ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                                parser.report_error("Error en condición booleana",e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion_not ::= OPB_NOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_not",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion_not ::= OPB_NOT OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_not",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion_booleana1 ::= condicion_booleana2 operador_booleano condicion_booleana2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicion_booleana1 ::= condicion_booleana2 operador_booleano RW_TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion_booleana1 ::= condicion_booleana2 operador_booleano RW_FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion_booleana2 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicion_booleana2 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicion_booleana2 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operador_booleano ::= OPB_EQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operador_booleano ::= OPB_GREATEREQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operador_booleano ::= OPB_GREATER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operador_booleano ::= OPB_LESSEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operador_booleano ::= OPB_LESS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operador_booleano ::= OPB_DIFERENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operador_booleano ::= OPB_OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operador_booleano ::= OPB_AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operador_booleano ::= OPB_NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operador_aritmetico ::= OP_PLUSPLUS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operador_aritmetico ::= OP_LESSLESS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operador_aritmetico ::= OP_TWOPOINTSEGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operador_aritmetico ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operador_aritmetico ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operador_aritmetico ::= OP_MULTIPLY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operador_aritmetico ::= OP_DIVIDE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operador_aritmetico ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operador_aritmetico ::= OP_LEFTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operador_aritmetico ::= OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operador_aritmetico ::= OP_PLUSEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operador_aritmetico ::= OP_LESSEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operador_aritmetico ::= OP_MULTEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operador_aritmetico ::= OP_DIVEQUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operador_aritmetico ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operador_aritmetico1 ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operador_aritmetico1 ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operador_aritmetico1 ::= OP_MULTIPLY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operador_aritmetico1 ::= OP_DIVIDE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_aritmetico1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cuerpo_estructura_control ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cuerpo_estructura_control ::= cuerpo_estructura_control1 cuerpo_estructura_control 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cuerpo_estructura_control1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cuerpo_estructura_control1 ::= bloque_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cuerpo_estructura_control1 ::= bloque_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cuerpo_estructura_control1 ::= sentencia 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL OP_PLUSPLUS IDENTIFIER OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL OP_LESSLESS IDENTIFIER OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER OP_LEFTPARENTHESIS params_funct_call OP_RIGHTPARENTHESIS OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL value operador_aritmetico value OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER OP_PLUSPLUS OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER OP_LESSLESS OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER operador_aritmetico1 IDENTIFIER OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER operador_aritmetico1 value OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencia ::= read_funct_call OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia ::= write_funct_call OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia ::= IDENTIFIER OP_LEFTPARENTHESIS params_funct_call OP_RIGHTPARENTHESIS OP_SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencia ::= IDENTIFIER error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    parser.report_error("Error en sentencia", e);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // values_params ::= value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // values_params ::= IDENTIFIER OPB_EQUAL value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // values_params ::= IDENTIFIER operador_aritmetico1 IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // values_params ::= IDENTIFIER operador_aritmetico1 value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // values_params ::= value operador_aritmetico1 IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // values_params ::= value operador_aritmetico1 value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // values_params ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // params_funct_call ::= values_params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_funct_call",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // params_funct_call ::= values_params params_list_funt_call 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_funct_call",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // params_funct_call ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_funct_call",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // params_funct_call ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            parser.report_error("ERROR: Estructura de paramatro incorrecta en llamada de función", e);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_funct_call",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // params_list_funt_call ::= OP_COMMA values_params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_list_funt_call",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // params_list_funt_call ::= OP_COMMA values_params params_list_funt_call 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_list_funt_call",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // params_list_funt_call ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                parser.report_error("ERROR: Estructura del parametros mal definida en llamada de función", e);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_list_funt_call",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // read_funct_call ::= RW_READ OP_LEFTPARENTHESIS OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("read_funct_call",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // read_funct_call ::= RW_READ OP_LEFTPARENTHESIS IDENTIFIER OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("read_funct_call",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // read_funct_call ::= RW_READ error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            parser.report_error("ERROR: Llamada incorrecta a función READ", e);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("read_funct_call",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // write_funct_call ::= RW_WRITE OP_LEFTPARENTHESIS parameters_write OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("write_funct_call",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // write_funct_call ::= RW_WRITE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            parser.report_error("ERROR: Llamada incorrecta a función WRITE", e);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("write_funct_call",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // parameters_write ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // parameters_write ::= value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // parameters_write ::= IDENTIFIER params_list_write 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // parameters_write ::= value params_list_write 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parameters_write ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            parser.report_error("ERROR: Estructura de paramatro en WRITE incorrecta", e);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // params_list_write ::= OP_COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // params_list_write ::= OP_COMMA value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // params_list_write ::= OP_COMMA IDENTIFIER params_list_write 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // params_list_write ::= OP_COMMA value params_list_write 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // params_list_write ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            parser.report_error("ERROR: Estructura del parametros de llamada a función mal definida", e);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
